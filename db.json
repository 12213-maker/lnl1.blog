{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/css/background.css","path":"css/background.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/touxiang.jpg","path":"img/touxiang.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1651646398237},{"_id":"themes/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1651649462097},{"_id":"themes/hexo-theme-butterfly/package.json","hash":"e404e110dc6582822567aaf6ea42b3e17ec29cd5","modified":1651649462259},{"_id":"themes/hexo-theme-butterfly/README.md","hash":"6ee27baf95a5741abbc224ef8938d679b6597665","modified":1651649462262},{"_id":"themes/hexo-theme-butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1651649462273},{"_id":"themes/hexo-theme-butterfly/README_CN.md","hash":"49ace5208f98783344f17a00adab7641cda43280","modified":1651649462260},{"_id":"themes/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1651649462291},{"_id":"themes/hexo-theme-butterfly/_config.yml","hash":"4fce3d84ff41b6b1b7d587fb6803dfe00f2d9334","modified":1651671569114},{"_id":"themes/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1651649462328},{"_id":"themes/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1651649462347},{"_id":"themes/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1651649462363},{"_id":"themes/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1651649462354},{"_id":"themes/hexo-theme-butterfly/.github/stale.yml","hash":"5e8ea535424e8112439135d21afc5262c0bc0b39","modified":1651649462435},{"_id":"themes/hexo-theme-butterfly/languages/default.yml","hash":"1e37a3695d50e3e61d7c36e58a6dac872a4a56cd","modified":1651649462431},{"_id":"themes/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1651649462264},{"_id":"themes/hexo-theme-butterfly/languages/en.yml","hash":"d1bb560698eb8b0079495b7b18b44facb610f9fd","modified":1651649462432},{"_id":"themes/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1651649462307},{"_id":"themes/hexo-theme-butterfly/languages/zh-CN.yml","hash":"28b6f0c39155651d747eb595e0a283bc97be2e09","modified":1651649462436},{"_id":"themes/hexo-theme-butterfly/languages/zh-TW.yml","hash":"947f794e862bb2813e36887f777bdb760f70a322","modified":1651649462437},{"_id":"themes/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"594a977ebe8d97e60fa3d7cb40fc260ded4d8a58","modified":1651649462267},{"_id":"themes/hexo-theme-butterfly/layout/includes/head.pug","hash":"54511ed299a3bcf4ecbb62e3078f6b0611ccbd2c","modified":1651649462315},{"_id":"themes/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1651649462360},{"_id":"themes/hexo-theme-butterfly/layout/includes/layout.pug","hash":"da27c20f0e672103b984e135eb2fe7770ca7fcce","modified":1651649462332},{"_id":"themes/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1651649462430},{"_id":"themes/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1651649462347},{"_id":"themes/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1651649462432},{"_id":"themes/hexo-theme-butterfly/scripts/events/config.js","hash":"af5795ddf62855d13dece2b3947d6bb4481e0356","modified":1651649462175},{"_id":"themes/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"699d0d2cff233628752956c4434125c8203f7d63","modified":1651649462358},{"_id":"themes/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1651649462153},{"_id":"themes/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"67e4f5a66d4b8cabadbaad0410628364ee75e0ae","modified":1651649462430},{"_id":"themes/hexo-theme-butterfly/scripts/events/welcome.js","hash":"3cfc46c749e2fd7ae9c2a17206238ed0e0e17e7d","modified":1651649462258},{"_id":"themes/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1651649462249},{"_id":"themes/hexo-theme-butterfly/scripts/events/init.js","hash":"a7f567b3d3110afe2f99c967b8e15351a7f5bd6d","modified":1651649462187},{"_id":"themes/hexo-theme-butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1651649462251},{"_id":"themes/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"21379ed2dccb69c43b893895c9d56238c11e5f43","modified":1651649462250},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1651649462164},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1651649462245},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"b4cd617c619d1a0df93603721a6fa1317526174b","modified":1651649462188},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1651649462167},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"d368a8830e506c8b5eb6512b709ec8db354d5ea1","modified":1651649462251},{"_id":"themes/hexo-theme-butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1651649462171},{"_id":"themes/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1651649462177},{"_id":"themes/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1651649462180},{"_id":"themes/hexo-theme-butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1651649462182},{"_id":"themes/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1651649462189},{"_id":"themes/hexo-theme-butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1651649462236},{"_id":"themes/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1651649462242},{"_id":"themes/hexo-theme-butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1651649462243},{"_id":"themes/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1651649462252},{"_id":"themes/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1651649462254},{"_id":"themes/hexo-theme-butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1651649462407},{"_id":"themes/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1651649462263},{"_id":"themes/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1651649462434},{"_id":"themes/hexo-theme-butterfly/source/css/var.styl","hash":"4890a40366d6443f8b8942a4e9a6dce9fe3494f5","modified":1651649462425},{"_id":"themes/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1651649462145},{"_id":"themes/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1651649462138},{"_id":"themes/hexo-theme-butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1651649462256},{"_id":"themes/hexo-theme-butterfly/source/js/main.js","hash":"04efcbd28b37875cfec88eb87cab7256a9ebb327","modified":1651649462241},{"_id":"themes/hexo-theme-butterfly/source/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1651649462257},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1651649462346},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1651649462271},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1651649462314},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1651649462344},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"8f41fa9732ea654a10f6e666d9c782c7e27e5ea6","modified":1651649462293},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1651649462356},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1651649462361},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1651649462293},{"_id":"themes/hexo-theme-butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1651649462334},{"_id":"themes/hexo-theme-butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1651649462339},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1651649462355},{"_id":"themes/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":1651649462343},{"_id":"themes/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1651649462341},{"_id":"themes/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1651649462318},{"_id":"themes/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1651649462362},{"_id":"themes/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"ef2abe26e11ae9a786771144383e9fcb66719209","modified":1651649462352},{"_id":"themes/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1651649462274},{"_id":"themes/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"b9ebb02af8ccf43e3f73be43db19254fa913c57b","modified":1651649462353},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1651649462304},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1651649462272},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1651649462348},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1651649462355},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1651649462276},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"de2e978ff0cacd02eb635cf7676a39e9a21781dd","modified":1651649462349},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"bae2f32ac96cebef600c1e37eaa8467c9a7e5d92","modified":1651649462362},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1651649462277},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1651649462280},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1651649462278},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1651649462279},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1651649462281},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1651649462282},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1651649462284},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1651649462283},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1651649462285},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1651649462287},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1651649462286},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1651649462325},{"_id":"themes/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1651649462357},{"_id":"themes/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1651649462290},{"_id":"themes/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1651649462297},{"_id":"themes/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1651649462364},{"_id":"themes/hexo-theme-butterfly/source/css/_global/function.styl","hash":"644d520fe80cc82058467708ab82ccad313b0c27","modified":1651649462397},{"_id":"themes/hexo-theme-butterfly/source/css/_global/index.styl","hash":"714f19e7d66df84938bd1b82b33d5667abe1f147","modified":1651649462404},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1651649462402},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1651649462424},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1651649462384},{"_id":"themes/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1651649462350},{"_id":"themes/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"fed069baa9b383f57db32bb631115071d29bdc60","modified":1651649462306},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"ca58af8903eb1d1d05edae54fc2e23aeac6da6c5","modified":1651649462382},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"7a7e14966c83f727f80639ba26e062b9871168a5","modified":1651841752775},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"d97c1722ce0fcc319f1f90ec2d51f9d746748e2b","modified":1651649462399},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1651649462385},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ef21990de28bd75dcd0f88b8d616e1a7a137502f","modified":1651649462411},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1651649462414},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1651649462418},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"15056fba0bd5a45ea8dc97eb557f6929ff16797a","modified":1651649462416},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"bd88ee30ebf8ca2e7b4d3a034c317fd61733921f","modified":1651649462419},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1651649462419},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1651649462420},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"8314e9749eb1ae40c4bae9735b7a6638b2d6876a","modified":1651649462424},{"_id":"themes/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1651649462384},{"_id":"themes/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1651649462379},{"_id":"themes/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1651649462376},{"_id":"themes/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1651649462423},{"_id":"themes/hexo-theme-butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1651649462386},{"_id":"themes/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1651649462395},{"_id":"themes/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"826dae759062d8f84eb2bf5ab8fdb80e0f79d58b","modified":1651649462403},{"_id":"themes/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"f67177310f5594954b25a591d186d28d5d450b18","modified":1651649462389},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1651649462383},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1651649462398},{"_id":"themes/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"69f8e9414526dfda3af9a71c8e528fdd0ecbbfe5","modified":1651649462417},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1651649462409},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1651649462400},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1651649462401},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1651649462408},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"08493b66b9f31f2bd3e9a3115017a0ce16142b20","modified":1651649462412},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1651649462422},{"_id":"themes/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"51e45625929d57c9df3ba9090af99b9b7bb9a15b","modified":1651649462377},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1651649462425},{"_id":"themes/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"f9cd4dbbe5e3c7760b1a37d4d2b8d09be37b8880","modified":1651649462411},{"_id":"themes/hexo-theme-butterfly/source/css/_search/index.styl","hash":"39d61cbe0c1e937f83ba3b147afaa29b4de2f87d","modified":1651649462406},{"_id":"themes/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1651649462116},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1651649462300},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"7d98129f2ee08169f877b76d4d0b95c17df354f8","modified":1651649462367},{"_id":"themes/hexo-theme-butterfly/source/js/search/algolia.js","hash":"ce8131b712dca80f289015aef75f86e727f62981","modified":1651649462159},{"_id":"themes/hexo-theme-butterfly/source/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1651649462238},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"5f648086a33a32d169a2f8d8c549c08aa02f67db","modified":1651649462372},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1651649462305},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"309b9aee523f90aff13d48142d124de9039d8511","modified":1651649462369},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1651649462301},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1651649462318},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"693d999777dd16e0566d29ac3203d4c167b2f9a7","modified":1651649462302},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"2d8fc3fb8f9aec61400acf3c94070bd8539058f8","modified":1651649462305},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"591ef23c583690bd74af0cafb09af64ba5bd8151","modified":1651649462310},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"22e2ef30fe5eb1db7566e89943c74ece029b2a8e","modified":1651649462312},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"e4850f2c9ba5f6b2248808f7257662679e0fab0a","modified":1651649462320},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"9302837f1e35f153323bb4f166514c7e96e8ecdd","modified":1651649462330},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1651649462333},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"c488a3414dbae899488b6d46f6cb91575bc23b9e","modified":1651649462368},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1651649462369},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1651649462370},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"15462d1ed04651ad3b430c682842ac400f6f9b47","modified":1651649462374},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1651649462313},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1651649462298},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1651649462322},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"26ac3fb930fe9f3ace0c5d0191b87425bf053e74","modified":1651649462366},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1651649462371},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1651649462292},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"dd0bc119029b62dce5dc965d5de7377e438fa29a","modified":1651649462375},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1651649462294},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1651649462295},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1651649462321},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1651649462313},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"8cb8fcc210edab1ae1adf4aee8cc6948f7e9f28e","modified":1651649462331},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1651649462319},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1651649462365},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1651649462323},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"e8245d0b4933129bb1c485d8de11a9e52e676348","modified":1651649462270},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"178c9cdcc4ce5a006885b24ce4a3d624e4734899","modified":1651649462340},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"5737164f5a77fb813b5bacba0a273d2a490a2ced","modified":1651649462341},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1651649462324},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1651649462266},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"7c712719bb8960c335f94b519923e5a86ee7bd32","modified":1651649462342},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1651649462269},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"f61d63724ea5c5f352568b3a16bde023affefbe5","modified":1651649462360},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1651649462405},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1651649462392},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1651649462394},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1651649462404},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1651649462410},{"_id":"public/atom.xml","hash":"33f3591da821a6e24f612191584b7b45ebc3bb08","modified":1651846643897},{"_id":"public/sitemap.xml","hash":"7e79c45ec2f19f442eaa4ab22d6610958eb96b9e","modified":1651846643897},{"_id":"public/sitemap.txt","hash":"b838db07c51b4a8e3567196f872e46ede279644b","modified":1651846643897},{"_id":"public/2022/05/04/hello-world/index.html","hash":"c1f06cd436e27efa5ef61e8730ea3959e1ebcfcc","modified":1651673424691},{"_id":"public/archives/index.html","hash":"461d7b52d1daea9738d6bf8dd3942b51888d5436","modified":1651846643897},{"_id":"public/archives/2022/index.html","hash":"711ed7282271090f7e57342678834969e528ef22","modified":1651846643897},{"_id":"public/archives/2022/05/index.html","hash":"4b293a8b0b6d62223d74d0cb9c0b3fa7bf6e7c44","modified":1651846643897},{"_id":"public/index.html","hash":"16ba28cbe4410b6a46f7de6580688fb63cd2448f","modified":1651846643897},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1651649908401},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1651649908401},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1651649908401},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1651649908401},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1651649908401},{"_id":"public/js/search/algolia.js","hash":"ce8131b712dca80f289015aef75f86e727f62981","modified":1651649908401},{"_id":"public/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1651649908401},{"_id":"public/css/index.css","hash":"61551503130fa9c41cbee888625cc4e871316999","modified":1651649908401},{"_id":"public/js/main.js","hash":"04efcbd28b37875cfec88eb87cab7256a9ebb327","modified":1651649908401},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1651649908401},{"_id":"source/_posts/ssr.md","hash":"542678fcdbfff0230371f731ca190de4536a7b29","modified":1651673381946},{"_id":"public/2022/05/04/ssr/index.html","hash":"c6734ea9a6b44c6e9e354cffc9d83daa73ef6131","modified":1651673424691},{"_id":"themes/hexo-theme-butterfly/source/img/1.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1651649462263},{"_id":"themes/hexo-theme-butterfly/source/css/background.css","hash":"c1f51195eb647ea4f1ef76b3c76058aacf354ea6","modified":1651670891071},{"_id":"source/_posts/_data/_config.butterfly.yml","hash":"7bcfc3e3e015ba460a54dca10f5307f6cf885038","modified":1651669598014},{"_id":"themes/hexo-theme-butterfly/source/img/touxiang.jpg","hash":"f7477f499954d5b56a5a95be528b2d0ccba9b569","modified":1651667907810},{"_id":"source/categories/index.md","hash":"d1484de57183348997c49233c38c646030e71077","modified":1651672998717},{"_id":"public/search.xml","hash":"5ba0b95bb3ef964e92cb790a27f201017d37b7d9","modified":1651846643897},{"_id":"public/categories/index.html","hash":"7f2e68485790fd96da09c94528b68cae288c27d3","modified":1651846643897},{"_id":"public/img/touxiang.jpg","hash":"f7477f499954d5b56a5a95be528b2d0ccba9b569","modified":1651673424691},{"_id":"public/css/background.css","hash":"52ac1d56cd7aa757048e0fc205c207776726b799","modified":1651673424691},{"_id":"source/_posts/sort.md","hash":"15e02956494c572019aa1729e7c1e1db1c1c0c1b","modified":1651839857845},{"_id":"source/_posts/安装echarts.md","hash":"a79d291c9086d5cd6d366091cdd8450553cf89a5","modified":1651845457470},{"_id":"source/_posts/刷题心得记录.md","hash":"e95e7a018de7bcba575a2c1ba16ef88c6e44d7d8","modified":1651840174629},{"_id":"source/_posts/js 实现链表.md","hash":"279d92e8f59c442a91c00644c63c1e9cf7bf46db","modified":1651840054547},{"_id":"source/_posts/canvas.md","hash":"313a74a192f8cbf2fd72d3bace3467b50871512b","modified":1651844377934},{"_id":"source/_posts/瀑布流_懒加载.md","hash":"5db3b59657622f7c63f2a2078885e96df05f5d4f","modified":1651844171534},{"_id":"source/_posts/vue刷新页面.md","hash":"d601859266bb57972f67e7429ca047cdf1ae2daa","modified":1651844458014},{"_id":"source/_posts/路由.md","hash":"95ccb7d08da5f043f55b393916076191da3704e2","modified":1651844604176},{"_id":"source/_posts/JS 的同步异步操作 和 事件循环机制.md","hash":"7319123944b434017622b1c1415d064ca86e2814","modified":1651846535320},{"_id":"public/2022/05/06/JS 的同步异步操作 和 事件循环机制/index.html","hash":"afc56cd430309f0761bbc714d0aa0527909dfc73","modified":1651846643897},{"_id":"public/2022/05/06/vue刷新页面/index.html","hash":"2dae9777e62ea7f7f7ebe0d4e34fa439490287bd","modified":1651846643897},{"_id":"public/2022/05/06/路由/index.html","hash":"cd25fc28231af27a73a57a575d5d8edaf4447586","modified":1651846643897},{"_id":"public/2022/05/06/canvas/index.html","hash":"02de8da3e198994543c201dcc4b81208d5cd7ab9","modified":1651846643897},{"_id":"public/2022/05/06/瀑布流_懒加载/index.html","hash":"c4b0f6e917bdf1fdb417e85b1f6305bef57a1a6e","modified":1651846643897},{"_id":"public/2022/05/06/安装echarts/index.html","hash":"070ed18cd2c83cbed23f3162ffe10ba53f3c9b10","modified":1651846643897},{"_id":"public/2022/05/06/刷题心得记录/index.html","hash":"2155eafc5071b1b5e3b9b7475ff52f8a2f753326","modified":1651846643897},{"_id":"public/2022/05/06/js 实现链表/index.html","hash":"ac6a4baa767f24d846495c0d988dec4a4145093e","modified":1651846643897},{"_id":"public/2022/05/06/sort/index.html","hash":"6b246fb60828cba2b08daafca1afad69850d409f","modified":1651846643897}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2022-05-04T14:03:18.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-05-04 22:03:18\n---\n","updated":"2022-05-04T14:03:18.717Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl2rnpnrs00000kvoc4ii81au","content":"","site":{"data":{}},"cover":"/img/avator.jpg","excerpt":"","more":""}],"Post":[{"title":"排序算法总结","_content":"\n## 零 . 冒泡排序 ( js ) 时间复杂度: O(N2)\n循环n次 , 每次把最大的冒泡到最后面\n\n```javascript\nlet num = [2,8,6,5,1,2,3,4,5,6]\n\nlet bubbleSort = (arr)=>{\n    for(let i = arr.length-1;i>=0;i--){\n        for(let j = 0;j<=i;j++){\n            if(arr[j]>arr[j+1]){\n                [arr[j],arr[j+1]] = [arr[j+1],arr[j]]\n            }\n        }\n    }\n}\n\nbubbleSort(num)\nconsole.log(num);\n```\n## 一 . 堆排序(js)\n\n 先把数组调整为大根堆 , 再把最顶部的元素与最后一个元素交换 , 交换之后再次进行堆调整 , 直到调整到最小值在顶部 \n\n```javascript\nlet num = [1, 6, 12, 4, 5, 7, 8, 8, 9, 10, 0]\n\n//调整最大堆 arr数组 , i 是每次调整的父节点  , len 是目前堆的大小\nlet downAdjust = (arr, i, len) => {\n    //用左孩子来判断终止条件,在里面判断有没有右孩子 如果用右孩子判断的话,不确定结束的时候还有没有左孩子\n    let leftchild = 2 * i + 1\n    while (leftchild < len) {\n\n        //判断右孩子\n        if (leftchild+1 < len && arr[leftchild + 1] > arr[leftchild])\n            leftchild++\n        //父节点大直接跳出\n        if (arr[i] >= arr[leftchild])\n        break\n        //交换节点\n        [arr[i], arr[leftchild]] = [arr[leftchild], arr[i]]\n        //下标\n        i = leftchild\n        leftchild = 2 * i + 1\n        \n\n    }\n}\n\n//创造堆 , 进行sort\nlet heapSort = (arr)=>{\n    //把这个堆构建成最大堆. i代表的是父节点 , 显然从length-1开始是没有子节点的 \n    //从有子节点的父节点开始构造堆 , 也就是i = (arr.length-1-1)/2  >>是除以二的意思\n    for(let i = (arr.length-2)>>1;i>=0;i--){\n        downAdjust(arr,i,arr.length)\n    }\n    console.log(arr ,'最大堆');\n\n    //循环删除替换arr中最大元素到尾部\n    for(let i= arr.length-1;i>0;i--){\n        [arr[0],arr[i]] = [arr[i],arr[0]]\n        //替换之后调整堆\n        downAdjust(arr,0,i)\n    }\n\n}\n\nconsole.log(num , '无序数组');\nheapSort(num)\nconsole.log(num , '排序好的数组');\n\n```\n\n## 二 . 快排 ( js ) 时间复杂度:O(nlogn)\n每次选定一个基值 , 比基值小的放在左边 , 比基值大的放右边 , 用递归来实现 , 也可以使用\n\n```javascript\n//当数据量很大的时候 , 递归快排会造成栈溢出 , 为了解决这个问题 , 我们使用js数组 来模拟栈 , \n//将待排序的[left,right]保存到数组中 , 循环取出进行快排 \n// let num = [4, 7, 3, 5, 6, 2, 8, 1]\nlet num = [1,3,2,5,9,6,8,7]\n//非递归实现快排\nconst quickSort = (num, left, right) => {\n    let flag = left\n    let mark = left\n    while (left <= right) {\n        if (num[left] < num[flag]) {\n            //这个时候mark就要往右移动一位 , 因为找到了一个小于flag 的数\n            mark++\n            [num[left], num[mark]] = [num[mark], num[left]]\n        }\n        left++\n    }\n    //交换基准数 和 mark 的值\n    [num[flag], num[mark]] = [num[mark], num[flag]]\n    //最后要返回基准数\n    return mark\n}\n\n//使用非递归的方式进行快排\nconst jisuan = (num,left,right)=>{\n    let list = [[left,right]]\n    while(list.length!=0){\n        let now = list.pop()\n        if(now[0]>=now[1])\n        continue;//结束这次循环去到下一个list.pop\n        let flag = quickSort(num,now[0],now[1])\n        //flag-1 和 flag+1 避免了类似[1,3,2,5,9,6,8,7]这样flag一直卡在0的情况\n        list.push([now[0],flag-1])\n        list.push([flag+1,now[1]])\n    }\n}\njisuan(num,0,num.length-1)\nconsole.log(num);\n```\n## 三 . 归并排序 O(nlogn)\n分开排序再合并起来\n```javascript\nconst merger = (leftArr,rightArr) => {\n    let left_len = leftArr.length\n    let right_len = rightArr.length\n    let arr = []\n    let i = 0\n    let j = 0\n    while(i<left_len && j<right_len){\n        leftArr[i]<rightArr[j] ? arr.push(leftArr[i++]) : arr.push(rightArr[j++])\n    }\n    while(i<left_len){\n        arr.push(leftArr[i++])\n    }\n    while(j<right_len){\n        arr.push(rightArr[j++])\n    }\n    return arr\n}\nconst mergeSort = (arr) => {\n    let length = arr.length\n    if (length <= 1) {\n        return arr\n    }\n    let mid = Math.floor(length/2)\n    let leftArr = mergeSort(arr.slice(0,mid))\n    let rightArr =mergeSort(arr.slice(mid))\n    return merger(leftArr ,rightArr );\n}\n\nlet num = [2,5,3,1,5,6,2,1,10,9,5,2,]\n\nconsole.log(mergeSort(num));\n```\n\n## 四 . 插入排序 ( java ) O(n2)\n```java\npackage class01;\n//插入排序: 保证第一层循环i前面的元素全部都是有序的排序 \npublic class sort_charu {\n\t\n\t\n\tpublic static void charusort(int[] arr) {\n\t\tif(arr.length<2||arr==null)return;\n\t\t\n\t\tfor(int i = 1;i<arr.length;i++) {\n\t\t\tfor(int j = i-1;j>=0&&arr[j]>arr[j+1];j--) {\n\t\t\t\tswap(arr, j+1, j);\n\t\t\t} \n\t\t\t\n\t\t}\n\t\t//直接输出arr是输出arr的首地址\n\t\tfor(int i : arr) {\n\t\t\tSystem.err.print(i);\n\t\t}\n\t}\n\t\n\tpublic static void swap(int[] arr,int i,int j) {\n\t\tarr[i] = arr[i]^arr[j];\n\t\tarr[j] = arr[i]^arr[j];\n\t\tarr[i] = arr[i]^arr[j];\n\t}\n\t\n\tpublic static void main(String[] args) {\n//\t\tint[] arr = new int[]{0,5,1,3,5,4,7,6,2};\n\t\tint[] arr = {1,2,3,4,5,6,2,3,4,5,6,7,8,8,8,8};\n\t\tcharusort(arr);\n\t}\n}\n```\n\n## 五 . 选择排序  O(n2)\n每次都选择最小的或者最大的放在开头或者放在结尾\n```javascript\n//每次遍历都找到最小的元素 , 放到数组的最开始\nlet num = [2,8,6,5,1,2,3,4,5,6]\n\nlet SelectSort = (arr)=>{\n    for(let i = 0;i<arr.length-1;i++){\n        let min = i\n        for(let j=i+1;j<arr.length-1;j++){\n            min = arr[j]<arr[min]?j:min\n        }\n        [arr[i],arr[min]] = [arr[min],arr[i]]\n    }\n\n\n    console.log(arr);\n}\nSelectSort(num)\n```\n\n## 六 . 桶排序 ( js )\n\n```javascript\n//桶排序 , 桶的数量就是要排序数组的长度  ,  桶区间就是(max-min)/桶数量\n\nlet num = [0.5, 0.84, 2.18, 3.25, 4.5]\n\nlet sort = (num) => {\n    let max = num[0]\n    let min = num[0]\n    num.forEach((item) => {\n        max = item > max ? item : max\n        min = item < min ? item : min\n    })\n\n    //初始化桶\n    let n = num.length\n    //桶区间就是(max-min)/桶数量\n    let d = (max - min) / (n - 1)\n\n    let arr = []\n    for (let i = 0; i < n; i++) {\n        arr[i] = []\n    }\n\n    //遍历原数组 , 将每个元素放入桶中\n    num.forEach((item) => {\n        //item要在每个桶里面都看一看\n        //index代表桶\n\n        arr.forEach((item1, index) => {\n            let left = min + (index) * d\n            let right = min + (index + 1) * d\n            if (item >= left && item < right)\n                arr[index].push(item)\n        })\n    })\n\n    let arr2 = []\n\n    //桶已经放好了 , 接下来就是对每个桶进行排序\n    arr.forEach((item,index)=>{\n        item.sort((a,b)=>a-b)\n        arr2.push(...item)\n    })\n\n    return arr2\n\n}\n\nconsole.log(sort(num));\n```","source":"_posts/sort.md","raw":"---\ntitle: 排序算法总结\n---\n\n## 零 . 冒泡排序 ( js ) 时间复杂度: O(N2)\n循环n次 , 每次把最大的冒泡到最后面\n\n```javascript\nlet num = [2,8,6,5,1,2,3,4,5,6]\n\nlet bubbleSort = (arr)=>{\n    for(let i = arr.length-1;i>=0;i--){\n        for(let j = 0;j<=i;j++){\n            if(arr[j]>arr[j+1]){\n                [arr[j],arr[j+1]] = [arr[j+1],arr[j]]\n            }\n        }\n    }\n}\n\nbubbleSort(num)\nconsole.log(num);\n```\n## 一 . 堆排序(js)\n\n 先把数组调整为大根堆 , 再把最顶部的元素与最后一个元素交换 , 交换之后再次进行堆调整 , 直到调整到最小值在顶部 \n\n```javascript\nlet num = [1, 6, 12, 4, 5, 7, 8, 8, 9, 10, 0]\n\n//调整最大堆 arr数组 , i 是每次调整的父节点  , len 是目前堆的大小\nlet downAdjust = (arr, i, len) => {\n    //用左孩子来判断终止条件,在里面判断有没有右孩子 如果用右孩子判断的话,不确定结束的时候还有没有左孩子\n    let leftchild = 2 * i + 1\n    while (leftchild < len) {\n\n        //判断右孩子\n        if (leftchild+1 < len && arr[leftchild + 1] > arr[leftchild])\n            leftchild++\n        //父节点大直接跳出\n        if (arr[i] >= arr[leftchild])\n        break\n        //交换节点\n        [arr[i], arr[leftchild]] = [arr[leftchild], arr[i]]\n        //下标\n        i = leftchild\n        leftchild = 2 * i + 1\n        \n\n    }\n}\n\n//创造堆 , 进行sort\nlet heapSort = (arr)=>{\n    //把这个堆构建成最大堆. i代表的是父节点 , 显然从length-1开始是没有子节点的 \n    //从有子节点的父节点开始构造堆 , 也就是i = (arr.length-1-1)/2  >>是除以二的意思\n    for(let i = (arr.length-2)>>1;i>=0;i--){\n        downAdjust(arr,i,arr.length)\n    }\n    console.log(arr ,'最大堆');\n\n    //循环删除替换arr中最大元素到尾部\n    for(let i= arr.length-1;i>0;i--){\n        [arr[0],arr[i]] = [arr[i],arr[0]]\n        //替换之后调整堆\n        downAdjust(arr,0,i)\n    }\n\n}\n\nconsole.log(num , '无序数组');\nheapSort(num)\nconsole.log(num , '排序好的数组');\n\n```\n\n## 二 . 快排 ( js ) 时间复杂度:O(nlogn)\n每次选定一个基值 , 比基值小的放在左边 , 比基值大的放右边 , 用递归来实现 , 也可以使用\n\n```javascript\n//当数据量很大的时候 , 递归快排会造成栈溢出 , 为了解决这个问题 , 我们使用js数组 来模拟栈 , \n//将待排序的[left,right]保存到数组中 , 循环取出进行快排 \n// let num = [4, 7, 3, 5, 6, 2, 8, 1]\nlet num = [1,3,2,5,9,6,8,7]\n//非递归实现快排\nconst quickSort = (num, left, right) => {\n    let flag = left\n    let mark = left\n    while (left <= right) {\n        if (num[left] < num[flag]) {\n            //这个时候mark就要往右移动一位 , 因为找到了一个小于flag 的数\n            mark++\n            [num[left], num[mark]] = [num[mark], num[left]]\n        }\n        left++\n    }\n    //交换基准数 和 mark 的值\n    [num[flag], num[mark]] = [num[mark], num[flag]]\n    //最后要返回基准数\n    return mark\n}\n\n//使用非递归的方式进行快排\nconst jisuan = (num,left,right)=>{\n    let list = [[left,right]]\n    while(list.length!=0){\n        let now = list.pop()\n        if(now[0]>=now[1])\n        continue;//结束这次循环去到下一个list.pop\n        let flag = quickSort(num,now[0],now[1])\n        //flag-1 和 flag+1 避免了类似[1,3,2,5,9,6,8,7]这样flag一直卡在0的情况\n        list.push([now[0],flag-1])\n        list.push([flag+1,now[1]])\n    }\n}\njisuan(num,0,num.length-1)\nconsole.log(num);\n```\n## 三 . 归并排序 O(nlogn)\n分开排序再合并起来\n```javascript\nconst merger = (leftArr,rightArr) => {\n    let left_len = leftArr.length\n    let right_len = rightArr.length\n    let arr = []\n    let i = 0\n    let j = 0\n    while(i<left_len && j<right_len){\n        leftArr[i]<rightArr[j] ? arr.push(leftArr[i++]) : arr.push(rightArr[j++])\n    }\n    while(i<left_len){\n        arr.push(leftArr[i++])\n    }\n    while(j<right_len){\n        arr.push(rightArr[j++])\n    }\n    return arr\n}\nconst mergeSort = (arr) => {\n    let length = arr.length\n    if (length <= 1) {\n        return arr\n    }\n    let mid = Math.floor(length/2)\n    let leftArr = mergeSort(arr.slice(0,mid))\n    let rightArr =mergeSort(arr.slice(mid))\n    return merger(leftArr ,rightArr );\n}\n\nlet num = [2,5,3,1,5,6,2,1,10,9,5,2,]\n\nconsole.log(mergeSort(num));\n```\n\n## 四 . 插入排序 ( java ) O(n2)\n```java\npackage class01;\n//插入排序: 保证第一层循环i前面的元素全部都是有序的排序 \npublic class sort_charu {\n\t\n\t\n\tpublic static void charusort(int[] arr) {\n\t\tif(arr.length<2||arr==null)return;\n\t\t\n\t\tfor(int i = 1;i<arr.length;i++) {\n\t\t\tfor(int j = i-1;j>=0&&arr[j]>arr[j+1];j--) {\n\t\t\t\tswap(arr, j+1, j);\n\t\t\t} \n\t\t\t\n\t\t}\n\t\t//直接输出arr是输出arr的首地址\n\t\tfor(int i : arr) {\n\t\t\tSystem.err.print(i);\n\t\t}\n\t}\n\t\n\tpublic static void swap(int[] arr,int i,int j) {\n\t\tarr[i] = arr[i]^arr[j];\n\t\tarr[j] = arr[i]^arr[j];\n\t\tarr[i] = arr[i]^arr[j];\n\t}\n\t\n\tpublic static void main(String[] args) {\n//\t\tint[] arr = new int[]{0,5,1,3,5,4,7,6,2};\n\t\tint[] arr = {1,2,3,4,5,6,2,3,4,5,6,7,8,8,8,8};\n\t\tcharusort(arr);\n\t}\n}\n```\n\n## 五 . 选择排序  O(n2)\n每次都选择最小的或者最大的放在开头或者放在结尾\n```javascript\n//每次遍历都找到最小的元素 , 放到数组的最开始\nlet num = [2,8,6,5,1,2,3,4,5,6]\n\nlet SelectSort = (arr)=>{\n    for(let i = 0;i<arr.length-1;i++){\n        let min = i\n        for(let j=i+1;j<arr.length-1;j++){\n            min = arr[j]<arr[min]?j:min\n        }\n        [arr[i],arr[min]] = [arr[min],arr[i]]\n    }\n\n\n    console.log(arr);\n}\nSelectSort(num)\n```\n\n## 六 . 桶排序 ( js )\n\n```javascript\n//桶排序 , 桶的数量就是要排序数组的长度  ,  桶区间就是(max-min)/桶数量\n\nlet num = [0.5, 0.84, 2.18, 3.25, 4.5]\n\nlet sort = (num) => {\n    let max = num[0]\n    let min = num[0]\n    num.forEach((item) => {\n        max = item > max ? item : max\n        min = item < min ? item : min\n    })\n\n    //初始化桶\n    let n = num.length\n    //桶区间就是(max-min)/桶数量\n    let d = (max - min) / (n - 1)\n\n    let arr = []\n    for (let i = 0; i < n; i++) {\n        arr[i] = []\n    }\n\n    //遍历原数组 , 将每个元素放入桶中\n    num.forEach((item) => {\n        //item要在每个桶里面都看一看\n        //index代表桶\n\n        arr.forEach((item1, index) => {\n            let left = min + (index) * d\n            let right = min + (index + 1) * d\n            if (item >= left && item < right)\n                arr[index].push(item)\n        })\n    })\n\n    let arr2 = []\n\n    //桶已经放好了 , 接下来就是对每个桶进行排序\n    arr.forEach((item,index)=>{\n        item.sort((a,b)=>a-b)\n        arr2.push(...item)\n    })\n\n    return arr2\n\n}\n\nconsole.log(sort(num));\n```","slug":"sort","published":1,"date":"2022-05-06T12:21:04.708Z","updated":"2022-05-06T12:24:17.845Z","_id":"cl2ueoqy60000m0vogggr744l","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"零-冒泡排序-js-时间复杂度-O-N2\"><a href=\"#零-冒泡排序-js-时间复杂度-O-N2\" class=\"headerlink\" title=\"零 . 冒泡排序 ( js ) 时间复杂度: O(N2)\"></a>零 . 冒泡排序 ( js ) 时间复杂度: O(N2)</h2><p>循环n次 , 每次把最大的冒泡到最后面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = [<span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">bubbleSort</span> = (<span class=\"params\">arr</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = arr.<span class=\"property\">length</span>-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;=i;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[j]&gt;arr[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                [arr[j],arr[j+<span class=\"number\">1</span>]] = [arr[j+<span class=\"number\">1</span>],arr[j]]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">bubbleSort</span>(num)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br></pre></td></tr></table></figure>\n<h2 id=\"一-堆排序-js\"><a href=\"#一-堆排序-js\" class=\"headerlink\" title=\"一 . 堆排序(js)\"></a>一 . 堆排序(js)</h2><p> 先把数组调整为大根堆 , 再把最顶部的元素与最后一个元素交换 , 交换之后再次进行堆调整 , 直到调整到最小值在顶部 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = [<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">12</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调整最大堆 arr数组 , i 是每次调整的父节点  , len 是目前堆的大小</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">downAdjust</span> = (<span class=\"params\">arr, i, len</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//用左孩子来判断终止条件,在里面判断有没有右孩子 如果用右孩子判断的话,不确定结束的时候还有没有左孩子</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> leftchild = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (leftchild &lt; len) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断右孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (leftchild+<span class=\"number\">1</span> &lt; len &amp;&amp; arr[leftchild + <span class=\"number\">1</span>] &gt; arr[leftchild])</span><br><span class=\"line\">            leftchild++</span><br><span class=\"line\">        <span class=\"comment\">//父节点大直接跳出</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &gt;= arr[leftchild])</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"comment\">//交换节点</span></span><br><span class=\"line\">        [arr[i], arr[leftchild]] = [arr[leftchild], arr[i]]</span><br><span class=\"line\">        <span class=\"comment\">//下标</span></span><br><span class=\"line\">        i = leftchild</span><br><span class=\"line\">        leftchild = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创造堆 , 进行sort</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">heapSort</span> = (<span class=\"params\">arr</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">//把这个堆构建成最大堆. i代表的是父节点 , 显然从length-1开始是没有子节点的 </span></span><br><span class=\"line\">    <span class=\"comment\">//从有子节点的父节点开始构造堆 , 也就是i = (arr.length-1-1)/2  &gt;&gt;是除以二的意思</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = (arr.<span class=\"property\">length</span>-<span class=\"number\">2</span>)&gt;&gt;<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">downAdjust</span>(arr,i,arr.<span class=\"property\">length</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr ,<span class=\"string\">&#x27;最大堆&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//循环删除替换arr中最大元素到尾部</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i= arr.<span class=\"property\">length</span>-<span class=\"number\">1</span>;i&gt;<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        [arr[<span class=\"number\">0</span>],arr[i]] = [arr[i],arr[<span class=\"number\">0</span>]]</span><br><span class=\"line\">        <span class=\"comment\">//替换之后调整堆</span></span><br><span class=\"line\">        <span class=\"title function_\">downAdjust</span>(arr,<span class=\"number\">0</span>,i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num , <span class=\"string\">&#x27;无序数组&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_\">heapSort</span>(num)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num , <span class=\"string\">&#x27;排序好的数组&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二-快排-js-时间复杂度-O-nlogn\"><a href=\"#二-快排-js-时间复杂度-O-nlogn\" class=\"headerlink\" title=\"二 . 快排 ( js ) 时间复杂度:O(nlogn)\"></a>二 . 快排 ( js ) 时间复杂度:O(nlogn)</h2><p>每次选定一个基值 , 比基值小的放在左边 , 比基值大的放右边 , 用递归来实现 , 也可以使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当数据量很大的时候 , 递归快排会造成栈溢出 , 为了解决这个问题 , 我们使用js数组 来模拟栈 , </span></span><br><span class=\"line\"><span class=\"comment\">//将待排序的[left,right]保存到数组中 , 循环取出进行快排 </span></span><br><span class=\"line\"><span class=\"comment\">// let num = [4, 7, 3, 5, 6, 2, 8, 1]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"comment\">//非递归实现快排</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">quickSort</span> = (<span class=\"params\">num, left, right</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = left</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mark = left</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num[left] &lt; num[flag]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这个时候mark就要往右移动一位 , 因为找到了一个小于flag 的数</span></span><br><span class=\"line\">            mark++</span><br><span class=\"line\">            [num[left], num[mark]] = [num[mark], num[left]]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        left++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//交换基准数 和 mark 的值</span></span><br><span class=\"line\">    [num[flag], num[mark]] = [num[mark], num[flag]]</span><br><span class=\"line\">    <span class=\"comment\">//最后要返回基准数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mark</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用非递归的方式进行快排</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">jisuan</span> = (<span class=\"params\">num,left,right</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = [[left,right]]</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(list.<span class=\"property\">length</span>!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> now = list.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now[<span class=\"number\">0</span>]&gt;=now[<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;<span class=\"comment\">//结束这次循环去到下一个list.pop</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> flag = <span class=\"title function_\">quickSort</span>(num,now[<span class=\"number\">0</span>],now[<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"comment\">//flag-1 和 flag+1 避免了类似[1,3,2,5,9,6,8,7]这样flag一直卡在0的情况</span></span><br><span class=\"line\">        list.<span class=\"title function_\">push</span>([now[<span class=\"number\">0</span>],flag-<span class=\"number\">1</span>])</span><br><span class=\"line\">        list.<span class=\"title function_\">push</span>([flag+<span class=\"number\">1</span>,now[<span class=\"number\">1</span>]])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">jisuan</span>(num,<span class=\"number\">0</span>,num.<span class=\"property\">length</span>-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-归并排序-O-nlogn\"><a href=\"#三-归并排序-O-nlogn\" class=\"headerlink\" title=\"三 . 归并排序 O(nlogn)\"></a>三 . 归并排序 O(nlogn)</h2><p>分开排序再合并起来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">merger</span> = (<span class=\"params\">leftArr,rightArr</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left_len = leftArr.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> right_len = rightArr.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;left_len &amp;&amp; j&lt;right_len)&#123;</span><br><span class=\"line\">        leftArr[i]&lt;rightArr[j] ? arr.<span class=\"title function_\">push</span>(leftArr[i++]) : arr.<span class=\"title function_\">push</span>(rightArr[j++])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;left_len)&#123;</span><br><span class=\"line\">        arr.<span class=\"title function_\">push</span>(leftArr[i++])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&lt;right_len)&#123;</span><br><span class=\"line\">        arr.<span class=\"title function_\">push</span>(rightArr[j++])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mergeSort</span> = (<span class=\"params\">arr</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = arr.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(length/<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> leftArr = <span class=\"title function_\">mergeSort</span>(arr.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>,mid))</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rightArr =<span class=\"title function_\">mergeSort</span>(arr.<span class=\"title function_\">slice</span>(mid))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merger</span>(leftArr ,rightArr );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = [<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">9</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">mergeSort</span>(num));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四-插入排序-java-O-n2\"><a href=\"#四-插入排序-java-O-n2\" class=\"headerlink\" title=\"四 . 插入排序 ( java ) O(n2)\"></a>四 . 插入排序 ( java ) O(n2)</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> class01;</span><br><span class=\"line\"><span class=\"comment\">//插入排序: 保证第一层循环i前面的元素全部都是有序的排序 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">sort_charu</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">charusort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(arr.length&lt;<span class=\"number\">2</span>||arr==<span class=\"literal\">null</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;i&lt;arr.length;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i-<span class=\"number\">1</span>;j&gt;=<span class=\"number\">0</span>&amp;&amp;arr[j]&gt;arr[j+<span class=\"number\">1</span>];j--) &#123;</span><br><span class=\"line\">\t\t\t\tswap(arr, j+<span class=\"number\">1</span>, j);</span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//直接输出arr是输出arr的首地址</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i : arr) &#123;</span><br><span class=\"line\">\t\t\tSystem.err.print(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span>[] arr,<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">\t\tarr[i] = arr[i]^arr[j];</span><br><span class=\"line\">\t\tarr[j] = arr[i]^arr[j];</span><br><span class=\"line\">\t\tarr[i] = arr[i]^arr[j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\tint[] arr = new int[]&#123;0,5,1,3,5,4,7,6,2&#125;;</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>&#125;;</span><br><span class=\"line\">\t\tcharusort(arr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五-选择排序-O-n2\"><a href=\"#五-选择排序-O-n2\" class=\"headerlink\" title=\"五 . 选择排序  O(n2)\"></a>五 . 选择排序  O(n2)</h2><p>每次都选择最小的或者最大的放在开头或者放在结尾</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//每次遍历都找到最小的元素 , 放到数组的最开始</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = [<span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">SelectSort</span> = (<span class=\"params\">arr</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;arr.<span class=\"property\">length</span>-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> min = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j=i+<span class=\"number\">1</span>;j&lt;arr.<span class=\"property\">length</span>-<span class=\"number\">1</span>;j++)&#123;</span><br><span class=\"line\">            min = arr[j]&lt;arr[min]?<span class=\"attr\">j</span>:min</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        [arr[i],arr[min]] = [arr[min],arr[i]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">SelectSort</span>(num)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六-桶排序-js\"><a href=\"#六-桶排序-js\" class=\"headerlink\" title=\"六 . 桶排序 ( js )\"></a>六 . 桶排序 ( js )</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//桶排序 , 桶的数量就是要排序数组的长度  ,  桶区间就是(max-min)/桶数量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = [<span class=\"number\">0.5</span>, <span class=\"number\">0.84</span>, <span class=\"number\">2.18</span>, <span class=\"number\">3.25</span>, <span class=\"number\">4.5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">sort</span> = (<span class=\"params\">num</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> max = num[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> min = num[<span class=\"number\">0</span>]</span><br><span class=\"line\">    num.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        max = item &gt; max ? item : max</span><br><span class=\"line\">        min = item &lt; min ? item : min</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化桶</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = num.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"comment\">//桶区间就是(max-min)/桶数量</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> d = (max - min) / (n - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        arr[i] = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历原数组 , 将每个元素放入桶中</span></span><br><span class=\"line\">    num.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//item要在每个桶里面都看一看</span></span><br><span class=\"line\">        <span class=\"comment\">//index代表桶</span></span><br><span class=\"line\"></span><br><span class=\"line\">        arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item1, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> left = min + (index) * d</span><br><span class=\"line\">            <span class=\"keyword\">let</span> right = min + (index + <span class=\"number\">1</span>) * d</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item &gt;= left &amp;&amp; item &lt; right)</span><br><span class=\"line\">                arr[index].<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr2 = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//桶已经放好了 , 接下来就是对每个桶进行排序</span></span><br><span class=\"line\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        item.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b)</span><br><span class=\"line\">        arr2.<span class=\"title function_\">push</span>(...item)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr2</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sort</span>(num));</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":"/img/avator.jpg","excerpt":"","more":"<h2 id=\"零-冒泡排序-js-时间复杂度-O-N2\"><a href=\"#零-冒泡排序-js-时间复杂度-O-N2\" class=\"headerlink\" title=\"零 . 冒泡排序 ( js ) 时间复杂度: O(N2)\"></a>零 . 冒泡排序 ( js ) 时间复杂度: O(N2)</h2><p>循环n次 , 每次把最大的冒泡到最后面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = [<span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">bubbleSort</span> = (<span class=\"params\">arr</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = arr.<span class=\"property\">length</span>-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;=i;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[j]&gt;arr[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                [arr[j],arr[j+<span class=\"number\">1</span>]] = [arr[j+<span class=\"number\">1</span>],arr[j]]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">bubbleSort</span>(num)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br></pre></td></tr></table></figure>\n<h2 id=\"一-堆排序-js\"><a href=\"#一-堆排序-js\" class=\"headerlink\" title=\"一 . 堆排序(js)\"></a>一 . 堆排序(js)</h2><p> 先把数组调整为大根堆 , 再把最顶部的元素与最后一个元素交换 , 交换之后再次进行堆调整 , 直到调整到最小值在顶部 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = [<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">12</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调整最大堆 arr数组 , i 是每次调整的父节点  , len 是目前堆的大小</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">downAdjust</span> = (<span class=\"params\">arr, i, len</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//用左孩子来判断终止条件,在里面判断有没有右孩子 如果用右孩子判断的话,不确定结束的时候还有没有左孩子</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> leftchild = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (leftchild &lt; len) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断右孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (leftchild+<span class=\"number\">1</span> &lt; len &amp;&amp; arr[leftchild + <span class=\"number\">1</span>] &gt; arr[leftchild])</span><br><span class=\"line\">            leftchild++</span><br><span class=\"line\">        <span class=\"comment\">//父节点大直接跳出</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &gt;= arr[leftchild])</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"comment\">//交换节点</span></span><br><span class=\"line\">        [arr[i], arr[leftchild]] = [arr[leftchild], arr[i]]</span><br><span class=\"line\">        <span class=\"comment\">//下标</span></span><br><span class=\"line\">        i = leftchild</span><br><span class=\"line\">        leftchild = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创造堆 , 进行sort</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">heapSort</span> = (<span class=\"params\">arr</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">//把这个堆构建成最大堆. i代表的是父节点 , 显然从length-1开始是没有子节点的 </span></span><br><span class=\"line\">    <span class=\"comment\">//从有子节点的父节点开始构造堆 , 也就是i = (arr.length-1-1)/2  &gt;&gt;是除以二的意思</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = (arr.<span class=\"property\">length</span>-<span class=\"number\">2</span>)&gt;&gt;<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">downAdjust</span>(arr,i,arr.<span class=\"property\">length</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr ,<span class=\"string\">&#x27;最大堆&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//循环删除替换arr中最大元素到尾部</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i= arr.<span class=\"property\">length</span>-<span class=\"number\">1</span>;i&gt;<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        [arr[<span class=\"number\">0</span>],arr[i]] = [arr[i],arr[<span class=\"number\">0</span>]]</span><br><span class=\"line\">        <span class=\"comment\">//替换之后调整堆</span></span><br><span class=\"line\">        <span class=\"title function_\">downAdjust</span>(arr,<span class=\"number\">0</span>,i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num , <span class=\"string\">&#x27;无序数组&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_\">heapSort</span>(num)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num , <span class=\"string\">&#x27;排序好的数组&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二-快排-js-时间复杂度-O-nlogn\"><a href=\"#二-快排-js-时间复杂度-O-nlogn\" class=\"headerlink\" title=\"二 . 快排 ( js ) 时间复杂度:O(nlogn)\"></a>二 . 快排 ( js ) 时间复杂度:O(nlogn)</h2><p>每次选定一个基值 , 比基值小的放在左边 , 比基值大的放右边 , 用递归来实现 , 也可以使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当数据量很大的时候 , 递归快排会造成栈溢出 , 为了解决这个问题 , 我们使用js数组 来模拟栈 , </span></span><br><span class=\"line\"><span class=\"comment\">//将待排序的[left,right]保存到数组中 , 循环取出进行快排 </span></span><br><span class=\"line\"><span class=\"comment\">// let num = [4, 7, 3, 5, 6, 2, 8, 1]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"comment\">//非递归实现快排</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">quickSort</span> = (<span class=\"params\">num, left, right</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = left</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mark = left</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num[left] &lt; num[flag]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这个时候mark就要往右移动一位 , 因为找到了一个小于flag 的数</span></span><br><span class=\"line\">            mark++</span><br><span class=\"line\">            [num[left], num[mark]] = [num[mark], num[left]]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        left++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//交换基准数 和 mark 的值</span></span><br><span class=\"line\">    [num[flag], num[mark]] = [num[mark], num[flag]]</span><br><span class=\"line\">    <span class=\"comment\">//最后要返回基准数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mark</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用非递归的方式进行快排</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">jisuan</span> = (<span class=\"params\">num,left,right</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = [[left,right]]</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(list.<span class=\"property\">length</span>!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> now = list.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now[<span class=\"number\">0</span>]&gt;=now[<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;<span class=\"comment\">//结束这次循环去到下一个list.pop</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> flag = <span class=\"title function_\">quickSort</span>(num,now[<span class=\"number\">0</span>],now[<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"comment\">//flag-1 和 flag+1 避免了类似[1,3,2,5,9,6,8,7]这样flag一直卡在0的情况</span></span><br><span class=\"line\">        list.<span class=\"title function_\">push</span>([now[<span class=\"number\">0</span>],flag-<span class=\"number\">1</span>])</span><br><span class=\"line\">        list.<span class=\"title function_\">push</span>([flag+<span class=\"number\">1</span>,now[<span class=\"number\">1</span>]])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">jisuan</span>(num,<span class=\"number\">0</span>,num.<span class=\"property\">length</span>-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-归并排序-O-nlogn\"><a href=\"#三-归并排序-O-nlogn\" class=\"headerlink\" title=\"三 . 归并排序 O(nlogn)\"></a>三 . 归并排序 O(nlogn)</h2><p>分开排序再合并起来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">merger</span> = (<span class=\"params\">leftArr,rightArr</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left_len = leftArr.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> right_len = rightArr.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;left_len &amp;&amp; j&lt;right_len)&#123;</span><br><span class=\"line\">        leftArr[i]&lt;rightArr[j] ? arr.<span class=\"title function_\">push</span>(leftArr[i++]) : arr.<span class=\"title function_\">push</span>(rightArr[j++])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;left_len)&#123;</span><br><span class=\"line\">        arr.<span class=\"title function_\">push</span>(leftArr[i++])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&lt;right_len)&#123;</span><br><span class=\"line\">        arr.<span class=\"title function_\">push</span>(rightArr[j++])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mergeSort</span> = (<span class=\"params\">arr</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = arr.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(length/<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> leftArr = <span class=\"title function_\">mergeSort</span>(arr.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>,mid))</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rightArr =<span class=\"title function_\">mergeSort</span>(arr.<span class=\"title function_\">slice</span>(mid))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merger</span>(leftArr ,rightArr );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = [<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">9</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">mergeSort</span>(num));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四-插入排序-java-O-n2\"><a href=\"#四-插入排序-java-O-n2\" class=\"headerlink\" title=\"四 . 插入排序 ( java ) O(n2)\"></a>四 . 插入排序 ( java ) O(n2)</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> class01;</span><br><span class=\"line\"><span class=\"comment\">//插入排序: 保证第一层循环i前面的元素全部都是有序的排序 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">sort_charu</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">charusort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(arr.length&lt;<span class=\"number\">2</span>||arr==<span class=\"literal\">null</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;i&lt;arr.length;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i-<span class=\"number\">1</span>;j&gt;=<span class=\"number\">0</span>&amp;&amp;arr[j]&gt;arr[j+<span class=\"number\">1</span>];j--) &#123;</span><br><span class=\"line\">\t\t\t\tswap(arr, j+<span class=\"number\">1</span>, j);</span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//直接输出arr是输出arr的首地址</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i : arr) &#123;</span><br><span class=\"line\">\t\t\tSystem.err.print(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span>[] arr,<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">\t\tarr[i] = arr[i]^arr[j];</span><br><span class=\"line\">\t\tarr[j] = arr[i]^arr[j];</span><br><span class=\"line\">\t\tarr[i] = arr[i]^arr[j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\tint[] arr = new int[]&#123;0,5,1,3,5,4,7,6,2&#125;;</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>&#125;;</span><br><span class=\"line\">\t\tcharusort(arr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五-选择排序-O-n2\"><a href=\"#五-选择排序-O-n2\" class=\"headerlink\" title=\"五 . 选择排序  O(n2)\"></a>五 . 选择排序  O(n2)</h2><p>每次都选择最小的或者最大的放在开头或者放在结尾</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//每次遍历都找到最小的元素 , 放到数组的最开始</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = [<span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">SelectSort</span> = (<span class=\"params\">arr</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;arr.<span class=\"property\">length</span>-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> min = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j=i+<span class=\"number\">1</span>;j&lt;arr.<span class=\"property\">length</span>-<span class=\"number\">1</span>;j++)&#123;</span><br><span class=\"line\">            min = arr[j]&lt;arr[min]?<span class=\"attr\">j</span>:min</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        [arr[i],arr[min]] = [arr[min],arr[i]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">SelectSort</span>(num)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六-桶排序-js\"><a href=\"#六-桶排序-js\" class=\"headerlink\" title=\"六 . 桶排序 ( js )\"></a>六 . 桶排序 ( js )</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//桶排序 , 桶的数量就是要排序数组的长度  ,  桶区间就是(max-min)/桶数量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = [<span class=\"number\">0.5</span>, <span class=\"number\">0.84</span>, <span class=\"number\">2.18</span>, <span class=\"number\">3.25</span>, <span class=\"number\">4.5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">sort</span> = (<span class=\"params\">num</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> max = num[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> min = num[<span class=\"number\">0</span>]</span><br><span class=\"line\">    num.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        max = item &gt; max ? item : max</span><br><span class=\"line\">        min = item &lt; min ? item : min</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化桶</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = num.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"comment\">//桶区间就是(max-min)/桶数量</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> d = (max - min) / (n - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        arr[i] = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历原数组 , 将每个元素放入桶中</span></span><br><span class=\"line\">    num.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//item要在每个桶里面都看一看</span></span><br><span class=\"line\">        <span class=\"comment\">//index代表桶</span></span><br><span class=\"line\"></span><br><span class=\"line\">        arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item1, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> left = min + (index) * d</span><br><span class=\"line\">            <span class=\"keyword\">let</span> right = min + (index + <span class=\"number\">1</span>) * d</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item &gt;= left &amp;&amp; item &lt; right)</span><br><span class=\"line\">                arr[index].<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr2 = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//桶已经放好了 , 接下来就是对每个桶进行排序</span></span><br><span class=\"line\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        item.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b)</span><br><span class=\"line\">        arr2.<span class=\"title function_\">push</span>(...item)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr2</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sort</span>(num));</span><br></pre></td></tr></table></figure>"},{"title":"js 实现链表","_content":"# js 实现链表 , 并判断链表是否循环 ,循环的长度,循环开始的点\n## 一 . js实现链表\n\n```javascript\n//用js来实现一个链表\n\n//构造节点\nclass Node {\n    constructor(data) {\n        this.data = data\n        this.next = null\n    }\n}\n\n//创建链表\nclass LinkedPropotype {\n    constructor() {\n        this.head = null\n    }\n    //构造节点\n    create(data) {\n        let node = new Node(data)\n        if (this.head == null) {\n            this.head = node\n        } else {\n            let current = this.head\n            while (current.next) {\n                current = current.next\n            }\n            current.next = node\n        }\n    }\n\n    //删除节点\n    deletenode(index) {\n        let p = this.head\n        let k = p\n        let len = 0\n        while (p) {\n            k = p\n            p = p.next\n            len++\n        }\n        if (index < 0 || index > len) {\n            console.log('删除超出范围');\n            return;\n        }\n\n        let q = this.head\n        let l = q\n        //删除头节点\n        if (index == 0) {\n            this.head = this.head.next\n            return q.data\n        }\n        //删除中间节点\n        else if (index < len) {\n            while (index) {\n                l = q\n                q = q.next\n                index--\n            }\n            let deletenum = q.data\n            l.next = q.next\n            return deletenum\n        }\n        //删除尾节点\n        else {\n            k.next = null\n            return p\n        }\n    }\n\n    //查找节点\n    searchnode(index){\n        let p = this.head\n        let k = p\n        let len = 0\n        while (p) {\n            k = p\n            p = p.next\n            len++\n        }\n        if (index < 0 || index > len) {\n            console.log('查找超出范围');\n            return;\n        }\n        p = this.head\n        while(index){\n            index--\n            p = p.next\n        }\n        return p\n    }\n\n    //修改节点\n    editnode(index,data){\n        let p = this.head\n        let k = p\n        let len = 0\n        while (p) {\n            k = p\n            p = p.next\n            len++\n        }\n        if (index < 0 || index > len) {\n            console.log('修改超出范围');\n            return;\n        }\n        p = this.head\n        while(index){\n            index--\n            p = p.next\n        }\n        p.data = data\n    }\n\n}\n\nlet linknode = new LinkedPropotype()\nlinknode.create(1)\nlinknode.create(2)\nlinknode.create(3)\nlinknode.create(4)\nlinknode.create(5)\nlinknode.create(6)\nlinknode.create(7)\nlinknode.create(8)\n//linknode.deletenode(2)\n//linknode.editnode(4,888)\n//linknode.searchnode(5)\n```\n\n## 二 . 判断一个链表是否循环 \n 使用`` 快慢指针`` , 快指针每次都比慢指针多走一步 , 如果在快指针==没有走到null并且与慢指针相遇了== , 那么该链表就是循环链表\n首先我们以上面的代码为基础构造一个循环链表 , 加上这三行代码\n```javascript\nvar C = linknode.searchnode(4)\nvar G = linknode.searchnode(7)\nG.next = C\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/450b3511a6c14e168fba34290e042381.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center)\n\n判断链表是否循环\n```javascript\n//使用  快慢指针  来判断有没有环\nlet isCircle = (link)=>{\n    let p = link.head\n    let q = link.head\n\n    //快指针走完就没有必要再进行判断了\n    while(q&&q.next){\n        p = p.next\n        q = q.next.next\n        if(p === q){\n            console.log('此链表循环');\n            return;\n        }\n    }\n    console.log('此链表不循环');\n}\n```\n\n## 三 . 计算链表循环部分的长度\n快慢指针第一次相遇 , 继续走, 当快慢指针第二次相遇的时候 \t\t\t\t\t\n ``循环的长度  = ( 快慢指针速度差 ) * 前进次数 ``\n\n```javascript\n\n//变式一 : 求环的长度\nlet lengthOfLink = (link)=>{\n    let p = link.head\n    let q = link.head\n    let flag= 0\n    let count = 0\n    while(q&&q.next){\n        p = p.next\n        q = q.next.next\n        count++\n        if(p===q){\n            flag++\n            if(flag==1)count = 0\n            if(flag==2){\n                return (2-1)*count\n            }\n        }\n    }\n\n}\n```\n\n## 四 . 计算入环点 \n 当快慢指针第一次相遇的时候 , ``将其中一个指针置为head , 将两个指针都变为慢指针`` , 当两个指针第二次相遇的时候 , 前进的次数就是入环点距离head的距离\n\n```javascript\n//变式二 : 求环的切入点\nlet pointLink = (link)=>{\n    let p = link.head\n    let q = link.head\n    let flag=0 \n    let count = 0\n    while(q&&q.next){\n        p = p.next\n        if(flag==0)\n        q = q.next.next\n        else \n        {\n            q = q.next\n            count++\n        }\n        if(p===q&&flag==0){\n            q = link.head\n            flag=1\n        }\n        if(p===q&&flag==1){\n            return count\n        }\n    }\n\n}\n```\n\n\n\n### 完整代码\n```javascript\n\n\n//用js来实现一个链表\n\n//构造节点\nclass Node {\n    constructor(data) {\n        this.data = data\n        this.next = null\n    }\n}\n\n//创建链表\nclass LinkedPropotype {\n    constructor() {\n        this.head = null\n    }\n    //构造节点\n    create(data) {\n        let node = new Node(data)\n        if (this.head == null) {\n            this.head = node\n        } else {\n            let current = this.head\n            while (current.next) {\n                current = current.next\n            }\n            current.next = node\n        }\n    }\n\n    //删除节点\n    deletenode(index) {\n        let p = this.head\n        let k = p\n        let len = 0\n        while (p) {\n            k = p\n            p = p.next\n            len++\n        }\n        if (index < 0 || index > len) {\n            console.log('删除超出范围');\n            return;\n        }\n\n        let q = this.head\n        let l = q\n        //删除头节点\n        if (index == 0) {\n            this.head = this.head.next\n            return q.data\n        }\n        //删除中间节点\n        else if (index < len) {\n            while (index) {\n                l = q\n                q = q.next\n                index--\n            }\n            let deletenum = q.data\n            l.next = q.next\n            return deletenum\n        }\n        //删除尾节点\n        else {\n            k.next = null\n            return p\n        }\n    }\n\n    //查找节点\n    searchnode(index){\n        let p = this.head\n        let k = p\n        let len = 0\n        while (p) {\n            k = p\n            p = p.next\n            len++\n        }\n        if (index < 0 || index > len) {\n            console.log('查找超出范围');\n            return;\n        }\n        p = this.head\n        while(index){\n            index--\n            p = p.next\n        }\n        return p\n    }\n\n    //修改节点\n    editnode(index,data){\n        let p = this.head\n        let k = p\n        let len = 0\n        while (p) {\n            k = p\n            p = p.next\n            len++\n        }\n        if (index < 0 || index > len) {\n            console.log('修改超出范围');\n            return;\n        }\n        p = this.head\n        while(index){\n            index--\n            p = p.next\n        }\n        p.data = data\n    }\n\n}\n\nlet linknode = new LinkedPropotype()\nlinknode.create(1)\nlinknode.create(2)\nlinknode.create(3)\nlinknode.create(4)\nlinknode.create(5)\nlinknode.create(6)\nlinknode.create(7)\nlinknode.create(8)\n\n\nvar C = linknode.searchnode(4)\nvar G = linknode.searchnode(7)\nG.next = C\n\n//使用  快慢指针  来判断有没有环\nlet isCircle = (link)=>{\n    let p = link.head\n    let q = link.head\n\n    //快指针走完就没有必要再进行判断了\n    while(q&&q.next){\n        p = p.next\n        q = q.next.next\n        if(p === q){\n            console.log('此链表循环');\n            return;\n        }\n    }\n    console.log('此链表不循环');\n}\n\n//变式一 : 求环的长度\nlet lengthOfLink = (link)=>{\n    let p = link.head\n    let q = link.head\n    let flag= 0\n    let count = 0\n    while(q&&q.next){\n        p = p.next\n        q = q.next.next\n        count++\n        if(p===q){\n            flag++\n            if(flag==1)count = 0\n            if(flag==2){\n                return (2-1)*count\n            }\n        }\n    }\n\n}\n\n//变式二 : 求环的切入点\nlet pointLink = (link)=>{\n    let p = link.head\n    let q = link.head\n    let flag=0 \n    let count = 0\n    while(q&&q.next){\n        p = p.next\n        if(flag==0)\n        q = q.next.next\n        else \n        {\n            q = q.next\n            count++\n        }\n        if(p===q&&flag==0){\n            q = link.head\n            flag=1\n        }\n        if(p===q&&flag==1){\n            return count\n        }\n    }\n\n}\n\n\n\nisCircle(linknode)\n\nconsole.log('环的长度是',lengthOfLink(linknode));\nconsole.log('环的切入点是',pointLink(linknode));\n\n```","source":"_posts/js 实现链表.md","raw":"\n---\ntitle: js 实现链表\n---\n# js 实现链表 , 并判断链表是否循环 ,循环的长度,循环开始的点\n## 一 . js实现链表\n\n```javascript\n//用js来实现一个链表\n\n//构造节点\nclass Node {\n    constructor(data) {\n        this.data = data\n        this.next = null\n    }\n}\n\n//创建链表\nclass LinkedPropotype {\n    constructor() {\n        this.head = null\n    }\n    //构造节点\n    create(data) {\n        let node = new Node(data)\n        if (this.head == null) {\n            this.head = node\n        } else {\n            let current = this.head\n            while (current.next) {\n                current = current.next\n            }\n            current.next = node\n        }\n    }\n\n    //删除节点\n    deletenode(index) {\n        let p = this.head\n        let k = p\n        let len = 0\n        while (p) {\n            k = p\n            p = p.next\n            len++\n        }\n        if (index < 0 || index > len) {\n            console.log('删除超出范围');\n            return;\n        }\n\n        let q = this.head\n        let l = q\n        //删除头节点\n        if (index == 0) {\n            this.head = this.head.next\n            return q.data\n        }\n        //删除中间节点\n        else if (index < len) {\n            while (index) {\n                l = q\n                q = q.next\n                index--\n            }\n            let deletenum = q.data\n            l.next = q.next\n            return deletenum\n        }\n        //删除尾节点\n        else {\n            k.next = null\n            return p\n        }\n    }\n\n    //查找节点\n    searchnode(index){\n        let p = this.head\n        let k = p\n        let len = 0\n        while (p) {\n            k = p\n            p = p.next\n            len++\n        }\n        if (index < 0 || index > len) {\n            console.log('查找超出范围');\n            return;\n        }\n        p = this.head\n        while(index){\n            index--\n            p = p.next\n        }\n        return p\n    }\n\n    //修改节点\n    editnode(index,data){\n        let p = this.head\n        let k = p\n        let len = 0\n        while (p) {\n            k = p\n            p = p.next\n            len++\n        }\n        if (index < 0 || index > len) {\n            console.log('修改超出范围');\n            return;\n        }\n        p = this.head\n        while(index){\n            index--\n            p = p.next\n        }\n        p.data = data\n    }\n\n}\n\nlet linknode = new LinkedPropotype()\nlinknode.create(1)\nlinknode.create(2)\nlinknode.create(3)\nlinknode.create(4)\nlinknode.create(5)\nlinknode.create(6)\nlinknode.create(7)\nlinknode.create(8)\n//linknode.deletenode(2)\n//linknode.editnode(4,888)\n//linknode.searchnode(5)\n```\n\n## 二 . 判断一个链表是否循环 \n 使用`` 快慢指针`` , 快指针每次都比慢指针多走一步 , 如果在快指针==没有走到null并且与慢指针相遇了== , 那么该链表就是循环链表\n首先我们以上面的代码为基础构造一个循环链表 , 加上这三行代码\n```javascript\nvar C = linknode.searchnode(4)\nvar G = linknode.searchnode(7)\nG.next = C\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/450b3511a6c14e168fba34290e042381.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center)\n\n判断链表是否循环\n```javascript\n//使用  快慢指针  来判断有没有环\nlet isCircle = (link)=>{\n    let p = link.head\n    let q = link.head\n\n    //快指针走完就没有必要再进行判断了\n    while(q&&q.next){\n        p = p.next\n        q = q.next.next\n        if(p === q){\n            console.log('此链表循环');\n            return;\n        }\n    }\n    console.log('此链表不循环');\n}\n```\n\n## 三 . 计算链表循环部分的长度\n快慢指针第一次相遇 , 继续走, 当快慢指针第二次相遇的时候 \t\t\t\t\t\n ``循环的长度  = ( 快慢指针速度差 ) * 前进次数 ``\n\n```javascript\n\n//变式一 : 求环的长度\nlet lengthOfLink = (link)=>{\n    let p = link.head\n    let q = link.head\n    let flag= 0\n    let count = 0\n    while(q&&q.next){\n        p = p.next\n        q = q.next.next\n        count++\n        if(p===q){\n            flag++\n            if(flag==1)count = 0\n            if(flag==2){\n                return (2-1)*count\n            }\n        }\n    }\n\n}\n```\n\n## 四 . 计算入环点 \n 当快慢指针第一次相遇的时候 , ``将其中一个指针置为head , 将两个指针都变为慢指针`` , 当两个指针第二次相遇的时候 , 前进的次数就是入环点距离head的距离\n\n```javascript\n//变式二 : 求环的切入点\nlet pointLink = (link)=>{\n    let p = link.head\n    let q = link.head\n    let flag=0 \n    let count = 0\n    while(q&&q.next){\n        p = p.next\n        if(flag==0)\n        q = q.next.next\n        else \n        {\n            q = q.next\n            count++\n        }\n        if(p===q&&flag==0){\n            q = link.head\n            flag=1\n        }\n        if(p===q&&flag==1){\n            return count\n        }\n    }\n\n}\n```\n\n\n\n### 完整代码\n```javascript\n\n\n//用js来实现一个链表\n\n//构造节点\nclass Node {\n    constructor(data) {\n        this.data = data\n        this.next = null\n    }\n}\n\n//创建链表\nclass LinkedPropotype {\n    constructor() {\n        this.head = null\n    }\n    //构造节点\n    create(data) {\n        let node = new Node(data)\n        if (this.head == null) {\n            this.head = node\n        } else {\n            let current = this.head\n            while (current.next) {\n                current = current.next\n            }\n            current.next = node\n        }\n    }\n\n    //删除节点\n    deletenode(index) {\n        let p = this.head\n        let k = p\n        let len = 0\n        while (p) {\n            k = p\n            p = p.next\n            len++\n        }\n        if (index < 0 || index > len) {\n            console.log('删除超出范围');\n            return;\n        }\n\n        let q = this.head\n        let l = q\n        //删除头节点\n        if (index == 0) {\n            this.head = this.head.next\n            return q.data\n        }\n        //删除中间节点\n        else if (index < len) {\n            while (index) {\n                l = q\n                q = q.next\n                index--\n            }\n            let deletenum = q.data\n            l.next = q.next\n            return deletenum\n        }\n        //删除尾节点\n        else {\n            k.next = null\n            return p\n        }\n    }\n\n    //查找节点\n    searchnode(index){\n        let p = this.head\n        let k = p\n        let len = 0\n        while (p) {\n            k = p\n            p = p.next\n            len++\n        }\n        if (index < 0 || index > len) {\n            console.log('查找超出范围');\n            return;\n        }\n        p = this.head\n        while(index){\n            index--\n            p = p.next\n        }\n        return p\n    }\n\n    //修改节点\n    editnode(index,data){\n        let p = this.head\n        let k = p\n        let len = 0\n        while (p) {\n            k = p\n            p = p.next\n            len++\n        }\n        if (index < 0 || index > len) {\n            console.log('修改超出范围');\n            return;\n        }\n        p = this.head\n        while(index){\n            index--\n            p = p.next\n        }\n        p.data = data\n    }\n\n}\n\nlet linknode = new LinkedPropotype()\nlinknode.create(1)\nlinknode.create(2)\nlinknode.create(3)\nlinknode.create(4)\nlinknode.create(5)\nlinknode.create(6)\nlinknode.create(7)\nlinknode.create(8)\n\n\nvar C = linknode.searchnode(4)\nvar G = linknode.searchnode(7)\nG.next = C\n\n//使用  快慢指针  来判断有没有环\nlet isCircle = (link)=>{\n    let p = link.head\n    let q = link.head\n\n    //快指针走完就没有必要再进行判断了\n    while(q&&q.next){\n        p = p.next\n        q = q.next.next\n        if(p === q){\n            console.log('此链表循环');\n            return;\n        }\n    }\n    console.log('此链表不循环');\n}\n\n//变式一 : 求环的长度\nlet lengthOfLink = (link)=>{\n    let p = link.head\n    let q = link.head\n    let flag= 0\n    let count = 0\n    while(q&&q.next){\n        p = p.next\n        q = q.next.next\n        count++\n        if(p===q){\n            flag++\n            if(flag==1)count = 0\n            if(flag==2){\n                return (2-1)*count\n            }\n        }\n    }\n\n}\n\n//变式二 : 求环的切入点\nlet pointLink = (link)=>{\n    let p = link.head\n    let q = link.head\n    let flag=0 \n    let count = 0\n    while(q&&q.next){\n        p = p.next\n        if(flag==0)\n        q = q.next.next\n        else \n        {\n            q = q.next\n            count++\n        }\n        if(p===q&&flag==0){\n            q = link.head\n            flag=1\n        }\n        if(p===q&&flag==1){\n            return count\n        }\n    }\n\n}\n\n\n\nisCircle(linknode)\n\nconsole.log('环的长度是',lengthOfLink(linknode));\nconsole.log('环的切入点是',pointLink(linknode));\n\n```","slug":"js 实现链表","published":1,"date":"2022-05-06T12:25:17.334Z","updated":"2022-05-06T12:27:34.547Z","_id":"cl2ueu5o80001m0vo3x6gd07f","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"js-实现链表-并判断链表是否循环-循环的长度-循环开始的点\"><a href=\"#js-实现链表-并判断链表是否循环-循环的长度-循环开始的点\" class=\"headerlink\" title=\"js 实现链表 , 并判断链表是否循环 ,循环的长度,循环开始的点\"></a>js 实现链表 , 并判断链表是否循环 ,循环的长度,循环开始的点</h1><h2 id=\"一-js实现链表\"><a href=\"#一-js实现链表\" class=\"headerlink\" title=\"一 . js实现链表\"></a>一 . js实现链表</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用js来实现一个链表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造节点</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = data</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建链表</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedPropotype</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//构造节点</span></span><br><span class=\"line\">    <span class=\"title function_\">create</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = node</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> current = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (current.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">                current = current.<span class=\"property\">next</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            current.<span class=\"property\">next</span> = node</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除节点</span></span><br><span class=\"line\">    <span class=\"title function_\">deletenode</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = p</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">            k = p</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">            len++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;删除超出范围&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> q = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> l = q</span><br><span class=\"line\">        <span class=\"comment\">//删除头节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> q.<span class=\"property\">data</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除中间节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt; len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (index) &#123;</span><br><span class=\"line\">                l = q</span><br><span class=\"line\">                q = q.<span class=\"property\">next</span></span><br><span class=\"line\">                index--</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> deletenum = q.<span class=\"property\">data</span></span><br><span class=\"line\">            l.<span class=\"property\">next</span> = q.<span class=\"property\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> deletenum</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除尾节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            k.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> p</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查找节点</span></span><br><span class=\"line\">    <span class=\"title function_\">searchnode</span>(<span class=\"params\">index</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = p</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">            k = p</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">            len++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;查找超出范围&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index)&#123;</span><br><span class=\"line\">            index--</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改节点</span></span><br><span class=\"line\">    <span class=\"title function_\">editnode</span>(<span class=\"params\">index,data</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = p</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">            k = p</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">            len++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;修改超出范围&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index)&#123;</span><br><span class=\"line\">            index--</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.<span class=\"property\">data</span> = data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> linknode = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedPropotype</span>()</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">7</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">//linknode.deletenode(2)</span></span><br><span class=\"line\"><span class=\"comment\">//linknode.editnode(4,888)</span></span><br><span class=\"line\"><span class=\"comment\">//linknode.searchnode(5)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二-判断一个链表是否循环\"><a href=\"#二-判断一个链表是否循环\" class=\"headerlink\" title=\"二 . 判断一个链表是否循环\"></a>二 . 判断一个链表是否循环</h2><p> 使用<code> 快慢指针</code> , 快指针每次都比慢指针多走一步 , 如果在快指针==没有走到null并且与慢指针相遇了== , 那么该链表就是循环链表<br>首先我们以上面的代码为基础构造一个循环链表 , 加上这三行代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> C = linknode.<span class=\"title function_\">searchnode</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> G = linknode.<span class=\"title function_\">searchnode</span>(<span class=\"number\">7</span>)</span><br><span class=\"line\">G.<span class=\"property\">next</span> = C</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/450b3511a6c14e168fba34290e042381.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>判断链表是否循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用  快慢指针  来判断有没有环</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">isCircle</span> = (<span class=\"params\">link</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> q = link.<span class=\"property\">head</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//快指针走完就没有必要再进行判断了</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q&amp;&amp;q.<span class=\"property\">next</span>)&#123;</span><br><span class=\"line\">        p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        q = q.<span class=\"property\">next</span>.<span class=\"property\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p === q)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;此链表循环&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;此链表不循环&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三-计算链表循环部分的长度\"><a href=\"#三-计算链表循环部分的长度\" class=\"headerlink\" title=\"三 . 计算链表循环部分的长度\"></a>三 . 计算链表循环部分的长度</h2><p>快慢指针第一次相遇 , 继续走, 当快慢指针第二次相遇的时候<br> <code>循环的长度  = ( 快慢指针速度差 ) * 前进次数 </code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//变式一 : 求环的长度</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">lengthOfLink</span> = (<span class=\"params\">link</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> q = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag= <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q&amp;&amp;q.<span class=\"property\">next</span>)&#123;</span><br><span class=\"line\">        p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        q = q.<span class=\"property\">next</span>.<span class=\"property\">next</span></span><br><span class=\"line\">        count++</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p===q)&#123;</span><br><span class=\"line\">            flag++</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag==<span class=\"number\">1</span>)count = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"number\">2</span>-<span class=\"number\">1</span>)*count</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四-计算入环点\"><a href=\"#四-计算入环点\" class=\"headerlink\" title=\"四 . 计算入环点\"></a>四 . 计算入环点</h2><p> 当快慢指针第一次相遇的时候 , <code>将其中一个指针置为head , 将两个指针都变为慢指针</code> , 当两个指针第二次相遇的时候 , 前进的次数就是入环点距离head的距离</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//变式二 : 求环的切入点</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">pointLink</span> = (<span class=\"params\">link</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> q = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag=<span class=\"number\">0</span> </span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q&amp;&amp;q.<span class=\"property\">next</span>)&#123;</span><br><span class=\"line\">        p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag==<span class=\"number\">0</span>)</span><br><span class=\"line\">        q = q.<span class=\"property\">next</span>.<span class=\"property\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q = q.<span class=\"property\">next</span></span><br><span class=\"line\">            count++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p===q&amp;&amp;flag==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            q = link.<span class=\"property\">head</span></span><br><span class=\"line\">            flag=<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p===q&amp;&amp;flag==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> count</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用js来实现一个链表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造节点</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = data</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建链表</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedPropotype</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//构造节点</span></span><br><span class=\"line\">    <span class=\"title function_\">create</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = node</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> current = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (current.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">                current = current.<span class=\"property\">next</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            current.<span class=\"property\">next</span> = node</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除节点</span></span><br><span class=\"line\">    <span class=\"title function_\">deletenode</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = p</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">            k = p</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">            len++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;删除超出范围&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> q = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> l = q</span><br><span class=\"line\">        <span class=\"comment\">//删除头节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> q.<span class=\"property\">data</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除中间节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt; len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (index) &#123;</span><br><span class=\"line\">                l = q</span><br><span class=\"line\">                q = q.<span class=\"property\">next</span></span><br><span class=\"line\">                index--</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> deletenum = q.<span class=\"property\">data</span></span><br><span class=\"line\">            l.<span class=\"property\">next</span> = q.<span class=\"property\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> deletenum</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除尾节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            k.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> p</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查找节点</span></span><br><span class=\"line\">    <span class=\"title function_\">searchnode</span>(<span class=\"params\">index</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = p</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">            k = p</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">            len++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;查找超出范围&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index)&#123;</span><br><span class=\"line\">            index--</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改节点</span></span><br><span class=\"line\">    <span class=\"title function_\">editnode</span>(<span class=\"params\">index,data</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = p</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">            k = p</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">            len++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;修改超出范围&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index)&#123;</span><br><span class=\"line\">            index--</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.<span class=\"property\">data</span> = data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> linknode = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedPropotype</span>()</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">7</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> C = linknode.<span class=\"title function_\">searchnode</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> G = linknode.<span class=\"title function_\">searchnode</span>(<span class=\"number\">7</span>)</span><br><span class=\"line\">G.<span class=\"property\">next</span> = C</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用  快慢指针  来判断有没有环</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">isCircle</span> = (<span class=\"params\">link</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> q = link.<span class=\"property\">head</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//快指针走完就没有必要再进行判断了</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q&amp;&amp;q.<span class=\"property\">next</span>)&#123;</span><br><span class=\"line\">        p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        q = q.<span class=\"property\">next</span>.<span class=\"property\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p === q)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;此链表循环&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;此链表不循环&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//变式一 : 求环的长度</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">lengthOfLink</span> = (<span class=\"params\">link</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> q = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag= <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q&amp;&amp;q.<span class=\"property\">next</span>)&#123;</span><br><span class=\"line\">        p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        q = q.<span class=\"property\">next</span>.<span class=\"property\">next</span></span><br><span class=\"line\">        count++</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p===q)&#123;</span><br><span class=\"line\">            flag++</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag==<span class=\"number\">1</span>)count = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"number\">2</span>-<span class=\"number\">1</span>)*count</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//变式二 : 求环的切入点</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">pointLink</span> = (<span class=\"params\">link</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> q = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag=<span class=\"number\">0</span> </span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q&amp;&amp;q.<span class=\"property\">next</span>)&#123;</span><br><span class=\"line\">        p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag==<span class=\"number\">0</span>)</span><br><span class=\"line\">        q = q.<span class=\"property\">next</span>.<span class=\"property\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q = q.<span class=\"property\">next</span></span><br><span class=\"line\">            count++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p===q&amp;&amp;flag==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            q = link.<span class=\"property\">head</span></span><br><span class=\"line\">            flag=<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p===q&amp;&amp;flag==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> count</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">isCircle</span>(linknode)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;环的长度是&#x27;</span>,<span class=\"title function_\">lengthOfLink</span>(linknode));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;环的切入点是&#x27;</span>,<span class=\"title function_\">pointLink</span>(linknode));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":"/img/avator.jpg","excerpt":"","more":"<h1 id=\"js-实现链表-并判断链表是否循环-循环的长度-循环开始的点\"><a href=\"#js-实现链表-并判断链表是否循环-循环的长度-循环开始的点\" class=\"headerlink\" title=\"js 实现链表 , 并判断链表是否循环 ,循环的长度,循环开始的点\"></a>js 实现链表 , 并判断链表是否循环 ,循环的长度,循环开始的点</h1><h2 id=\"一-js实现链表\"><a href=\"#一-js实现链表\" class=\"headerlink\" title=\"一 . js实现链表\"></a>一 . js实现链表</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用js来实现一个链表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造节点</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = data</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建链表</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedPropotype</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//构造节点</span></span><br><span class=\"line\">    <span class=\"title function_\">create</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = node</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> current = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (current.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">                current = current.<span class=\"property\">next</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            current.<span class=\"property\">next</span> = node</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除节点</span></span><br><span class=\"line\">    <span class=\"title function_\">deletenode</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = p</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">            k = p</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">            len++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;删除超出范围&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> q = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> l = q</span><br><span class=\"line\">        <span class=\"comment\">//删除头节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> q.<span class=\"property\">data</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除中间节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt; len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (index) &#123;</span><br><span class=\"line\">                l = q</span><br><span class=\"line\">                q = q.<span class=\"property\">next</span></span><br><span class=\"line\">                index--</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> deletenum = q.<span class=\"property\">data</span></span><br><span class=\"line\">            l.<span class=\"property\">next</span> = q.<span class=\"property\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> deletenum</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除尾节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            k.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> p</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查找节点</span></span><br><span class=\"line\">    <span class=\"title function_\">searchnode</span>(<span class=\"params\">index</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = p</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">            k = p</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">            len++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;查找超出范围&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index)&#123;</span><br><span class=\"line\">            index--</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改节点</span></span><br><span class=\"line\">    <span class=\"title function_\">editnode</span>(<span class=\"params\">index,data</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = p</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">            k = p</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">            len++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;修改超出范围&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index)&#123;</span><br><span class=\"line\">            index--</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.<span class=\"property\">data</span> = data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> linknode = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedPropotype</span>()</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">7</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">//linknode.deletenode(2)</span></span><br><span class=\"line\"><span class=\"comment\">//linknode.editnode(4,888)</span></span><br><span class=\"line\"><span class=\"comment\">//linknode.searchnode(5)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二-判断一个链表是否循环\"><a href=\"#二-判断一个链表是否循环\" class=\"headerlink\" title=\"二 . 判断一个链表是否循环\"></a>二 . 判断一个链表是否循环</h2><p> 使用<code> 快慢指针</code> , 快指针每次都比慢指针多走一步 , 如果在快指针==没有走到null并且与慢指针相遇了== , 那么该链表就是循环链表<br>首先我们以上面的代码为基础构造一个循环链表 , 加上这三行代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> C = linknode.<span class=\"title function_\">searchnode</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> G = linknode.<span class=\"title function_\">searchnode</span>(<span class=\"number\">7</span>)</span><br><span class=\"line\">G.<span class=\"property\">next</span> = C</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/450b3511a6c14e168fba34290e042381.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>判断链表是否循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用  快慢指针  来判断有没有环</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">isCircle</span> = (<span class=\"params\">link</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> q = link.<span class=\"property\">head</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//快指针走完就没有必要再进行判断了</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q&amp;&amp;q.<span class=\"property\">next</span>)&#123;</span><br><span class=\"line\">        p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        q = q.<span class=\"property\">next</span>.<span class=\"property\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p === q)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;此链表循环&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;此链表不循环&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三-计算链表循环部分的长度\"><a href=\"#三-计算链表循环部分的长度\" class=\"headerlink\" title=\"三 . 计算链表循环部分的长度\"></a>三 . 计算链表循环部分的长度</h2><p>快慢指针第一次相遇 , 继续走, 当快慢指针第二次相遇的时候<br> <code>循环的长度  = ( 快慢指针速度差 ) * 前进次数 </code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//变式一 : 求环的长度</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">lengthOfLink</span> = (<span class=\"params\">link</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> q = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag= <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q&amp;&amp;q.<span class=\"property\">next</span>)&#123;</span><br><span class=\"line\">        p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        q = q.<span class=\"property\">next</span>.<span class=\"property\">next</span></span><br><span class=\"line\">        count++</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p===q)&#123;</span><br><span class=\"line\">            flag++</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag==<span class=\"number\">1</span>)count = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"number\">2</span>-<span class=\"number\">1</span>)*count</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四-计算入环点\"><a href=\"#四-计算入环点\" class=\"headerlink\" title=\"四 . 计算入环点\"></a>四 . 计算入环点</h2><p> 当快慢指针第一次相遇的时候 , <code>将其中一个指针置为head , 将两个指针都变为慢指针</code> , 当两个指针第二次相遇的时候 , 前进的次数就是入环点距离head的距离</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//变式二 : 求环的切入点</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">pointLink</span> = (<span class=\"params\">link</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> q = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag=<span class=\"number\">0</span> </span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q&amp;&amp;q.<span class=\"property\">next</span>)&#123;</span><br><span class=\"line\">        p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag==<span class=\"number\">0</span>)</span><br><span class=\"line\">        q = q.<span class=\"property\">next</span>.<span class=\"property\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q = q.<span class=\"property\">next</span></span><br><span class=\"line\">            count++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p===q&amp;&amp;flag==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            q = link.<span class=\"property\">head</span></span><br><span class=\"line\">            flag=<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p===q&amp;&amp;flag==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> count</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用js来实现一个链表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造节点</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = data</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建链表</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedPropotype</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//构造节点</span></span><br><span class=\"line\">    <span class=\"title function_\">create</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = node</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> current = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (current.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">                current = current.<span class=\"property\">next</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            current.<span class=\"property\">next</span> = node</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除节点</span></span><br><span class=\"line\">    <span class=\"title function_\">deletenode</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = p</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">            k = p</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">            len++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;删除超出范围&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> q = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> l = q</span><br><span class=\"line\">        <span class=\"comment\">//删除头节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> q.<span class=\"property\">data</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除中间节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt; len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (index) &#123;</span><br><span class=\"line\">                l = q</span><br><span class=\"line\">                q = q.<span class=\"property\">next</span></span><br><span class=\"line\">                index--</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> deletenum = q.<span class=\"property\">data</span></span><br><span class=\"line\">            l.<span class=\"property\">next</span> = q.<span class=\"property\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> deletenum</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除尾节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            k.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> p</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查找节点</span></span><br><span class=\"line\">    <span class=\"title function_\">searchnode</span>(<span class=\"params\">index</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = p</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">            k = p</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">            len++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;查找超出范围&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index)&#123;</span><br><span class=\"line\">            index--</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改节点</span></span><br><span class=\"line\">    <span class=\"title function_\">editnode</span>(<span class=\"params\">index,data</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = p</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">            k = p</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">            len++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;修改超出范围&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index)&#123;</span><br><span class=\"line\">            index--</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.<span class=\"property\">data</span> = data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> linknode = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedPropotype</span>()</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">7</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> C = linknode.<span class=\"title function_\">searchnode</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> G = linknode.<span class=\"title function_\">searchnode</span>(<span class=\"number\">7</span>)</span><br><span class=\"line\">G.<span class=\"property\">next</span> = C</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用  快慢指针  来判断有没有环</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">isCircle</span> = (<span class=\"params\">link</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> q = link.<span class=\"property\">head</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//快指针走完就没有必要再进行判断了</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q&amp;&amp;q.<span class=\"property\">next</span>)&#123;</span><br><span class=\"line\">        p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        q = q.<span class=\"property\">next</span>.<span class=\"property\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p === q)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;此链表循环&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;此链表不循环&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//变式一 : 求环的长度</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">lengthOfLink</span> = (<span class=\"params\">link</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> q = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag= <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q&amp;&amp;q.<span class=\"property\">next</span>)&#123;</span><br><span class=\"line\">        p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        q = q.<span class=\"property\">next</span>.<span class=\"property\">next</span></span><br><span class=\"line\">        count++</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p===q)&#123;</span><br><span class=\"line\">            flag++</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag==<span class=\"number\">1</span>)count = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"number\">2</span>-<span class=\"number\">1</span>)*count</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//变式二 : 求环的切入点</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">pointLink</span> = (<span class=\"params\">link</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> q = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag=<span class=\"number\">0</span> </span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q&amp;&amp;q.<span class=\"property\">next</span>)&#123;</span><br><span class=\"line\">        p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag==<span class=\"number\">0</span>)</span><br><span class=\"line\">        q = q.<span class=\"property\">next</span>.<span class=\"property\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q = q.<span class=\"property\">next</span></span><br><span class=\"line\">            count++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p===q&amp;&amp;flag==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            q = link.<span class=\"property\">head</span></span><br><span class=\"line\">            flag=<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p===q&amp;&amp;flag==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> count</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">isCircle</span>(linknode)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;环的长度是&#x27;</span>,<span class=\"title function_\">lengthOfLink</span>(linknode));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;环的切入点是&#x27;</span>,<span class=\"title function_\">pointLink</span>(linknode));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"刷题心得记录","_content":"\n目前更新了:二分法,快排,  js创建链表,  动态规划, 异或运算,三数之和  等       \n\n\n\n1. ==FindIndex== 找到数组中的``第一个``目标值并且返回``目标值的下标`` , 没有找到就返回-1\n判断后返回值,不用手动return\n```javascript\nconst index = nums.findIndex(item=>item===target)\n```\n\n2. ==find== 找到数组中``第一个``符合条件的``值``  , 没有找到就返回 ``undefined`` find对空数组不起作用\n3. ``sort`` 会改变原数组\n\n```javascript\nnums.sort((a,b)=>a-b) //升序\nnums.sort((a,b)=>b-a) //降序\n```\n## 二分查找 [二分详解](https://blog.csdn.net/qq_45978890/article/details/116094046?spm=1001.2101.3001.6650.10&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-10.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-10.pc_relevant_default&utm_relevant_index=13)\n二分查找 : 适用于升序数组 , 判断条件是``left < right ``,不符合条件就返回-1\n1. 我解题的时候纠结数组分别是奇数和偶数的时候中间值mid怎么取 , 但是不必纠结这个问题 , 因为除以二的时候它们都是有可能出现的 , \n2. 重点是判断``边界问题`` , 下面采用了``左闭右闭``的解法 , 所以判断循环的时候条件是 ``left <= right`` , 因为``[left , right]`` 是有意义的\n3. 当我计算mid的时候使用了``mid = ( left + right ) / 2`` , 出来的结果错误的(可能是因为left+right超过了定义变量时的大小),然后我又改变了一种写法:mid = (right-left)/2+left ,计算出来的index居然有小数!!?? 尝试了一下,在js里面``5/2=2.5....``\n4. 正确的写法:``const mid = Math.floor((right-left)/2)+left`` //`` 防止计算时溢出``\n```javascript\nlet nums = [1,5,6,2,8,89,7,21,4,6,63,10]\nconst target = 8\n\n\n//使用二分查找来找到 target 在 nums 中对应值的下标\n//查找的条件是查找范围不为空\nnums.sort((a,b)=>a-b)\nconsole.log(nums)\n\n\nvar search = function(nums,target){\n    let left = 0\n    let right = nums.length-1\n    while(left <= right){\n        //每次判断之前都重置 mid\n        // const mid = (left+right)/2\n        const mid = Math.floor((right-left)/2)+left\n        const num = nums[mid]\n        if(num === target){\n            return mid\n        }else if(target > num){\n            left = mid+1\n        }else{\n            right = mid-1\n        }\n    }\n    return -1\n}\n\nconst result = search(nums,target)\nconsole.log(result);\n\n```\n这道异曲同工之妙,就是缩小空间\n\n```javascript\n给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。\n如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n请必须使用时间复杂度为 O(log n) 的算法。\n\nvar searchInsert = function(nums, target) {\n    //法一\n    /* let index = nums.findIndex(item=>item==target)\n    if(index != -1){\n        return index\n    }else{\n        let index2 = nums.findIndex(item=>item>target)\n        if(index2==-1)return nums.length\n        else return index2\n    } */\n\n    //二分法\n    let left = 0\n    let right = nums.length-1\n    let flag = 0\n\n    while(left <= right){\n        let mid = Math.floor((right-left)/2)+left\n        let num = nums[mid]\n        if(target == num){\n            return mid\n        }else if(target > num){\n            left = mid + 1 \n           / /区间缩小到 left 和 right 相等的时候,从这里就出去了,\n           / /此时left 在 原来 left = right 那个值的左边一位 , \n           / /刚好就是找不到值要插入的index\n        }\n        else\n        {\n            right = mid - 1\n        }\n    }\n    return left\n};\n```\n\n\n## 快排(双边循环 , 递归)\n每次都将最左边的值作为``基准值`` , 然后从最左边的left 和 最右边的 right 开始查找 , 从right开始  , right找的是比基准值小的 , 找到之后left 就开始找  , 找的是比基准值大的 , 找完一轮后交换left 和right 的值, 最后left 和right 重合的时候 , ``交换基准值和left 的值``  ,然后使用递归 , 分别排序基准值左边的 和 右边的 \n\n```javascript\n\nlet num = [5,8,6,3,9,2,1,7]\n\nfunction myquickSort(num,left,right){\n    let flag = left\n    if(left>=right)return;\n    while(left<right){\n        //找到符合的right\n        while(right>left&&num[right]>=num[flag])\n        right--\n        //找到符合的left\n        while(right>left&&num[left]<=num[flag])\n        left++\n        //交换两者的值\n        if(left<right)\n        [num[right],num[left]] = [num[left],num[right]] \n    }\n    //交换基准值和rightleft重合的值\n    [num[left],num[flag]] = [num[flag],num[left]] \n    return left;\n}\n \nfunction jisuan (num , left , right){\n    if(left>=right)return;\n    let flag = myquickSort(num,left,right)\n    jisuan(num,left,flag-1)\n    jisuan(num,flag+1,right)\n\n}\njisuan(num,0,num.length-1)\nconsole.log(num);\n```\n\n\n## 快排(单边循环 递归)\n\n```javascript\nlet num = [4,7,3,5,6,2,8,1]\n\n//单边循环\nlet quickSort = (num, left, right) => {\n    let flag = left\n    let mark = left\n    while(left<=right){\n        if(num[left]<num[flag])\n        {\n            //这个时候mark就要往右移动一位 , 因为找到了一个小于flag 的数\n            mark++\n            [num[left],num[mark]] = [num[mark],num[left]]\n        }\n        left++\n    }\n    //交换基准数 和 mark 的值\n    [num[flag],num[mark]] = [num[mark],num[flag]]\n    //最后要返回基准数\n    return mark\n}\n\n\nlet jisuan = (num, left, right) => {\n    //既然是递归 , 就要有结束条件\n    if(left>=right)return;\n    let flag = quickSort(num, left, right)\n    jisuan(num, left, flag - 1)\n    jisuan(num, flag + 1, right)\n}\n\njisuan(num, 0, num.length - 1)\nconsole.log(num);\n```\n\n## 快排 (非递归)\n\n```javascript\n\n//当数据量很大的时候 , 递归快排会造成栈溢出 , 为了解决这个问题 , 我们使用js数组 来模拟栈 , \n//将待排序的[left,right]保存到数组中 , 循环取出进行快排 \n// let num = [4, 7, 3, 5, 6, 2, 8, 1]\nlet num = [1,3,2,5,9,6,8,7]\n//非递归实现快排\nconst quickSort = (num, left, right) => {\n    let flag = left\n    let mark = left\n    while (left <= right) {\n        if (num[left] < num[flag]) {\n            //这个时候mark就要往右移动一位 , 因为找到了一个小于flag 的数\n            mark++\n            [num[left], num[mark]] = [num[mark], num[left]]\n        }\n        left++\n    }\n    //交换基准数 和 mark 的值\n    [num[flag], num[mark]] = [num[mark], num[flag]]\n    //最后要返回基准数\n    return mark\n}\n\n//使用非递归的方式进行快排\nconst jisuan = (num,left,right)=>{\n    let list = [[left,right]]\n    while(list.length!=0){\n        let now = list.pop()\n        if(now[0]>=now[1])\n         continue;\n        let flag = quickSort(num,now[0],now[1])\n        //flag-1 和 flag+1 避免了类似[1,3,2,5,9,6,8,7]这样flag一直卡在0的情况\n        list.push([now[0],flag-1])\n        list.push([flag+1,now[1]])\n    }\n}\njisuan(num,0,num.length-1)\nconsole.log(num);\n```\n\n## js 实现链表 , 并且判断链表是否循环\n\n```javascript\n\n//用js来实现一个链表\n\n//构造节点\nclass Node {\n    constructor(data) {\n        this.data = data\n        this.next = null\n    }\n}\n\n//创建链表\nclass LinkedPropotype {\n    constructor() {\n        this.head = null\n    }\n    //构造节点\n    create(data) {\n        let node = new Node(data)\n        if (this.head == null) {\n            this.head = node\n        } else {\n            let current = this.head\n            while (current.next) {\n                current = current.next\n            }\n            current.next = node\n        }\n    }\n\n    //删除节点\n    deletenode(index) {\n        let p = this.head\n        let k = p\n        let len = 0\n        while (p) {\n            k = p\n            p = p.next\n            len++\n        }\n        if (index < 0 || index > len) {\n            console.log('删除超出范围');\n            return;\n        }\n\n        let q = this.head\n        let l = q\n        //删除头节点\n        if (index == 0) {\n            this.head = this.head.next\n            return q.data\n        }\n        //删除中间节点\n        else if (index < len) {\n            while (index) {\n                l = q\n                q = q.next\n                index--\n            }\n            let deletenum = q.data\n            l.next = q.next\n            return deletenum\n        }\n        //删除尾节点\n        else {\n            k.next = null\n            return p\n        }\n    }\n\n    //查找节点\n    searchnode(index){\n        let p = this.head\n        let k = p\n        let len = 0\n        while (p) {\n            k = p\n            p = p.next\n            len++\n        }\n        if (index < 0 || index > len) {\n            console.log('查找超出范围');\n            return;\n        }\n        p = this.head\n        while(index){\n            index--\n            p = p.next\n        }\n        return p\n    }\n\n    //修改节点\n    editnode(index,data){\n        let p = this.head\n        let k = p\n        let len = 0\n        while (p) {\n            k = p\n            p = p.next\n            len++\n        }\n        if (index < 0 || index > len) {\n            console.log('修改超出范围');\n            return;\n        }\n        p = this.head\n        while(index){\n            index--\n            p = p.next\n        }\n        p.data = data\n    }\n\n}\n\nlet linknode = new LinkedPropotype()\nlinknode.create(1)\nlinknode.create(2)\nlinknode.create(3)\nlinknode.create(4)\nlinknode.create(5)\nlinknode.create(6)\nlinknode.create(7)\n\n\n//下面三部将链表改造为循环链表\nvar C = linknode.searchnode(2)\nvar G = linknode.searchnode(6)\nG.next = C\n\n//使用快慢指针来判断有没有环\nlet isCircle = (link)=>{\n    let p = link.head\n    let q = link.head\n\n    //快指针走完就没有必要再进行判断了\n    while(q&&q.next){\n        p = p.next\n        q = q.next.next\n        if(p === q){\n            console.log('此链表循环');\n            return;\n        }\n    }\n    console.log('此链表不循环');\n}\n\nisCircle(linknode)\n\n```\n\n## 最小栈的实现\n### 设计一个栈 A, 让出栈 , 入栈 , 输出栈内的最小值的时间复杂度都是O(1)\n #### 思路:  再设计一个栈 B 存入A第一个元素 , 每次A入栈的时候 , 跟B栈顶元素作比较 , 如果入栈元素小于B栈顶元素 , 则B也入栈此元素 , A出栈的时候 , 跟B栈顶元素做比较 , 如果相等 , B出栈,这样 ,B栈顶永远都是A中的最小元素\n\n```javascript\n//设计一个栈 , 让出栈 , 入栈 , 输出栈内的最小值的时间复杂度都是O(1)\nlet arr = [4,7,3,8,2,5]\n\nlet len = arr.length \nlet len1 = arr.length \nvar min\nlet A = []\nlet B = []\n//让元素都入栈 , 栈A和栈B都造好了\n\nwhile(len){\n    if(len == len1)\n    {\n        min = arr[0]\n        B.push(min)\n    }\n\n    let num = arr.shift()\n    A.push(num)\n\n    //每一次进栈的时候都和min作比较 , 小的放入栈B\n    \n    if(num<B[B.length-1]){\n        B.push(num)\n    }\n    len--\n}\n\n//出栈 , 出栈的与 B 最小的相等 B也出栈\nlet deleteA = ()=>{\n    let num = A.pop()\n    if(num==B[B.length-1])\n    B.pop()\n}\n\n//入栈 , 入栈的与 B 最小的相等 B也入栈\nlet pushA = (data)=>{\n    A.push(data)\n    if(data<B[B.length-1])\n    B.push(data)\n}\n\n//输出栈A中最小的值\nlet pushmin = ()=>{\n    return B[B.length-1]\n}\n\nconsole.log(A);\nconsole.log(pushmin());//输出A中最小的\npushA(1)\nconsole.log(A);\nconsole.log(pushmin());//输出A中最小的\ndeleteA()\nconsole.log(A);\nconsole.log(pushmin());//输出A中最小的\n```\n\n\n## js实现动态规划 , 优化时间 , 优化空间\n``详情见小灰的算法之旅 , 以下是我个人的见解``\n==题目==: \n很久很久以前，有一位国王拥有5座金矿，每座金矿的黄金储量不同，\n需要参与挖掘的工人人数也不同。例如有的金矿储量是500kg黄金，需 要5个工人来挖掘；有的金矿储量是200kg黄金，需要3个工人来挖 掘…… 如果参与挖矿的工人的总数是10。每座金矿要么全挖，要么不挖，不能 派出一半人挖取一半的金矿。要求用程序求出，要想得到尽可能多的黄金，应该选择挖取哪几座金矿？\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2a2fc6bff4e64bb18757836c2797a5fc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center)\n\n### 一开始的思路:\n首先我们想到的是 : 求出每个金矿的性价比 , 从高到低依次挖出金矿 \n挖矿的性价比 : 350/3 > 500/5 >  200/3=300/4=400/5\n 那么我们``十个人`` \n - 先用`` 3 个人挖 350`` 的金矿 , \n - 再用 ``5 个人去挖 500 ``的金矿 , \n - 最后剩下`` 2 个人``不能再挖矿  \n - 此时我们的黄金数量是 ``850 ``\n\n#### 这是否就是十个人能挖的最大黄金数量了呢 ? 答案不是\n因为我们 用 5个人 去挖 500 的金矿 , 再用5个人去挖400的金矿 , 此时十个人刚好用完 , 并且黄金的数量是``900``\n\n#### 那么我们怎么才能获得黄金的最大数量呢 ? 这里就要引入动态规划来实现\n动态规划就是把简单的问题转换成规模较小的子问题,再从简单的子问题自底向上一步一步递推,最终得到问题的最优解 , 这样说你可能还是云里雾里 \n其实我们算出做出每一个举动过后的结果 , 再和其它举动的结果做出比较 , 就可以计算出最好的结果 , 举个列子 : \n\np:[5,5,3,4,3],\t//金矿开采需要的工人数量\ng:[500,400,350,300,200]//金矿储量\n\n ==第一个500金矿我们可以挖也可以不挖==\n - ``挖 ``: 黄金数量+500 ,  工人数量 - 5 \n - \t\t接下来我们就用剩下的工人去挖下一个金矿 , 此时我们已经获得了500黄金\n - ``不挖`` : 黄金数量 + 0 , 工人数量 - 0\n - \t\t接下来我们就直接用不变的工人数量去挖下一个金矿\n\n==到第二个400金矿的时候==\n- ``挖`` : 黄金数量+400 ,  工人数量 - 5\n- \t\t 此时已经没有工人 ,  要加上第一次挖的500金矿 , 最终的黄金数量是900\n- ``不挖`` : 黄金数量 + 0 , 工人数量 - 0 \n- \t\t到现在为止我们的工人数量和黄金数量都没有变化\n\n==一直这样遍历下去 , 直到工人数量为  零  或者 可以挖的黄金数量为  零   , 返回我们挖出的黄金数量==\n![在这里插入图片描述](https://img-blog.csdnimg.cn/102fc30f6a1b4602b77b01da7cc7a41c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center)\n\n#### 由题可知 , 我们创建几个变量 :\n ``w``:工人的数量 ,``n``:金矿的数量 , \n ``gold``:金矿和人数之间的关系(为了之后的思路比较清晰 , 我把这两个装到一个对象里面)\n\n==例如== : gold.g[0] 和 gold.p[0] 之间的关系就是 当金矿储量为 500 时需要 5 个人挖\n```javascript\nw = 10 //工人的数量\nn = 5  //金矿的数量 \nlet gold = {\n    \t\tp:[5,5,3,4,3],\t//金矿开采需要的工人数量\n    \t\tg:[500,400,350,300,200]//金矿储量\n}\n```\n\n### 一 . js实现动态规划\n我们还要实现状态转移方程 : \n- 金矿数量或者工人数量为``零``时 : ``F(n,w) = 0``\n- 工人的数量``不足以``挖当前的金矿时 , 去挖下一个金矿 : ``F(n-1 , w)``\n- 当前工人数量`足以`挖当前的金矿时 : (有两种选择)\n\t\t- 挖: ``F(w-gold.p[n-1],n-1,gold)+gold.g[n-1]``\n\t\t- 不挖:`` F(w,n-1,gold)``\n- 返回第三种情况的最大值  ``Math.max(F(w,n-1,gold),F(w-gold.p[n-1],n-1,gold)+gold.g[n-1])``\n\n```javascript\nlet w = 10//工人数量\nlet n = 5 //可选金矿数量\nlet gold = {\n    p:[5,5,3,4,3],//金矿开采需要的工人数量\n    g:[500,400,350,300,200]//金矿储量\n}\n\nlet F = (w,n,gold)=>{\n    //金矿没了或者是人没了都返回 0 \n    if(w==0||n==0)\n    return 0\n\n    //当前人数不够挖当前的金矿 , 就去看看下一个金矿 , 人数不变\n    if(w<gold.p[n-1])\n    return F(w,n-1,gold)\n\n    //返回挖矿或者不挖矿的最优解\n    return Math.max(F(w,n-1,gold),F(w-gold.p[n-1],n-1,gold)+gold.g[n-1])\n}\n\n\nconsole.log(F(w,n,gold));\n```\n就这样我们计算出了每一次挖和不挖获得的黄金数量 , 得到了最大的黄金数量 , 但是这样的时间复杂度非常高O(2^n)\n  #### 二 . 优化时间的动态规划算法 ( 自底向上求解 )\n  算出第一个金矿的所有\n\n```javascript\nlet w = 10//工人数量\nlet n = 5 //可选金矿数量\nlet gold = {\n    p:[5,5,3,4,3],//金矿开采需要的工人数量\n    g:[500,400,350,300,200]//金矿储量\n}\n\n// 写一个二维数组\nlet arr = Array(gold.g.length).fill(0).map(x=>Array(w).fill(0))\nlet getBestGoldMiningV2 = (arr)=>{\n    //数组每一格都根据条件进行状态转移方程\n    arr.forEach((item,index)=>{\n        //把第一行的状态方程补满\n        if(index==0){\n            item.forEach((item2,index2)=>{\n                if(gold.p[index]<=index2+1){\n                    arr[index][index2] = gold.g[index]\n                }\n            })\n        }\n        else\n        item.forEach((item2,index2)=>{\n            //人数不够就去看看上一个\n            if(gold.p[index]>index2+1){\n                arr[index][index2] = arr[index-1][index2]\n            }\n            //返回挖和不挖之间的最大值(每一行的值都可以状态转移到上一行去)\n            else\n            {\n            let j = index2-gold.p[index]==-1?0:index2-gold.p[index]\n            arr[index][index2] = \n            Math.max(arr[index-1][index2],arr[index-1][j]+gold.g[index])\n            }\n        })\n    })\n\n    //返回最后一格\n    return arr[gold.g.length-1][w-1]\n}\nconsole.log(getBestGoldMiningV2(arr));\n```\n时间没问题了, 让我们来看看空间\n#### 三 . 优化空间的算法\n\n```javascript\n//上面代码的时间已经是最优的了 , 但是空间仍有优化的空间\n//因为我们在填写其中一行的空格的时候 , 都是根据上一行的空格来获取最大收益的 \n//所以我们只需要一行数组就可以了 , 但是在计算的时候要从右往左计算 ,\n//避免这一行的值把上一行的值覆盖\n\nlet arr2 = Array(w).fill(0)\n//初始化第一行的数据\narr2.forEach((item,index)=>{\n    if(gold.p[0]<=index+1)\n    arr2[index] = gold.g[0]\n})\nlet getBestGoldMiningV3 = (arr2)=>{\n\n    gold.g.forEach((item,index)=>{\n        let person = gold.p[index]\n\n        if(index!=0)\n        //从右边开始循环arr2\n        for(let i = w-1;i>=0;i--){\n            let j = i-gold.p[index]==-1?0:i-gold.p[index]\n            if(i+1>=person){\n                arr2[i] = Math.max(arr2[i],arr2[j]+gold.g[index])\n            }\n        }\n    })\n\n    return arr2[w-1]\n}\n\nconsole.log(getBestGoldMiningV3(arr2));\n```\n## 又是一道动态规划的问题\n![在这里插入图片描述](https://img-blog.csdnimg.cn/fd97efa401b54b0f8ce6f5ceccbb6553.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_20,color_FFFFFF,t_70,g_se,x_16)\n一开始直接使用的是动态规划 , 导致栈满\n```javascript\n//在这里计算\nlet path = (m,n,i,j)=>{\n    let count = 0\n    //向右或者向下走完了只能有一种走法了\n    if(i==m||j==n)return 1\n    //当两个都没有走完\n    return path(m,n,i+1,j)+path(m,n,i,j+1)+count\n}\n\nvar uniquePaths = function(m, n) {\n    //在这里使用path\n    return path(m,n,1,1)\n};\n```\n使用记忆化搜索结合动态规划的思想\n\n```javascript\n//使用数组结合动态规划的思想 , 解决递归栈满的情况\nvar uniquePaths = function(m, n) {\n    //创建一个数组\n    let arr = new Array(m).fill(0).map(()=>item = new Array(n).fill(0))\n    //初始化数组 , 走到最底部或者最右边都只剩下一种走法\n    for(let i =0 ;i<m;i++){\n        arr[i][0] = 1\n    }\n    for(let j =0 ;j<n;j++){\n        arr[0][j] = 1\n    }\n    \n    for(let i = 1;i<m;i++){\n        for(let j = 1 ;j<n;j++){\n            arr[i][j] = arr[i-1][j] + arr[i][j-1]\n        }\n    }\n\n    return arr[m-1][n-1]\n\n};\n```\n\n\n##  找出arr数组中  ``出现次数``  为奇数次的数 , 有两种奇数的数\n## let arr = [4,1,2,2,3,1,4,5]\n//如果只有一个出现次数是奇数的数的话 , 我们只需要对整个数组进行异或运算 , 算出来的结果就是奇数\n//如果有两个出现次数是奇数的数的话 , 我们就需要先对整个数组进行异或运算 , \n//根据运算结果把元素组分成两个部分 , 然后再依次进行异或运算\n\n```javascript\nlet arr = [4,1,2,2,3,1,4,5]\n//进行异或运算的函数\nlet findLostNum = (arr)=>{\n    let result = arr.sort((a,b)=>a-b).reduce((a,b)=>{\n        return a^b\n    })\n    return result\n}\n\n\n//把数组分成两个部分再进行异或运算\nlet apartArr = (arr)=>{\n    if(findLostNum(arr)==0)\n    return '测试案例不符合题意'\n    //先对整个数组进行异或运算\n    let xor = findLostNum(arr).toString(2)\n    let flag = xor.split('').reverse().join('').indexOf(1)\n    //让mark 指向数组的第一个数\n    let mark = 0\n    //根据xor的结果把arr分开\n    arr.forEach((item,index)=>{\n        let flag2 = item.toString(2).split('').reverse().join('').charAt(flag) || 0\n        //找到符合条件的值就让mark++\n        if(1==flag2){\n            //交换mark 和 flag2 当前指向的值\n            [arr[mark],arr[index]]=[arr[index],arr[mark]]\n            mark++\n        }\n        \n    })\n    //现在进行分组寻找\n    let left_result = findLostNum(arr.splice(0,mark))\n    let right_result = findLostNum(arr)\n\n    return `${left_result} , ${right_result}`\n\n}\n\n\nconsole.log(apartArr(arr));\n```\n\n\n## 我发现用位运算可以更快并且更加准确的找到用来区分的数字 , 并且在区分数组的时候就进行异或运算\n\n```javascript\nlet arr = [4,1,2,2,333,1,4,23333]\n//进行异或运算的函数\nlet findLostNum = (arr)=>{\n    let result = arr.sort((a,b)=>a-b).reduce((a,b)=>{\n        return a^b\n    })\n    return result\n}\n\n\n//把数组分成两个部分再进行异或运算\nlet apartArr = (arr)=>{\n    if(findLostNum(arr)==0)\n    return '测试案例不符合题意'\n    //先对整个数组进行异或运算\n    let xor = findLostNum(arr).toString(2)\n\n    //接下来用位运算来找到不同的部分\n    let separator = 1\n    while (0==(xor&separator)){\n        separator<<=1\n    }\n    //现在separator找到了第一个二进制中相同位置不同的数\n\n\n    //让mark 指向数组的第一个数\n    let result = new Array(2)\n    //根据xor的结果把arr分开\n    arr.forEach((item)=>{\n        //找到符合条件的值就让mark++\n        if((item&separator)==0){\n            result[0]^=item\n        }\n        else{\n            result[1]^=item\n        }        \n    })\n\n\n    return result\n\n}\n\n\nconsole.log(apartArr(arr));\n```\n\n三数之和 , 经典的题目了 , 定下一个数 , 转换成二数之和\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\n\n\n//核心思想就是将三数之和转换为两数之和 , 将a+b+c=0  转换为 b+c = -a 然后利用左右指针找到符合条件的b 和 c \n//在这到题里面还要注意重复的结果要跳过\n\nlet quickSort = (arr,i,j)=>{\n    if(i>=j)\n    return\n    let left = i\n    let mark = left \n    while(left<=j){\n        if(arr[left]<arr[i]){\n            mark++\n            [arr[left],arr[mark]]=[arr[mark],arr[left]]\n        }\n        left++\n    }\n    [arr[i],arr[mark]]=[arr[mark],arr[i]]\n\n    quickSort(arr,i,mark-1)\n    quickSort(arr,mark+1,j)\n}\n\n\n var threeSum = function(nums) {\n    if(nums.length<3)\n    return []\n    //对数组进行排序(使用快排)\n    quickSort(nums,0,nums.length-1)\n    let arr = []\n\n    for(let i=0;i<nums.length;i++){\n        if(nums[i]>0)\n        break\n\n        let left = i+1\n        let right = nums.length-1\n\n        //去重\n        if(i>0&&nums[i]==nums[i-1])\n        continue\n        \n        //left < right就一直循环\n        while(left<right){\n            let sum = nums[i]+nums[left]+nums[right]\n            //找到了等于零的情况 , 一起移动\n            if(sum===0)\n            {\n            arr.push([nums[i],nums[left],nums[right]])\n\n            //在移动左右指针的时候先对左右指针进行判断 ,相同的就跳过\n            while(left<right&&nums[left]==nums[left+1])\n            left++\n            while(left<right&&nums[right]==nums[right+1])\n            right--\n\n            left++\n            right--\n            }else if(sum<0){\n                left++\n            }else\n            right--\n        }\n\n    }\n    return arr\n};\nlet num = [-1,0,1,2,-1,-4]\nconsole.log(threeSum(num));\n```\n最接近的三数之和\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\n\nvar threeSumClosest = function (nums, target) {\n    //如果数组只有三个数 , 直接退出\n    if (nums.length == 3)\n    return nums[0] + nums[1] + nums[2]\n    //第一层循环定下一个数\n    let result\n    //排序\n    nums.sort((a, b) => a - b)\n    //这个是最开始的和与target的差\n    let dis = Math.abs(nums[0] + nums[1] + nums[nums.length - 1] - target)\n\n    for (let i = 0; i < nums.length; i++) {\n\n        let left = i + 1\n        let right = nums.length - 1\n\n        //使用双指针来找\n        while (left < right) {\n\n            let sum = nums[i] + nums[left] + nums[right]\n\n\n            if (sum > target) {\n                right--\n                if (Math.abs(target - sum) <= dis) {\n                    result = sum\n                    dis = Math.abs(target - sum)\n                }\n\n            }\n            else if (sum < target) {\n                left++\n                if (Math.abs(target - sum) <= dis) {\n                    result = sum\n                    dis = Math.abs(target - sum)\n                }\n            }\n            else {\n                result = target\n                return result\n            }\n        }\n\n    }\n\n\n    return result\n};\n\nconsole.log(threeSumClosest([1, 1, 1, 1], 0));\n```","source":"_posts/刷题心得记录.md","raw":"\n---\ntitle: 刷题心得记录\n---\n\n目前更新了:二分法,快排,  js创建链表,  动态规划, 异或运算,三数之和  等       \n\n\n\n1. ==FindIndex== 找到数组中的``第一个``目标值并且返回``目标值的下标`` , 没有找到就返回-1\n判断后返回值,不用手动return\n```javascript\nconst index = nums.findIndex(item=>item===target)\n```\n\n2. ==find== 找到数组中``第一个``符合条件的``值``  , 没有找到就返回 ``undefined`` find对空数组不起作用\n3. ``sort`` 会改变原数组\n\n```javascript\nnums.sort((a,b)=>a-b) //升序\nnums.sort((a,b)=>b-a) //降序\n```\n## 二分查找 [二分详解](https://blog.csdn.net/qq_45978890/article/details/116094046?spm=1001.2101.3001.6650.10&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-10.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-10.pc_relevant_default&utm_relevant_index=13)\n二分查找 : 适用于升序数组 , 判断条件是``left < right ``,不符合条件就返回-1\n1. 我解题的时候纠结数组分别是奇数和偶数的时候中间值mid怎么取 , 但是不必纠结这个问题 , 因为除以二的时候它们都是有可能出现的 , \n2. 重点是判断``边界问题`` , 下面采用了``左闭右闭``的解法 , 所以判断循环的时候条件是 ``left <= right`` , 因为``[left , right]`` 是有意义的\n3. 当我计算mid的时候使用了``mid = ( left + right ) / 2`` , 出来的结果错误的(可能是因为left+right超过了定义变量时的大小),然后我又改变了一种写法:mid = (right-left)/2+left ,计算出来的index居然有小数!!?? 尝试了一下,在js里面``5/2=2.5....``\n4. 正确的写法:``const mid = Math.floor((right-left)/2)+left`` //`` 防止计算时溢出``\n```javascript\nlet nums = [1,5,6,2,8,89,7,21,4,6,63,10]\nconst target = 8\n\n\n//使用二分查找来找到 target 在 nums 中对应值的下标\n//查找的条件是查找范围不为空\nnums.sort((a,b)=>a-b)\nconsole.log(nums)\n\n\nvar search = function(nums,target){\n    let left = 0\n    let right = nums.length-1\n    while(left <= right){\n        //每次判断之前都重置 mid\n        // const mid = (left+right)/2\n        const mid = Math.floor((right-left)/2)+left\n        const num = nums[mid]\n        if(num === target){\n            return mid\n        }else if(target > num){\n            left = mid+1\n        }else{\n            right = mid-1\n        }\n    }\n    return -1\n}\n\nconst result = search(nums,target)\nconsole.log(result);\n\n```\n这道异曲同工之妙,就是缩小空间\n\n```javascript\n给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。\n如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n请必须使用时间复杂度为 O(log n) 的算法。\n\nvar searchInsert = function(nums, target) {\n    //法一\n    /* let index = nums.findIndex(item=>item==target)\n    if(index != -1){\n        return index\n    }else{\n        let index2 = nums.findIndex(item=>item>target)\n        if(index2==-1)return nums.length\n        else return index2\n    } */\n\n    //二分法\n    let left = 0\n    let right = nums.length-1\n    let flag = 0\n\n    while(left <= right){\n        let mid = Math.floor((right-left)/2)+left\n        let num = nums[mid]\n        if(target == num){\n            return mid\n        }else if(target > num){\n            left = mid + 1 \n           / /区间缩小到 left 和 right 相等的时候,从这里就出去了,\n           / /此时left 在 原来 left = right 那个值的左边一位 , \n           / /刚好就是找不到值要插入的index\n        }\n        else\n        {\n            right = mid - 1\n        }\n    }\n    return left\n};\n```\n\n\n## 快排(双边循环 , 递归)\n每次都将最左边的值作为``基准值`` , 然后从最左边的left 和 最右边的 right 开始查找 , 从right开始  , right找的是比基准值小的 , 找到之后left 就开始找  , 找的是比基准值大的 , 找完一轮后交换left 和right 的值, 最后left 和right 重合的时候 , ``交换基准值和left 的值``  ,然后使用递归 , 分别排序基准值左边的 和 右边的 \n\n```javascript\n\nlet num = [5,8,6,3,9,2,1,7]\n\nfunction myquickSort(num,left,right){\n    let flag = left\n    if(left>=right)return;\n    while(left<right){\n        //找到符合的right\n        while(right>left&&num[right]>=num[flag])\n        right--\n        //找到符合的left\n        while(right>left&&num[left]<=num[flag])\n        left++\n        //交换两者的值\n        if(left<right)\n        [num[right],num[left]] = [num[left],num[right]] \n    }\n    //交换基准值和rightleft重合的值\n    [num[left],num[flag]] = [num[flag],num[left]] \n    return left;\n}\n \nfunction jisuan (num , left , right){\n    if(left>=right)return;\n    let flag = myquickSort(num,left,right)\n    jisuan(num,left,flag-1)\n    jisuan(num,flag+1,right)\n\n}\njisuan(num,0,num.length-1)\nconsole.log(num);\n```\n\n\n## 快排(单边循环 递归)\n\n```javascript\nlet num = [4,7,3,5,6,2,8,1]\n\n//单边循环\nlet quickSort = (num, left, right) => {\n    let flag = left\n    let mark = left\n    while(left<=right){\n        if(num[left]<num[flag])\n        {\n            //这个时候mark就要往右移动一位 , 因为找到了一个小于flag 的数\n            mark++\n            [num[left],num[mark]] = [num[mark],num[left]]\n        }\n        left++\n    }\n    //交换基准数 和 mark 的值\n    [num[flag],num[mark]] = [num[mark],num[flag]]\n    //最后要返回基准数\n    return mark\n}\n\n\nlet jisuan = (num, left, right) => {\n    //既然是递归 , 就要有结束条件\n    if(left>=right)return;\n    let flag = quickSort(num, left, right)\n    jisuan(num, left, flag - 1)\n    jisuan(num, flag + 1, right)\n}\n\njisuan(num, 0, num.length - 1)\nconsole.log(num);\n```\n\n## 快排 (非递归)\n\n```javascript\n\n//当数据量很大的时候 , 递归快排会造成栈溢出 , 为了解决这个问题 , 我们使用js数组 来模拟栈 , \n//将待排序的[left,right]保存到数组中 , 循环取出进行快排 \n// let num = [4, 7, 3, 5, 6, 2, 8, 1]\nlet num = [1,3,2,5,9,6,8,7]\n//非递归实现快排\nconst quickSort = (num, left, right) => {\n    let flag = left\n    let mark = left\n    while (left <= right) {\n        if (num[left] < num[flag]) {\n            //这个时候mark就要往右移动一位 , 因为找到了一个小于flag 的数\n            mark++\n            [num[left], num[mark]] = [num[mark], num[left]]\n        }\n        left++\n    }\n    //交换基准数 和 mark 的值\n    [num[flag], num[mark]] = [num[mark], num[flag]]\n    //最后要返回基准数\n    return mark\n}\n\n//使用非递归的方式进行快排\nconst jisuan = (num,left,right)=>{\n    let list = [[left,right]]\n    while(list.length!=0){\n        let now = list.pop()\n        if(now[0]>=now[1])\n         continue;\n        let flag = quickSort(num,now[0],now[1])\n        //flag-1 和 flag+1 避免了类似[1,3,2,5,9,6,8,7]这样flag一直卡在0的情况\n        list.push([now[0],flag-1])\n        list.push([flag+1,now[1]])\n    }\n}\njisuan(num,0,num.length-1)\nconsole.log(num);\n```\n\n## js 实现链表 , 并且判断链表是否循环\n\n```javascript\n\n//用js来实现一个链表\n\n//构造节点\nclass Node {\n    constructor(data) {\n        this.data = data\n        this.next = null\n    }\n}\n\n//创建链表\nclass LinkedPropotype {\n    constructor() {\n        this.head = null\n    }\n    //构造节点\n    create(data) {\n        let node = new Node(data)\n        if (this.head == null) {\n            this.head = node\n        } else {\n            let current = this.head\n            while (current.next) {\n                current = current.next\n            }\n            current.next = node\n        }\n    }\n\n    //删除节点\n    deletenode(index) {\n        let p = this.head\n        let k = p\n        let len = 0\n        while (p) {\n            k = p\n            p = p.next\n            len++\n        }\n        if (index < 0 || index > len) {\n            console.log('删除超出范围');\n            return;\n        }\n\n        let q = this.head\n        let l = q\n        //删除头节点\n        if (index == 0) {\n            this.head = this.head.next\n            return q.data\n        }\n        //删除中间节点\n        else if (index < len) {\n            while (index) {\n                l = q\n                q = q.next\n                index--\n            }\n            let deletenum = q.data\n            l.next = q.next\n            return deletenum\n        }\n        //删除尾节点\n        else {\n            k.next = null\n            return p\n        }\n    }\n\n    //查找节点\n    searchnode(index){\n        let p = this.head\n        let k = p\n        let len = 0\n        while (p) {\n            k = p\n            p = p.next\n            len++\n        }\n        if (index < 0 || index > len) {\n            console.log('查找超出范围');\n            return;\n        }\n        p = this.head\n        while(index){\n            index--\n            p = p.next\n        }\n        return p\n    }\n\n    //修改节点\n    editnode(index,data){\n        let p = this.head\n        let k = p\n        let len = 0\n        while (p) {\n            k = p\n            p = p.next\n            len++\n        }\n        if (index < 0 || index > len) {\n            console.log('修改超出范围');\n            return;\n        }\n        p = this.head\n        while(index){\n            index--\n            p = p.next\n        }\n        p.data = data\n    }\n\n}\n\nlet linknode = new LinkedPropotype()\nlinknode.create(1)\nlinknode.create(2)\nlinknode.create(3)\nlinknode.create(4)\nlinknode.create(5)\nlinknode.create(6)\nlinknode.create(7)\n\n\n//下面三部将链表改造为循环链表\nvar C = linknode.searchnode(2)\nvar G = linknode.searchnode(6)\nG.next = C\n\n//使用快慢指针来判断有没有环\nlet isCircle = (link)=>{\n    let p = link.head\n    let q = link.head\n\n    //快指针走完就没有必要再进行判断了\n    while(q&&q.next){\n        p = p.next\n        q = q.next.next\n        if(p === q){\n            console.log('此链表循环');\n            return;\n        }\n    }\n    console.log('此链表不循环');\n}\n\nisCircle(linknode)\n\n```\n\n## 最小栈的实现\n### 设计一个栈 A, 让出栈 , 入栈 , 输出栈内的最小值的时间复杂度都是O(1)\n #### 思路:  再设计一个栈 B 存入A第一个元素 , 每次A入栈的时候 , 跟B栈顶元素作比较 , 如果入栈元素小于B栈顶元素 , 则B也入栈此元素 , A出栈的时候 , 跟B栈顶元素做比较 , 如果相等 , B出栈,这样 ,B栈顶永远都是A中的最小元素\n\n```javascript\n//设计一个栈 , 让出栈 , 入栈 , 输出栈内的最小值的时间复杂度都是O(1)\nlet arr = [4,7,3,8,2,5]\n\nlet len = arr.length \nlet len1 = arr.length \nvar min\nlet A = []\nlet B = []\n//让元素都入栈 , 栈A和栈B都造好了\n\nwhile(len){\n    if(len == len1)\n    {\n        min = arr[0]\n        B.push(min)\n    }\n\n    let num = arr.shift()\n    A.push(num)\n\n    //每一次进栈的时候都和min作比较 , 小的放入栈B\n    \n    if(num<B[B.length-1]){\n        B.push(num)\n    }\n    len--\n}\n\n//出栈 , 出栈的与 B 最小的相等 B也出栈\nlet deleteA = ()=>{\n    let num = A.pop()\n    if(num==B[B.length-1])\n    B.pop()\n}\n\n//入栈 , 入栈的与 B 最小的相等 B也入栈\nlet pushA = (data)=>{\n    A.push(data)\n    if(data<B[B.length-1])\n    B.push(data)\n}\n\n//输出栈A中最小的值\nlet pushmin = ()=>{\n    return B[B.length-1]\n}\n\nconsole.log(A);\nconsole.log(pushmin());//输出A中最小的\npushA(1)\nconsole.log(A);\nconsole.log(pushmin());//输出A中最小的\ndeleteA()\nconsole.log(A);\nconsole.log(pushmin());//输出A中最小的\n```\n\n\n## js实现动态规划 , 优化时间 , 优化空间\n``详情见小灰的算法之旅 , 以下是我个人的见解``\n==题目==: \n很久很久以前，有一位国王拥有5座金矿，每座金矿的黄金储量不同，\n需要参与挖掘的工人人数也不同。例如有的金矿储量是500kg黄金，需 要5个工人来挖掘；有的金矿储量是200kg黄金，需要3个工人来挖 掘…… 如果参与挖矿的工人的总数是10。每座金矿要么全挖，要么不挖，不能 派出一半人挖取一半的金矿。要求用程序求出，要想得到尽可能多的黄金，应该选择挖取哪几座金矿？\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2a2fc6bff4e64bb18757836c2797a5fc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center)\n\n### 一开始的思路:\n首先我们想到的是 : 求出每个金矿的性价比 , 从高到低依次挖出金矿 \n挖矿的性价比 : 350/3 > 500/5 >  200/3=300/4=400/5\n 那么我们``十个人`` \n - 先用`` 3 个人挖 350`` 的金矿 , \n - 再用 ``5 个人去挖 500 ``的金矿 , \n - 最后剩下`` 2 个人``不能再挖矿  \n - 此时我们的黄金数量是 ``850 ``\n\n#### 这是否就是十个人能挖的最大黄金数量了呢 ? 答案不是\n因为我们 用 5个人 去挖 500 的金矿 , 再用5个人去挖400的金矿 , 此时十个人刚好用完 , 并且黄金的数量是``900``\n\n#### 那么我们怎么才能获得黄金的最大数量呢 ? 这里就要引入动态规划来实现\n动态规划就是把简单的问题转换成规模较小的子问题,再从简单的子问题自底向上一步一步递推,最终得到问题的最优解 , 这样说你可能还是云里雾里 \n其实我们算出做出每一个举动过后的结果 , 再和其它举动的结果做出比较 , 就可以计算出最好的结果 , 举个列子 : \n\np:[5,5,3,4,3],\t//金矿开采需要的工人数量\ng:[500,400,350,300,200]//金矿储量\n\n ==第一个500金矿我们可以挖也可以不挖==\n - ``挖 ``: 黄金数量+500 ,  工人数量 - 5 \n - \t\t接下来我们就用剩下的工人去挖下一个金矿 , 此时我们已经获得了500黄金\n - ``不挖`` : 黄金数量 + 0 , 工人数量 - 0\n - \t\t接下来我们就直接用不变的工人数量去挖下一个金矿\n\n==到第二个400金矿的时候==\n- ``挖`` : 黄金数量+400 ,  工人数量 - 5\n- \t\t 此时已经没有工人 ,  要加上第一次挖的500金矿 , 最终的黄金数量是900\n- ``不挖`` : 黄金数量 + 0 , 工人数量 - 0 \n- \t\t到现在为止我们的工人数量和黄金数量都没有变化\n\n==一直这样遍历下去 , 直到工人数量为  零  或者 可以挖的黄金数量为  零   , 返回我们挖出的黄金数量==\n![在这里插入图片描述](https://img-blog.csdnimg.cn/102fc30f6a1b4602b77b01da7cc7a41c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center)\n\n#### 由题可知 , 我们创建几个变量 :\n ``w``:工人的数量 ,``n``:金矿的数量 , \n ``gold``:金矿和人数之间的关系(为了之后的思路比较清晰 , 我把这两个装到一个对象里面)\n\n==例如== : gold.g[0] 和 gold.p[0] 之间的关系就是 当金矿储量为 500 时需要 5 个人挖\n```javascript\nw = 10 //工人的数量\nn = 5  //金矿的数量 \nlet gold = {\n    \t\tp:[5,5,3,4,3],\t//金矿开采需要的工人数量\n    \t\tg:[500,400,350,300,200]//金矿储量\n}\n```\n\n### 一 . js实现动态规划\n我们还要实现状态转移方程 : \n- 金矿数量或者工人数量为``零``时 : ``F(n,w) = 0``\n- 工人的数量``不足以``挖当前的金矿时 , 去挖下一个金矿 : ``F(n-1 , w)``\n- 当前工人数量`足以`挖当前的金矿时 : (有两种选择)\n\t\t- 挖: ``F(w-gold.p[n-1],n-1,gold)+gold.g[n-1]``\n\t\t- 不挖:`` F(w,n-1,gold)``\n- 返回第三种情况的最大值  ``Math.max(F(w,n-1,gold),F(w-gold.p[n-1],n-1,gold)+gold.g[n-1])``\n\n```javascript\nlet w = 10//工人数量\nlet n = 5 //可选金矿数量\nlet gold = {\n    p:[5,5,3,4,3],//金矿开采需要的工人数量\n    g:[500,400,350,300,200]//金矿储量\n}\n\nlet F = (w,n,gold)=>{\n    //金矿没了或者是人没了都返回 0 \n    if(w==0||n==0)\n    return 0\n\n    //当前人数不够挖当前的金矿 , 就去看看下一个金矿 , 人数不变\n    if(w<gold.p[n-1])\n    return F(w,n-1,gold)\n\n    //返回挖矿或者不挖矿的最优解\n    return Math.max(F(w,n-1,gold),F(w-gold.p[n-1],n-1,gold)+gold.g[n-1])\n}\n\n\nconsole.log(F(w,n,gold));\n```\n就这样我们计算出了每一次挖和不挖获得的黄金数量 , 得到了最大的黄金数量 , 但是这样的时间复杂度非常高O(2^n)\n  #### 二 . 优化时间的动态规划算法 ( 自底向上求解 )\n  算出第一个金矿的所有\n\n```javascript\nlet w = 10//工人数量\nlet n = 5 //可选金矿数量\nlet gold = {\n    p:[5,5,3,4,3],//金矿开采需要的工人数量\n    g:[500,400,350,300,200]//金矿储量\n}\n\n// 写一个二维数组\nlet arr = Array(gold.g.length).fill(0).map(x=>Array(w).fill(0))\nlet getBestGoldMiningV2 = (arr)=>{\n    //数组每一格都根据条件进行状态转移方程\n    arr.forEach((item,index)=>{\n        //把第一行的状态方程补满\n        if(index==0){\n            item.forEach((item2,index2)=>{\n                if(gold.p[index]<=index2+1){\n                    arr[index][index2] = gold.g[index]\n                }\n            })\n        }\n        else\n        item.forEach((item2,index2)=>{\n            //人数不够就去看看上一个\n            if(gold.p[index]>index2+1){\n                arr[index][index2] = arr[index-1][index2]\n            }\n            //返回挖和不挖之间的最大值(每一行的值都可以状态转移到上一行去)\n            else\n            {\n            let j = index2-gold.p[index]==-1?0:index2-gold.p[index]\n            arr[index][index2] = \n            Math.max(arr[index-1][index2],arr[index-1][j]+gold.g[index])\n            }\n        })\n    })\n\n    //返回最后一格\n    return arr[gold.g.length-1][w-1]\n}\nconsole.log(getBestGoldMiningV2(arr));\n```\n时间没问题了, 让我们来看看空间\n#### 三 . 优化空间的算法\n\n```javascript\n//上面代码的时间已经是最优的了 , 但是空间仍有优化的空间\n//因为我们在填写其中一行的空格的时候 , 都是根据上一行的空格来获取最大收益的 \n//所以我们只需要一行数组就可以了 , 但是在计算的时候要从右往左计算 ,\n//避免这一行的值把上一行的值覆盖\n\nlet arr2 = Array(w).fill(0)\n//初始化第一行的数据\narr2.forEach((item,index)=>{\n    if(gold.p[0]<=index+1)\n    arr2[index] = gold.g[0]\n})\nlet getBestGoldMiningV3 = (arr2)=>{\n\n    gold.g.forEach((item,index)=>{\n        let person = gold.p[index]\n\n        if(index!=0)\n        //从右边开始循环arr2\n        for(let i = w-1;i>=0;i--){\n            let j = i-gold.p[index]==-1?0:i-gold.p[index]\n            if(i+1>=person){\n                arr2[i] = Math.max(arr2[i],arr2[j]+gold.g[index])\n            }\n        }\n    })\n\n    return arr2[w-1]\n}\n\nconsole.log(getBestGoldMiningV3(arr2));\n```\n## 又是一道动态规划的问题\n![在这里插入图片描述](https://img-blog.csdnimg.cn/fd97efa401b54b0f8ce6f5ceccbb6553.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_20,color_FFFFFF,t_70,g_se,x_16)\n一开始直接使用的是动态规划 , 导致栈满\n```javascript\n//在这里计算\nlet path = (m,n,i,j)=>{\n    let count = 0\n    //向右或者向下走完了只能有一种走法了\n    if(i==m||j==n)return 1\n    //当两个都没有走完\n    return path(m,n,i+1,j)+path(m,n,i,j+1)+count\n}\n\nvar uniquePaths = function(m, n) {\n    //在这里使用path\n    return path(m,n,1,1)\n};\n```\n使用记忆化搜索结合动态规划的思想\n\n```javascript\n//使用数组结合动态规划的思想 , 解决递归栈满的情况\nvar uniquePaths = function(m, n) {\n    //创建一个数组\n    let arr = new Array(m).fill(0).map(()=>item = new Array(n).fill(0))\n    //初始化数组 , 走到最底部或者最右边都只剩下一种走法\n    for(let i =0 ;i<m;i++){\n        arr[i][0] = 1\n    }\n    for(let j =0 ;j<n;j++){\n        arr[0][j] = 1\n    }\n    \n    for(let i = 1;i<m;i++){\n        for(let j = 1 ;j<n;j++){\n            arr[i][j] = arr[i-1][j] + arr[i][j-1]\n        }\n    }\n\n    return arr[m-1][n-1]\n\n};\n```\n\n\n##  找出arr数组中  ``出现次数``  为奇数次的数 , 有两种奇数的数\n## let arr = [4,1,2,2,3,1,4,5]\n//如果只有一个出现次数是奇数的数的话 , 我们只需要对整个数组进行异或运算 , 算出来的结果就是奇数\n//如果有两个出现次数是奇数的数的话 , 我们就需要先对整个数组进行异或运算 , \n//根据运算结果把元素组分成两个部分 , 然后再依次进行异或运算\n\n```javascript\nlet arr = [4,1,2,2,3,1,4,5]\n//进行异或运算的函数\nlet findLostNum = (arr)=>{\n    let result = arr.sort((a,b)=>a-b).reduce((a,b)=>{\n        return a^b\n    })\n    return result\n}\n\n\n//把数组分成两个部分再进行异或运算\nlet apartArr = (arr)=>{\n    if(findLostNum(arr)==0)\n    return '测试案例不符合题意'\n    //先对整个数组进行异或运算\n    let xor = findLostNum(arr).toString(2)\n    let flag = xor.split('').reverse().join('').indexOf(1)\n    //让mark 指向数组的第一个数\n    let mark = 0\n    //根据xor的结果把arr分开\n    arr.forEach((item,index)=>{\n        let flag2 = item.toString(2).split('').reverse().join('').charAt(flag) || 0\n        //找到符合条件的值就让mark++\n        if(1==flag2){\n            //交换mark 和 flag2 当前指向的值\n            [arr[mark],arr[index]]=[arr[index],arr[mark]]\n            mark++\n        }\n        \n    })\n    //现在进行分组寻找\n    let left_result = findLostNum(arr.splice(0,mark))\n    let right_result = findLostNum(arr)\n\n    return `${left_result} , ${right_result}`\n\n}\n\n\nconsole.log(apartArr(arr));\n```\n\n\n## 我发现用位运算可以更快并且更加准确的找到用来区分的数字 , 并且在区分数组的时候就进行异或运算\n\n```javascript\nlet arr = [4,1,2,2,333,1,4,23333]\n//进行异或运算的函数\nlet findLostNum = (arr)=>{\n    let result = arr.sort((a,b)=>a-b).reduce((a,b)=>{\n        return a^b\n    })\n    return result\n}\n\n\n//把数组分成两个部分再进行异或运算\nlet apartArr = (arr)=>{\n    if(findLostNum(arr)==0)\n    return '测试案例不符合题意'\n    //先对整个数组进行异或运算\n    let xor = findLostNum(arr).toString(2)\n\n    //接下来用位运算来找到不同的部分\n    let separator = 1\n    while (0==(xor&separator)){\n        separator<<=1\n    }\n    //现在separator找到了第一个二进制中相同位置不同的数\n\n\n    //让mark 指向数组的第一个数\n    let result = new Array(2)\n    //根据xor的结果把arr分开\n    arr.forEach((item)=>{\n        //找到符合条件的值就让mark++\n        if((item&separator)==0){\n            result[0]^=item\n        }\n        else{\n            result[1]^=item\n        }        \n    })\n\n\n    return result\n\n}\n\n\nconsole.log(apartArr(arr));\n```\n\n三数之和 , 经典的题目了 , 定下一个数 , 转换成二数之和\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\n\n\n//核心思想就是将三数之和转换为两数之和 , 将a+b+c=0  转换为 b+c = -a 然后利用左右指针找到符合条件的b 和 c \n//在这到题里面还要注意重复的结果要跳过\n\nlet quickSort = (arr,i,j)=>{\n    if(i>=j)\n    return\n    let left = i\n    let mark = left \n    while(left<=j){\n        if(arr[left]<arr[i]){\n            mark++\n            [arr[left],arr[mark]]=[arr[mark],arr[left]]\n        }\n        left++\n    }\n    [arr[i],arr[mark]]=[arr[mark],arr[i]]\n\n    quickSort(arr,i,mark-1)\n    quickSort(arr,mark+1,j)\n}\n\n\n var threeSum = function(nums) {\n    if(nums.length<3)\n    return []\n    //对数组进行排序(使用快排)\n    quickSort(nums,0,nums.length-1)\n    let arr = []\n\n    for(let i=0;i<nums.length;i++){\n        if(nums[i]>0)\n        break\n\n        let left = i+1\n        let right = nums.length-1\n\n        //去重\n        if(i>0&&nums[i]==nums[i-1])\n        continue\n        \n        //left < right就一直循环\n        while(left<right){\n            let sum = nums[i]+nums[left]+nums[right]\n            //找到了等于零的情况 , 一起移动\n            if(sum===0)\n            {\n            arr.push([nums[i],nums[left],nums[right]])\n\n            //在移动左右指针的时候先对左右指针进行判断 ,相同的就跳过\n            while(left<right&&nums[left]==nums[left+1])\n            left++\n            while(left<right&&nums[right]==nums[right+1])\n            right--\n\n            left++\n            right--\n            }else if(sum<0){\n                left++\n            }else\n            right--\n        }\n\n    }\n    return arr\n};\nlet num = [-1,0,1,2,-1,-4]\nconsole.log(threeSum(num));\n```\n最接近的三数之和\n\n```javascript\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\n\nvar threeSumClosest = function (nums, target) {\n    //如果数组只有三个数 , 直接退出\n    if (nums.length == 3)\n    return nums[0] + nums[1] + nums[2]\n    //第一层循环定下一个数\n    let result\n    //排序\n    nums.sort((a, b) => a - b)\n    //这个是最开始的和与target的差\n    let dis = Math.abs(nums[0] + nums[1] + nums[nums.length - 1] - target)\n\n    for (let i = 0; i < nums.length; i++) {\n\n        let left = i + 1\n        let right = nums.length - 1\n\n        //使用双指针来找\n        while (left < right) {\n\n            let sum = nums[i] + nums[left] + nums[right]\n\n\n            if (sum > target) {\n                right--\n                if (Math.abs(target - sum) <= dis) {\n                    result = sum\n                    dis = Math.abs(target - sum)\n                }\n\n            }\n            else if (sum < target) {\n                left++\n                if (Math.abs(target - sum) <= dis) {\n                    result = sum\n                    dis = Math.abs(target - sum)\n                }\n            }\n            else {\n                result = target\n                return result\n            }\n        }\n\n    }\n\n\n    return result\n};\n\nconsole.log(threeSumClosest([1, 1, 1, 1], 0));\n```","slug":"刷题心得记录","published":1,"date":"2022-05-06T12:28:52.756Z","updated":"2022-05-06T12:29:34.629Z","_id":"cl2ueyrwd0002m0vo2lp2bpge","comments":1,"layout":"post","photos":[],"link":"","content":"<p>目前更新了:二分法,快排,  js创建链表,  动态规划, 异或运算,三数之和  等       </p>\n<ol>\n<li><p>==FindIndex== 找到数组中的<code>第一个</code>目标值并且返回<code>目标值的下标</code> , 没有找到就返回-1<br>判断后返回值,不用手动return</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> index = nums.<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item===target)</span><br></pre></td></tr></table></figure></li>\n<li><p>==find== 找到数组中<code>第一个</code>符合条件的<code>值</code>  , 没有找到就返回 <code>undefined</code> find对空数组不起作用</p>\n</li>\n<li><p><code>sort</code> 会改变原数组</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b) <span class=\"comment\">//升序</span></span><br><span class=\"line\">nums.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>b-a) <span class=\"comment\">//降序</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二分查找-二分详解\"><a href=\"#二分查找-二分详解\" class=\"headerlink\" title=\"二分查找 二分详解\"></a>二分查找 <a href=\"https://blog.csdn.net/qq_45978890/article/details/116094046?spm=1001.2101.3001.6650.10&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-10.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-10.pc_relevant_default&utm_relevant_index=13\">二分详解</a></h2><p>二分查找 : 适用于升序数组 , 判断条件是<code>left &lt; right </code>,不符合条件就返回-1</p>\n<ol>\n<li>我解题的时候纠结数组分别是奇数和偶数的时候中间值mid怎么取 , 但是不必纠结这个问题 , 因为除以二的时候它们都是有可能出现的 , </li>\n<li>重点是判断<code>边界问题</code> , 下面采用了<code>左闭右闭</code>的解法 , 所以判断循环的时候条件是 <code>left &lt;= right</code> , 因为<code>[left , right]</code> 是有意义的</li>\n<li>当我计算mid的时候使用了<code>mid = ( left + right ) / 2</code> , 出来的结果错误的(可能是因为left+right超过了定义变量时的大小),然后我又改变了一种写法:mid = (right-left)/2+left ,计算出来的index居然有小数!!?? 尝试了一下,在js里面<code>5/2=2.5....</code></li>\n<li>正确的写法:<code>const mid = Math.floor((right-left)/2)+left</code> //<code> 防止计算时溢出</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nums = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">89</span>,<span class=\"number\">7</span>,<span class=\"number\">21</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">63</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> target = <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用二分查找来找到 target 在 nums 中对应值的下标</span></span><br><span class=\"line\"><span class=\"comment\">//查找的条件是查找范围不为空</span></span><br><span class=\"line\">nums.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nums)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> search = <span class=\"keyword\">function</span>(<span class=\"params\">nums,target</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = nums.<span class=\"property\">length</span>-<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//每次判断之前都重置 mid</span></span><br><span class=\"line\">        <span class=\"comment\">// const mid = (left+right)/2</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> mid = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((right-left)/<span class=\"number\">2</span>)+left</span><br><span class=\"line\">        <span class=\"keyword\">const</span> num = nums[mid]</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num === target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target &gt; num)&#123;</span><br><span class=\"line\">            left = mid+<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            right = mid-<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">search</span>(nums,target)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n这道异曲同工之妙,就是缩小空间</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。</span><br><span class=\"line\">如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</span><br><span class=\"line\">请必须使用时间复杂度为 <span class=\"title function_\">O</span>(log n) 的算法。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> searchInsert = <span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//法一</span></span><br><span class=\"line\">    <span class=\"comment\">/* let index = nums.findIndex(item=&gt;item==target)</span></span><br><span class=\"line\"><span class=\"comment\">    if(index != -1)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return index</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        let index2 = nums.findIndex(item=&gt;item&gt;target)</span></span><br><span class=\"line\"><span class=\"comment\">        if(index2==-1)return nums.length</span></span><br><span class=\"line\"><span class=\"comment\">        else return index2</span></span><br><span class=\"line\"><span class=\"comment\">    &#125; */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//二分法</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = nums.<span class=\"property\">length</span>-<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((right-left)/<span class=\"number\">2</span>)+left</span><br><span class=\"line\">        <span class=\"keyword\">let</span> num = nums[mid]</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target == num)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target &gt; num)&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span> </span><br><span class=\"line\">           / /区间缩小到 left 和 right 相等的时候,从这里就出去了,</span><br><span class=\"line\">           <span class=\"regexp\">/ /</span>此时left 在 原来 left = right 那个值的左边一位 , </span><br><span class=\"line\">           <span class=\"regexp\">/ /</span>刚好就是找不到值要插入的index</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"快排-双边循环-递归\"><a href=\"#快排-双边循环-递归\" class=\"headerlink\" title=\"快排(双边循环 , 递归)\"></a>快排(双边循环 , 递归)</h2><p>每次都将最左边的值作为<code>基准值</code> , 然后从最左边的left 和 最右边的 right 开始查找 , 从right开始  , right找的是比基准值小的 , 找到之后left 就开始找  , 找的是比基准值大的 , 找完一轮后交换left 和right 的值, 最后left 和right 重合的时候 , <code>交换基准值和left 的值</code>  ,然后使用递归 , 分别排序基准值左边的 和 右边的 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = [<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myquickSort</span>(<span class=\"params\">num,left,right</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = left</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left&gt;=right)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;right)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//找到符合的right</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(right&gt;left&amp;&amp;num[right]&gt;=num[flag])</span><br><span class=\"line\">        right--</span><br><span class=\"line\">        <span class=\"comment\">//找到符合的left</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(right&gt;left&amp;&amp;num[left]&lt;=num[flag])</span><br><span class=\"line\">        left++</span><br><span class=\"line\">        <span class=\"comment\">//交换两者的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left&lt;right)</span><br><span class=\"line\">        [num[right],num[left]] = [num[left],num[right]] </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//交换基准值和rightleft重合的值</span></span><br><span class=\"line\">    [num[left],num[flag]] = [num[flag],num[left]] </span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">jisuan</span> (num , left , right)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left&gt;=right)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = <span class=\"title function_\">myquickSort</span>(num,left,right)</span><br><span class=\"line\">    <span class=\"title function_\">jisuan</span>(num,left,flag-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"title function_\">jisuan</span>(num,flag+<span class=\"number\">1</span>,right)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">jisuan</span>(num,<span class=\"number\">0</span>,num.<span class=\"property\">length</span>-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"快排-单边循环-递归\"><a href=\"#快排-单边循环-递归\" class=\"headerlink\" title=\"快排(单边循环 递归)\"></a>快排(单边循环 递归)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = [<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//单边循环</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">quickSort</span> = (<span class=\"params\">num, left, right</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = left</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mark = left</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;=right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num[left]&lt;num[flag])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这个时候mark就要往右移动一位 , 因为找到了一个小于flag 的数</span></span><br><span class=\"line\">            mark++</span><br><span class=\"line\">            [num[left],num[mark]] = [num[mark],num[left]]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        left++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//交换基准数 和 mark 的值</span></span><br><span class=\"line\">    [num[flag],num[mark]] = [num[mark],num[flag]]</span><br><span class=\"line\">    <span class=\"comment\">//最后要返回基准数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mark</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">jisuan</span> = (<span class=\"params\">num, left, right</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//既然是递归 , 就要有结束条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left&gt;=right)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = <span class=\"title function_\">quickSort</span>(num, left, right)</span><br><span class=\"line\">    <span class=\"title function_\">jisuan</span>(num, left, flag - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"title function_\">jisuan</span>(num, flag + <span class=\"number\">1</span>, right)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">jisuan</span>(num, <span class=\"number\">0</span>, num.<span class=\"property\">length</span> - <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快排-非递归\"><a href=\"#快排-非递归\" class=\"headerlink\" title=\"快排 (非递归)\"></a>快排 (非递归)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当数据量很大的时候 , 递归快排会造成栈溢出 , 为了解决这个问题 , 我们使用js数组 来模拟栈 , </span></span><br><span class=\"line\"><span class=\"comment\">//将待排序的[left,right]保存到数组中 , 循环取出进行快排 </span></span><br><span class=\"line\"><span class=\"comment\">// let num = [4, 7, 3, 5, 6, 2, 8, 1]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"comment\">//非递归实现快排</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">quickSort</span> = (<span class=\"params\">num, left, right</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = left</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mark = left</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num[left] &lt; num[flag]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这个时候mark就要往右移动一位 , 因为找到了一个小于flag 的数</span></span><br><span class=\"line\">            mark++</span><br><span class=\"line\">            [num[left], num[mark]] = [num[mark], num[left]]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        left++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//交换基准数 和 mark 的值</span></span><br><span class=\"line\">    [num[flag], num[mark]] = [num[mark], num[flag]]</span><br><span class=\"line\">    <span class=\"comment\">//最后要返回基准数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mark</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用非递归的方式进行快排</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">jisuan</span> = (<span class=\"params\">num,left,right</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = [[left,right]]</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(list.<span class=\"property\">length</span>!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> now = list.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now[<span class=\"number\">0</span>]&gt;=now[<span class=\"number\">1</span>])</span><br><span class=\"line\">         <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> flag = <span class=\"title function_\">quickSort</span>(num,now[<span class=\"number\">0</span>],now[<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"comment\">//flag-1 和 flag+1 避免了类似[1,3,2,5,9,6,8,7]这样flag一直卡在0的情况</span></span><br><span class=\"line\">        list.<span class=\"title function_\">push</span>([now[<span class=\"number\">0</span>],flag-<span class=\"number\">1</span>])</span><br><span class=\"line\">        list.<span class=\"title function_\">push</span>([flag+<span class=\"number\">1</span>,now[<span class=\"number\">1</span>]])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">jisuan</span>(num,<span class=\"number\">0</span>,num.<span class=\"property\">length</span>-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"js-实现链表-并且判断链表是否循环\"><a href=\"#js-实现链表-并且判断链表是否循环\" class=\"headerlink\" title=\"js 实现链表 , 并且判断链表是否循环\"></a>js 实现链表 , 并且判断链表是否循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用js来实现一个链表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造节点</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = data</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建链表</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedPropotype</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//构造节点</span></span><br><span class=\"line\">    <span class=\"title function_\">create</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = node</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> current = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (current.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">                current = current.<span class=\"property\">next</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            current.<span class=\"property\">next</span> = node</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除节点</span></span><br><span class=\"line\">    <span class=\"title function_\">deletenode</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = p</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">            k = p</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">            len++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;删除超出范围&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> q = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> l = q</span><br><span class=\"line\">        <span class=\"comment\">//删除头节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> q.<span class=\"property\">data</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除中间节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt; len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (index) &#123;</span><br><span class=\"line\">                l = q</span><br><span class=\"line\">                q = q.<span class=\"property\">next</span></span><br><span class=\"line\">                index--</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> deletenum = q.<span class=\"property\">data</span></span><br><span class=\"line\">            l.<span class=\"property\">next</span> = q.<span class=\"property\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> deletenum</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除尾节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            k.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> p</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查找节点</span></span><br><span class=\"line\">    <span class=\"title function_\">searchnode</span>(<span class=\"params\">index</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = p</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">            k = p</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">            len++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;查找超出范围&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index)&#123;</span><br><span class=\"line\">            index--</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改节点</span></span><br><span class=\"line\">    <span class=\"title function_\">editnode</span>(<span class=\"params\">index,data</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = p</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">            k = p</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">            len++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;修改超出范围&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index)&#123;</span><br><span class=\"line\">            index--</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.<span class=\"property\">data</span> = data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> linknode = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedPropotype</span>()</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下面三部将链表改造为循环链表</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> C = linknode.<span class=\"title function_\">searchnode</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> G = linknode.<span class=\"title function_\">searchnode</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\">G.<span class=\"property\">next</span> = C</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用快慢指针来判断有没有环</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">isCircle</span> = (<span class=\"params\">link</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> q = link.<span class=\"property\">head</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//快指针走完就没有必要再进行判断了</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q&amp;&amp;q.<span class=\"property\">next</span>)&#123;</span><br><span class=\"line\">        p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        q = q.<span class=\"property\">next</span>.<span class=\"property\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p === q)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;此链表循环&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;此链表不循环&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">isCircle</span>(linknode)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最小栈的实现\"><a href=\"#最小栈的实现\" class=\"headerlink\" title=\"最小栈的实现\"></a>最小栈的实现</h2><h3 id=\"设计一个栈-A-让出栈-入栈-输出栈内的最小值的时间复杂度都是O-1\"><a href=\"#设计一个栈-A-让出栈-入栈-输出栈内的最小值的时间复杂度都是O-1\" class=\"headerlink\" title=\"设计一个栈 A, 让出栈 , 入栈 , 输出栈内的最小值的时间复杂度都是O(1)\"></a>设计一个栈 A, 让出栈 , 入栈 , 输出栈内的最小值的时间复杂度都是O(1)</h3><h4 id=\"思路-再设计一个栈-B-存入A第一个元素-每次A入栈的时候-跟B栈顶元素作比较-如果入栈元素小于B栈顶元素-则B也入栈此元素-A出栈的时候-跟B栈顶元素做比较-如果相等-B出栈-这样-B栈顶永远都是A中的最小元素\"><a href=\"#思路-再设计一个栈-B-存入A第一个元素-每次A入栈的时候-跟B栈顶元素作比较-如果入栈元素小于B栈顶元素-则B也入栈此元素-A出栈的时候-跟B栈顶元素做比较-如果相等-B出栈-这样-B栈顶永远都是A中的最小元素\" class=\"headerlink\" title=\"思路:  再设计一个栈 B 存入A第一个元素 , 每次A入栈的时候 , 跟B栈顶元素作比较 , 如果入栈元素小于B栈顶元素 , 则B也入栈此元素 , A出栈的时候 , 跟B栈顶元素做比较 , 如果相等 , B出栈,这样 ,B栈顶永远都是A中的最小元素\"></a>思路:  再设计一个栈 B 存入A第一个元素 , 每次A入栈的时候 , 跟B栈顶元素作比较 , 如果入栈元素小于B栈顶元素 , 则B也入栈此元素 , A出栈的时候 , 跟B栈顶元素做比较 , 如果相等 , B出栈,这样 ,B栈顶永远都是A中的最小元素</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设计一个栈 , 让出栈 , 入栈 , 输出栈内的最小值的时间复杂度都是O(1)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> len = arr.<span class=\"property\">length</span> </span><br><span class=\"line\"><span class=\"keyword\">let</span> len1 = arr.<span class=\"property\">length</span> </span><br><span class=\"line\"><span class=\"keyword\">var</span> min</span><br><span class=\"line\"><span class=\"keyword\">let</span> A = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> B = []</span><br><span class=\"line\"><span class=\"comment\">//让元素都入栈 , 栈A和栈B都造好了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(len)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == len1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        min = arr[<span class=\"number\">0</span>]</span><br><span class=\"line\">        B.<span class=\"title function_\">push</span>(min)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = arr.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">    A.<span class=\"title function_\">push</span>(num)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//每一次进栈的时候都和min作比较 , 小的放入栈B</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num&lt;B[B.<span class=\"property\">length</span>-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">        B.<span class=\"title function_\">push</span>(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    len--</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//出栈 , 出栈的与 B 最小的相等 B也出栈</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">deleteA</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = A.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num==B[B.<span class=\"property\">length</span>-<span class=\"number\">1</span>])</span><br><span class=\"line\">    B.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//入栈 , 入栈的与 B 最小的相等 B也入栈</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">pushA</span> = (<span class=\"params\">data</span>)=&gt;&#123;</span><br><span class=\"line\">    A.<span class=\"title function_\">push</span>(data)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(data&lt;B[B.<span class=\"property\">length</span>-<span class=\"number\">1</span>])</span><br><span class=\"line\">    B.<span class=\"title function_\">push</span>(data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出栈A中最小的值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">pushmin</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> B[B.<span class=\"property\">length</span>-<span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(A);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">pushmin</span>());<span class=\"comment\">//输出A中最小的</span></span><br><span class=\"line\"><span class=\"title function_\">pushA</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(A);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">pushmin</span>());<span class=\"comment\">//输出A中最小的</span></span><br><span class=\"line\"><span class=\"title function_\">deleteA</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(A);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">pushmin</span>());<span class=\"comment\">//输出A中最小的</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"js实现动态规划-优化时间-优化空间\"><a href=\"#js实现动态规划-优化时间-优化空间\" class=\"headerlink\" title=\"js实现动态规划 , 优化时间 , 优化空间\"></a>js实现动态规划 , 优化时间 , 优化空间</h2><p><code>详情见小灰的算法之旅 , 以下是我个人的见解</code><br>==题目==:<br>很久很久以前，有一位国王拥有5座金矿，每座金矿的黄金储量不同，<br>需要参与挖掘的工人人数也不同。例如有的金矿储量是500kg黄金，需 要5个工人来挖掘；有的金矿储量是200kg黄金，需要3个工人来挖 掘…… 如果参与挖矿的工人的总数是10。每座金矿要么全挖，要么不挖，不能 派出一半人挖取一半的金矿。要求用程序求出，要想得到尽可能多的黄金，应该选择挖取哪几座金矿？<br><img src=\"https://img-blog.csdnimg.cn/2a2fc6bff4e64bb18757836c2797a5fc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"一开始的思路\"><a href=\"#一开始的思路\" class=\"headerlink\" title=\"一开始的思路:\"></a>一开始的思路:</h3><p>首先我们想到的是 : 求出每个金矿的性价比 , 从高到低依次挖出金矿<br>挖矿的性价比 : 350/3 &gt; 500/5 &gt;  200/3=300/4=400/5<br> 那么我们<code>十个人</code> </p>\n<ul>\n<li>先用<code> 3 个人挖 350</code> 的金矿 , </li>\n<li>再用 <code>5 个人去挖 500 </code>的金矿 , </li>\n<li>最后剩下<code> 2 个人</code>不能再挖矿  </li>\n<li>此时我们的黄金数量是 <code>850 </code></li>\n</ul>\n<h4 id=\"这是否就是十个人能挖的最大黄金数量了呢-答案不是\"><a href=\"#这是否就是十个人能挖的最大黄金数量了呢-答案不是\" class=\"headerlink\" title=\"这是否就是十个人能挖的最大黄金数量了呢 ? 答案不是\"></a>这是否就是十个人能挖的最大黄金数量了呢 ? 答案不是</h4><p>因为我们 用 5个人 去挖 500 的金矿 , 再用5个人去挖400的金矿 , 此时十个人刚好用完 , 并且黄金的数量是<code>900</code></p>\n<h4 id=\"那么我们怎么才能获得黄金的最大数量呢-这里就要引入动态规划来实现\"><a href=\"#那么我们怎么才能获得黄金的最大数量呢-这里就要引入动态规划来实现\" class=\"headerlink\" title=\"那么我们怎么才能获得黄金的最大数量呢 ? 这里就要引入动态规划来实现\"></a>那么我们怎么才能获得黄金的最大数量呢 ? 这里就要引入动态规划来实现</h4><p>动态规划就是把简单的问题转换成规模较小的子问题,再从简单的子问题自底向上一步一步递推,最终得到问题的最优解 , 这样说你可能还是云里雾里<br>其实我们算出做出每一个举动过后的结果 , 再和其它举动的结果做出比较 , 就可以计算出最好的结果 , 举个列子 : </p>\n<p>p:[5,5,3,4,3],    //金矿开采需要的工人数量<br>g:[500,400,350,300,200]//金矿储量</p>\n<p> ==第一个500金矿我们可以挖也可以不挖==</p>\n<ul>\n<li><code>挖 </code>: 黄金数量+500 ,  工人数量 - 5 </li>\n<li><pre><code>    接下来我们就用剩下的工人去挖下一个金矿 , 此时我们已经获得了500黄金\n</code></pre>\n</li>\n<li><code>不挖</code> : 黄金数量 + 0 , 工人数量 - 0</li>\n<li><pre><code>    接下来我们就直接用不变的工人数量去挖下一个金矿\n</code></pre>\n</li>\n</ul>\n<p>==到第二个400金矿的时候==</p>\n<ul>\n<li><code>挖</code> : 黄金数量+400 ,  工人数量 - 5</li>\n<li><pre><code>     此时已经没有工人 ,  要加上第一次挖的500金矿 , 最终的黄金数量是900\n</code></pre>\n</li>\n<li><code>不挖</code> : 黄金数量 + 0 , 工人数量 - 0 </li>\n<li><pre><code>    到现在为止我们的工人数量和黄金数量都没有变化\n</code></pre>\n</li>\n</ul>\n<p>==一直这样遍历下去 , 直到工人数量为  零  或者 可以挖的黄金数量为  零   , 返回我们挖出的黄金数量==<br><img src=\"https://img-blog.csdnimg.cn/102fc30f6a1b4602b77b01da7cc7a41c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"由题可知-我们创建几个变量\"><a href=\"#由题可知-我们创建几个变量\" class=\"headerlink\" title=\"由题可知 , 我们创建几个变量 :\"></a>由题可知 , 我们创建几个变量 :</h4><p> <code>w</code>:工人的数量 ,<code>n</code>:金矿的数量 ,<br> <code>gold</code>:金矿和人数之间的关系(为了之后的思路比较清晰 , 我把这两个装到一个对象里面)</p>\n<p>==例如== : gold.g[0] 和 gold.p[0] 之间的关系就是 当金矿储量为 500 时需要 5 个人挖</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w = <span class=\"number\">10</span> <span class=\"comment\">//工人的数量</span></span><br><span class=\"line\">n = <span class=\"number\">5</span>  <span class=\"comment\">//金矿的数量 </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> gold = &#123;</span><br><span class=\"line\">    \t\t<span class=\"attr\">p</span>:[<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>],\t<span class=\"comment\">//金矿开采需要的工人数量</span></span><br><span class=\"line\">    \t\t<span class=\"attr\">g</span>:[<span class=\"number\">500</span>,<span class=\"number\">400</span>,<span class=\"number\">350</span>,<span class=\"number\">300</span>,<span class=\"number\">200</span>]<span class=\"comment\">//金矿储量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一-js实现动态规划\"><a href=\"#一-js实现动态规划\" class=\"headerlink\" title=\"一 . js实现动态规划\"></a>一 . js实现动态规划</h3><p>我们还要实现状态转移方程 : </p>\n<ul>\n<li>金矿数量或者工人数量为<code>零</code>时 : <code>F(n,w) = 0</code></li>\n<li>工人的数量<code>不足以</code>挖当前的金矿时 , 去挖下一个金矿 : <code>F(n-1 , w)</code></li>\n<li>当前工人数量<code>足以</code>挖当前的金矿时 : (有两种选择)<pre><code>  - 挖: ``F(w-gold.p[n-1],n-1,gold)+gold.g[n-1]``\n  - 不挖:`` F(w,n-1,gold)``\n</code></pre>\n</li>\n<li>返回第三种情况的最大值  <code>Math.max(F(w,n-1,gold),F(w-gold.p[n-1],n-1,gold)+gold.g[n-1])</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> w = <span class=\"number\">10</span><span class=\"comment\">//工人数量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n = <span class=\"number\">5</span> <span class=\"comment\">//可选金矿数量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> gold = &#123;</span><br><span class=\"line\">    <span class=\"attr\">p</span>:[<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>],<span class=\"comment\">//金矿开采需要的工人数量</span></span><br><span class=\"line\">    <span class=\"attr\">g</span>:[<span class=\"number\">500</span>,<span class=\"number\">400</span>,<span class=\"number\">350</span>,<span class=\"number\">300</span>,<span class=\"number\">200</span>]<span class=\"comment\">//金矿储量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">F</span> = (<span class=\"params\">w,n,gold</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">//金矿没了或者是人没了都返回 0 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(w==<span class=\"number\">0</span>||n==<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当前人数不够挖当前的金矿 , 就去看看下一个金矿 , 人数不变</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(w&lt;gold.<span class=\"property\">p</span>[n-<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">F</span>(w,n-<span class=\"number\">1</span>,gold)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回挖矿或者不挖矿的最优解</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"title function_\">F</span>(w,n-<span class=\"number\">1</span>,gold),<span class=\"title function_\">F</span>(w-gold.<span class=\"property\">p</span>[n-<span class=\"number\">1</span>],n-<span class=\"number\">1</span>,gold)+gold.<span class=\"property\">g</span>[n-<span class=\"number\">1</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">F</span>(w,n,gold));</span><br></pre></td></tr></table></figure>\n<p>就这样我们计算出了每一次挖和不挖获得的黄金数量 , 得到了最大的黄金数量 , 但是这样的时间复杂度非常高O(2^n)</p>\n<h4 id=\"二-优化时间的动态规划算法-自底向上求解\"><a href=\"#二-优化时间的动态规划算法-自底向上求解\" class=\"headerlink\" title=\"二 . 优化时间的动态规划算法 ( 自底向上求解 )\"></a>二 . 优化时间的动态规划算法 ( 自底向上求解 )</h4><p>  算出第一个金矿的所有</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> w = <span class=\"number\">10</span><span class=\"comment\">//工人数量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n = <span class=\"number\">5</span> <span class=\"comment\">//可选金矿数量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> gold = &#123;</span><br><span class=\"line\">    <span class=\"attr\">p</span>:[<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>],<span class=\"comment\">//金矿开采需要的工人数量</span></span><br><span class=\"line\">    <span class=\"attr\">g</span>:[<span class=\"number\">500</span>,<span class=\"number\">400</span>,<span class=\"number\">350</span>,<span class=\"number\">300</span>,<span class=\"number\">200</span>]<span class=\"comment\">//金矿储量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写一个二维数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"title class_\">Array</span>(gold.<span class=\"property\">g</span>.<span class=\"property\">length</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"title class_\">Array</span>(w).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">getBestGoldMiningV2</span> = (<span class=\"params\">arr</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">//数组每一格都根据条件进行状态转移方程</span></span><br><span class=\"line\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//把第一行的状态方程补满</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            item.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item2,index2</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(gold.<span class=\"property\">p</span>[index]&lt;=index2+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    arr[index][index2] = gold.<span class=\"property\">g</span>[index]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        item.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item2,index2</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//人数不够就去看看上一个</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(gold.<span class=\"property\">p</span>[index]&gt;index2+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                arr[index][index2] = arr[index-<span class=\"number\">1</span>][index2]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//返回挖和不挖之间的最大值(每一行的值都可以状态转移到上一行去)</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> j = index2-gold.<span class=\"property\">p</span>[index]==-<span class=\"number\">1</span>?<span class=\"number\">0</span>:index2-gold.<span class=\"property\">p</span>[index]</span><br><span class=\"line\">            arr[index][index2] = </span><br><span class=\"line\">            <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(arr[index-<span class=\"number\">1</span>][index2],arr[index-<span class=\"number\">1</span>][j]+gold.<span class=\"property\">g</span>[index])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回最后一格</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[gold.<span class=\"property\">g</span>.<span class=\"property\">length</span>-<span class=\"number\">1</span>][w-<span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getBestGoldMiningV2</span>(arr));</span><br></pre></td></tr></table></figure>\n<p>时间没问题了, 让我们来看看空间</p>\n<h4 id=\"三-优化空间的算法\"><a href=\"#三-优化空间的算法\" class=\"headerlink\" title=\"三 . 优化空间的算法\"></a>三 . 优化空间的算法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//上面代码的时间已经是最优的了 , 但是空间仍有优化的空间</span></span><br><span class=\"line\"><span class=\"comment\">//因为我们在填写其中一行的空格的时候 , 都是根据上一行的空格来获取最大收益的 </span></span><br><span class=\"line\"><span class=\"comment\">//所以我们只需要一行数组就可以了 , 但是在计算的时候要从右往左计算 ,</span></span><br><span class=\"line\"><span class=\"comment\">//避免这一行的值把上一行的值覆盖</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = <span class=\"title class_\">Array</span>(w).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">//初始化第一行的数据</span></span><br><span class=\"line\">arr2.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(gold.<span class=\"property\">p</span>[<span class=\"number\">0</span>]&lt;=index+<span class=\"number\">1</span>)</span><br><span class=\"line\">    arr2[index] = gold.<span class=\"property\">g</span>[<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">getBestGoldMiningV3</span> = (<span class=\"params\">arr2</span>)=&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    gold.<span class=\"property\">g</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> person = gold.<span class=\"property\">p</span>[index]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">//从右边开始循环arr2</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = w-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> j = i-gold.<span class=\"property\">p</span>[index]==-<span class=\"number\">1</span>?<span class=\"number\">0</span>:i-gold.<span class=\"property\">p</span>[index]</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i+<span class=\"number\">1</span>&gt;=person)&#123;</span><br><span class=\"line\">                arr2[i] = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(arr2[i],arr2[j]+gold.<span class=\"property\">g</span>[index])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr2[w-<span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getBestGoldMiningV3</span>(arr2));</span><br></pre></td></tr></table></figure>\n<h2 id=\"又是一道动态规划的问题\"><a href=\"#又是一道动态规划的问题\" class=\"headerlink\" title=\"又是一道动态规划的问题\"></a>又是一道动态规划的问题</h2><p><img src=\"https://img-blog.csdnimg.cn/fd97efa401b54b0f8ce6f5ceccbb6553.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br>一开始直接使用的是动态规划 , 导致栈满</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在这里计算</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">path</span> = (<span class=\"params\">m,n,i,j</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">//向右或者向下走完了只能有一种走法了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i==m||j==n)<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\">//当两个都没有走完</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">path</span>(m,n,i+<span class=\"number\">1</span>,j)+<span class=\"title function_\">path</span>(m,n,i,j+<span class=\"number\">1</span>)+count</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> uniquePaths = <span class=\"keyword\">function</span>(<span class=\"params\">m, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//在这里使用path</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">path</span>(m,n,<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用记忆化搜索结合动态规划的思想</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用数组结合动态规划的思想 , 解决递归栈满的情况</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> uniquePaths = <span class=\"keyword\">function</span>(<span class=\"params\">m, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建一个数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(m).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>).<span class=\"title function_\">map</span>(<span class=\"function\">()=&gt;</span>item = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(n).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"comment\">//初始化数组 , 走到最底部或者最右边都只剩下一种走法</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span> ;i&lt;m;i++)&#123;</span><br><span class=\"line\">        arr[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j =<span class=\"number\">0</span> ;j&lt;n;j++)&#123;</span><br><span class=\"line\">        arr[<span class=\"number\">0</span>][j] = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">1</span> ;j&lt;n;j++)&#123;</span><br><span class=\"line\">            arr[i][j] = arr[i-<span class=\"number\">1</span>][j] + arr[i][j-<span class=\"number\">1</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"找出arr数组中-出现次数-为奇数次的数-有两种奇数的数\"><a href=\"#找出arr数组中-出现次数-为奇数次的数-有两种奇数的数\" class=\"headerlink\" title=\"找出arr数组中  出现次数  为奇数次的数 , 有两种奇数的数\"></a>找出arr数组中  <code>出现次数</code>  为奇数次的数 , 有两种奇数的数</h2><h2 id=\"let-arr-4-1-2-2-3-1-4-5\"><a href=\"#let-arr-4-1-2-2-3-1-4-5\" class=\"headerlink\" title=\"let arr = [4,1,2,2,3,1,4,5]\"></a>let arr = [4,1,2,2,3,1,4,5]</h2><p>//如果只有一个出现次数是奇数的数的话 , 我们只需要对整个数组进行异或运算 , 算出来的结果就是奇数<br>//如果有两个出现次数是奇数的数的话 , 我们就需要先对整个数组进行异或运算 ,<br>//根据运算结果把元素组分成两个部分 , 然后再依次进行异或运算</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\">//进行异或运算的函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">findLostNum</span> = (<span class=\"params\">arr</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = arr.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b).<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a^b</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把数组分成两个部分再进行异或运算</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">apartArr</span> = (<span class=\"params\">arr</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">findLostNum</span>(arr)==<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;测试案例不符合题意&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//先对整个数组进行异或运算</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> xor = <span class=\"title function_\">findLostNum</span>(arr).<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = xor.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">indexOf</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\">//让mark 指向数组的第一个数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> mark = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">//根据xor的结果把arr分开</span></span><br><span class=\"line\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> flag2 = item.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">charAt</span>(flag) || <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\">//找到符合条件的值就让mark++</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">1</span>==flag2)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//交换mark 和 flag2 当前指向的值</span></span><br><span class=\"line\">            [arr[mark],arr[index]]=[arr[index],arr[mark]]</span><br><span class=\"line\">            mark++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">//现在进行分组寻找</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> left_result = <span class=\"title function_\">findLostNum</span>(arr.<span class=\"title function_\">splice</span>(<span class=\"number\">0</span>,mark))</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right_result = <span class=\"title function_\">findLostNum</span>(arr)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;left_result&#125;</span> , <span class=\"subst\">$&#123;right_result&#125;</span>`</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">apartArr</span>(arr));</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"我发现用位运算可以更快并且更加准确的找到用来区分的数字-并且在区分数组的时候就进行异或运算\"><a href=\"#我发现用位运算可以更快并且更加准确的找到用来区分的数字-并且在区分数组的时候就进行异或运算\" class=\"headerlink\" title=\"我发现用位运算可以更快并且更加准确的找到用来区分的数字 , 并且在区分数组的时候就进行异或运算\"></a>我发现用位运算可以更快并且更加准确的找到用来区分的数字 , 并且在区分数组的时候就进行异或运算</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">333</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">23333</span>]</span><br><span class=\"line\"><span class=\"comment\">//进行异或运算的函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">findLostNum</span> = (<span class=\"params\">arr</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = arr.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b).<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a^b</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把数组分成两个部分再进行异或运算</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">apartArr</span> = (<span class=\"params\">arr</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">findLostNum</span>(arr)==<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;测试案例不符合题意&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//先对整个数组进行异或运算</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> xor = <span class=\"title function_\">findLostNum</span>(arr).<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//接下来用位运算来找到不同的部分</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> separator = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">0</span>==(xor&amp;separator))&#123;</span><br><span class=\"line\">        separator&lt;&lt;=<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//现在separator找到了第一个二进制中相同位置不同的数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//让mark 指向数组的第一个数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"comment\">//根据xor的结果把arr分开</span></span><br><span class=\"line\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//找到符合条件的值就让mark++</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((item&amp;separator)==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            result[<span class=\"number\">0</span>]^=item</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            result[<span class=\"number\">1</span>]^=item</span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">apartArr</span>(arr));</span><br></pre></td></tr></table></figure>\n\n<p>三数之和 , 经典的题目了 , 定下一个数 , 转换成二数之和</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//核心思想就是将三数之和转换为两数之和 , 将a+b+c=0  转换为 b+c = -a 然后利用左右指针找到符合条件的b 和 c </span></span><br><span class=\"line\"><span class=\"comment\">//在这到题里面还要注意重复的结果要跳过</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">quickSort</span> = (<span class=\"params\">arr,i,j</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&gt;=j)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = i</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mark = left </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;=j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[left]&lt;arr[i])&#123;</span><br><span class=\"line\">            mark++</span><br><span class=\"line\">            [arr[left],arr[mark]]=[arr[mark],arr[left]]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        left++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    [arr[i],arr[mark]]=[arr[mark],arr[i]]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">quickSort</span>(arr,i,mark-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"title function_\">quickSort</span>(arr,mark+<span class=\"number\">1</span>,j)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> threeSum = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums.<span class=\"property\">length</span>&lt;<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    <span class=\"comment\">//对数组进行排序(使用快排)</span></span><br><span class=\"line\">    <span class=\"title function_\">quickSort</span>(nums,<span class=\"number\">0</span>,nums.<span class=\"property\">length</span>-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;nums.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i]&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> left = i+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> right = nums.<span class=\"property\">length</span>-<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//去重</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span>&amp;&amp;nums[i]==nums[i-<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//left &lt; right就一直循环</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left&lt;right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> sum = nums[i]+nums[left]+nums[right]</span><br><span class=\"line\">            <span class=\"comment\">//找到了等于零的情况 , 一起移动</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum===<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            arr.<span class=\"title function_\">push</span>([nums[i],nums[left],nums[right]])</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//在移动左右指针的时候先对左右指针进行判断 ,相同的就跳过</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(left&lt;right&amp;&amp;nums[left]==nums[left+<span class=\"number\">1</span>])</span><br><span class=\"line\">            left++</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(left&lt;right&amp;&amp;nums[right]==nums[right+<span class=\"number\">1</span>])</span><br><span class=\"line\">            right--</span><br><span class=\"line\"></span><br><span class=\"line\">            left++</span><br><span class=\"line\">            right--</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sum&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                left++</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">            right--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> num = [-<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,-<span class=\"number\">1</span>,-<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">threeSum</span>(num));</span><br></pre></td></tr></table></figure>\n<p>最接近的三数之和</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">target</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> threeSumClosest = <span class=\"keyword\">function</span> (<span class=\"params\">nums, target</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果数组只有三个数 , 直接退出</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.<span class=\"property\">length</span> == <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">1</span>] + nums[<span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"comment\">//第一层循环定下一个数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result</span><br><span class=\"line\">    <span class=\"comment\">//排序</span></span><br><span class=\"line\">    nums.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b)</span><br><span class=\"line\">    <span class=\"comment\">//这个是最开始的和与target的差</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> dis = <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">1</span>] + nums[nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>] - target)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> left = i + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> right = nums.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用双指针来找</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">let</span> sum = nums[i] + nums[left] + nums[right]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum &gt; target) &#123;</span><br><span class=\"line\">                right--</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(target - sum) &lt;= dis) &#123;</span><br><span class=\"line\">                    result = sum</span><br><span class=\"line\">                    dis = <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(target - sum)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sum &lt; target) &#123;</span><br><span class=\"line\">                left++</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(target - sum) &lt;= dis) &#123;</span><br><span class=\"line\">                    result = sum</span><br><span class=\"line\">                    dis = <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(target - sum)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result = target</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">threeSumClosest</span>([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], <span class=\"number\">0</span>));</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":"/img/avator.jpg","excerpt":"","more":"<p>目前更新了:二分法,快排,  js创建链表,  动态规划, 异或运算,三数之和  等       </p>\n<ol>\n<li><p>==FindIndex== 找到数组中的<code>第一个</code>目标值并且返回<code>目标值的下标</code> , 没有找到就返回-1<br>判断后返回值,不用手动return</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> index = nums.<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item===target)</span><br></pre></td></tr></table></figure></li>\n<li><p>==find== 找到数组中<code>第一个</code>符合条件的<code>值</code>  , 没有找到就返回 <code>undefined</code> find对空数组不起作用</p>\n</li>\n<li><p><code>sort</code> 会改变原数组</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b) <span class=\"comment\">//升序</span></span><br><span class=\"line\">nums.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>b-a) <span class=\"comment\">//降序</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二分查找-二分详解\"><a href=\"#二分查找-二分详解\" class=\"headerlink\" title=\"二分查找 二分详解\"></a>二分查找 <a href=\"https://blog.csdn.net/qq_45978890/article/details/116094046?spm=1001.2101.3001.6650.10&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-10.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-10.pc_relevant_default&utm_relevant_index=13\">二分详解</a></h2><p>二分查找 : 适用于升序数组 , 判断条件是<code>left &lt; right </code>,不符合条件就返回-1</p>\n<ol>\n<li>我解题的时候纠结数组分别是奇数和偶数的时候中间值mid怎么取 , 但是不必纠结这个问题 , 因为除以二的时候它们都是有可能出现的 , </li>\n<li>重点是判断<code>边界问题</code> , 下面采用了<code>左闭右闭</code>的解法 , 所以判断循环的时候条件是 <code>left &lt;= right</code> , 因为<code>[left , right]</code> 是有意义的</li>\n<li>当我计算mid的时候使用了<code>mid = ( left + right ) / 2</code> , 出来的结果错误的(可能是因为left+right超过了定义变量时的大小),然后我又改变了一种写法:mid = (right-left)/2+left ,计算出来的index居然有小数!!?? 尝试了一下,在js里面<code>5/2=2.5....</code></li>\n<li>正确的写法:<code>const mid = Math.floor((right-left)/2)+left</code> //<code> 防止计算时溢出</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nums = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">89</span>,<span class=\"number\">7</span>,<span class=\"number\">21</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">63</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> target = <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用二分查找来找到 target 在 nums 中对应值的下标</span></span><br><span class=\"line\"><span class=\"comment\">//查找的条件是查找范围不为空</span></span><br><span class=\"line\">nums.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nums)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> search = <span class=\"keyword\">function</span>(<span class=\"params\">nums,target</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = nums.<span class=\"property\">length</span>-<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//每次判断之前都重置 mid</span></span><br><span class=\"line\">        <span class=\"comment\">// const mid = (left+right)/2</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> mid = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((right-left)/<span class=\"number\">2</span>)+left</span><br><span class=\"line\">        <span class=\"keyword\">const</span> num = nums[mid]</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num === target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target &gt; num)&#123;</span><br><span class=\"line\">            left = mid+<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            right = mid-<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">search</span>(nums,target)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n这道异曲同工之妙,就是缩小空间</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。</span><br><span class=\"line\">如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</span><br><span class=\"line\">请必须使用时间复杂度为 <span class=\"title function_\">O</span>(log n) 的算法。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> searchInsert = <span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//法一</span></span><br><span class=\"line\">    <span class=\"comment\">/* let index = nums.findIndex(item=&gt;item==target)</span></span><br><span class=\"line\"><span class=\"comment\">    if(index != -1)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return index</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        let index2 = nums.findIndex(item=&gt;item&gt;target)</span></span><br><span class=\"line\"><span class=\"comment\">        if(index2==-1)return nums.length</span></span><br><span class=\"line\"><span class=\"comment\">        else return index2</span></span><br><span class=\"line\"><span class=\"comment\">    &#125; */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//二分法</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = nums.<span class=\"property\">length</span>-<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((right-left)/<span class=\"number\">2</span>)+left</span><br><span class=\"line\">        <span class=\"keyword\">let</span> num = nums[mid]</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target == num)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target &gt; num)&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span> </span><br><span class=\"line\">           / /区间缩小到 left 和 right 相等的时候,从这里就出去了,</span><br><span class=\"line\">           <span class=\"regexp\">/ /</span>此时left 在 原来 left = right 那个值的左边一位 , </span><br><span class=\"line\">           <span class=\"regexp\">/ /</span>刚好就是找不到值要插入的index</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"快排-双边循环-递归\"><a href=\"#快排-双边循环-递归\" class=\"headerlink\" title=\"快排(双边循环 , 递归)\"></a>快排(双边循环 , 递归)</h2><p>每次都将最左边的值作为<code>基准值</code> , 然后从最左边的left 和 最右边的 right 开始查找 , 从right开始  , right找的是比基准值小的 , 找到之后left 就开始找  , 找的是比基准值大的 , 找完一轮后交换left 和right 的值, 最后left 和right 重合的时候 , <code>交换基准值和left 的值</code>  ,然后使用递归 , 分别排序基准值左边的 和 右边的 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = [<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myquickSort</span>(<span class=\"params\">num,left,right</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = left</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left&gt;=right)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;right)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//找到符合的right</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(right&gt;left&amp;&amp;num[right]&gt;=num[flag])</span><br><span class=\"line\">        right--</span><br><span class=\"line\">        <span class=\"comment\">//找到符合的left</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(right&gt;left&amp;&amp;num[left]&lt;=num[flag])</span><br><span class=\"line\">        left++</span><br><span class=\"line\">        <span class=\"comment\">//交换两者的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left&lt;right)</span><br><span class=\"line\">        [num[right],num[left]] = [num[left],num[right]] </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//交换基准值和rightleft重合的值</span></span><br><span class=\"line\">    [num[left],num[flag]] = [num[flag],num[left]] </span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">jisuan</span> (num , left , right)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left&gt;=right)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = <span class=\"title function_\">myquickSort</span>(num,left,right)</span><br><span class=\"line\">    <span class=\"title function_\">jisuan</span>(num,left,flag-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"title function_\">jisuan</span>(num,flag+<span class=\"number\">1</span>,right)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">jisuan</span>(num,<span class=\"number\">0</span>,num.<span class=\"property\">length</span>-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"快排-单边循环-递归\"><a href=\"#快排-单边循环-递归\" class=\"headerlink\" title=\"快排(单边循环 递归)\"></a>快排(单边循环 递归)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = [<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//单边循环</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">quickSort</span> = (<span class=\"params\">num, left, right</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = left</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mark = left</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;=right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num[left]&lt;num[flag])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这个时候mark就要往右移动一位 , 因为找到了一个小于flag 的数</span></span><br><span class=\"line\">            mark++</span><br><span class=\"line\">            [num[left],num[mark]] = [num[mark],num[left]]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        left++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//交换基准数 和 mark 的值</span></span><br><span class=\"line\">    [num[flag],num[mark]] = [num[mark],num[flag]]</span><br><span class=\"line\">    <span class=\"comment\">//最后要返回基准数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mark</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">jisuan</span> = (<span class=\"params\">num, left, right</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//既然是递归 , 就要有结束条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left&gt;=right)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = <span class=\"title function_\">quickSort</span>(num, left, right)</span><br><span class=\"line\">    <span class=\"title function_\">jisuan</span>(num, left, flag - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"title function_\">jisuan</span>(num, flag + <span class=\"number\">1</span>, right)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">jisuan</span>(num, <span class=\"number\">0</span>, num.<span class=\"property\">length</span> - <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快排-非递归\"><a href=\"#快排-非递归\" class=\"headerlink\" title=\"快排 (非递归)\"></a>快排 (非递归)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当数据量很大的时候 , 递归快排会造成栈溢出 , 为了解决这个问题 , 我们使用js数组 来模拟栈 , </span></span><br><span class=\"line\"><span class=\"comment\">//将待排序的[left,right]保存到数组中 , 循环取出进行快排 </span></span><br><span class=\"line\"><span class=\"comment\">// let num = [4, 7, 3, 5, 6, 2, 8, 1]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"comment\">//非递归实现快排</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">quickSort</span> = (<span class=\"params\">num, left, right</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = left</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mark = left</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num[left] &lt; num[flag]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这个时候mark就要往右移动一位 , 因为找到了一个小于flag 的数</span></span><br><span class=\"line\">            mark++</span><br><span class=\"line\">            [num[left], num[mark]] = [num[mark], num[left]]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        left++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//交换基准数 和 mark 的值</span></span><br><span class=\"line\">    [num[flag], num[mark]] = [num[mark], num[flag]]</span><br><span class=\"line\">    <span class=\"comment\">//最后要返回基准数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mark</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用非递归的方式进行快排</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">jisuan</span> = (<span class=\"params\">num,left,right</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = [[left,right]]</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(list.<span class=\"property\">length</span>!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> now = list.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now[<span class=\"number\">0</span>]&gt;=now[<span class=\"number\">1</span>])</span><br><span class=\"line\">         <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> flag = <span class=\"title function_\">quickSort</span>(num,now[<span class=\"number\">0</span>],now[<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"comment\">//flag-1 和 flag+1 避免了类似[1,3,2,5,9,6,8,7]这样flag一直卡在0的情况</span></span><br><span class=\"line\">        list.<span class=\"title function_\">push</span>([now[<span class=\"number\">0</span>],flag-<span class=\"number\">1</span>])</span><br><span class=\"line\">        list.<span class=\"title function_\">push</span>([flag+<span class=\"number\">1</span>,now[<span class=\"number\">1</span>]])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">jisuan</span>(num,<span class=\"number\">0</span>,num.<span class=\"property\">length</span>-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"js-实现链表-并且判断链表是否循环\"><a href=\"#js-实现链表-并且判断链表是否循环\" class=\"headerlink\" title=\"js 实现链表 , 并且判断链表是否循环\"></a>js 实现链表 , 并且判断链表是否循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用js来实现一个链表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造节点</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = data</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建链表</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedPropotype</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//构造节点</span></span><br><span class=\"line\">    <span class=\"title function_\">create</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = node</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> current = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (current.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">                current = current.<span class=\"property\">next</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            current.<span class=\"property\">next</span> = node</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除节点</span></span><br><span class=\"line\">    <span class=\"title function_\">deletenode</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = p</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">            k = p</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">            len++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;删除超出范围&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> q = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> l = q</span><br><span class=\"line\">        <span class=\"comment\">//删除头节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> q.<span class=\"property\">data</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除中间节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index &lt; len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (index) &#123;</span><br><span class=\"line\">                l = q</span><br><span class=\"line\">                q = q.<span class=\"property\">next</span></span><br><span class=\"line\">                index--</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> deletenum = q.<span class=\"property\">data</span></span><br><span class=\"line\">            l.<span class=\"property\">next</span> = q.<span class=\"property\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> deletenum</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除尾节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            k.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> p</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查找节点</span></span><br><span class=\"line\">    <span class=\"title function_\">searchnode</span>(<span class=\"params\">index</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = p</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">            k = p</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">            len++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;查找超出范围&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index)&#123;</span><br><span class=\"line\">            index--</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改节点</span></span><br><span class=\"line\">    <span class=\"title function_\">editnode</span>(<span class=\"params\">index,data</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = p</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">            k = p</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">            len++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;修改超出范围&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index)&#123;</span><br><span class=\"line\">            index--</span><br><span class=\"line\">            p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.<span class=\"property\">data</span> = data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> linknode = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedPropotype</span>()</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\">linknode.<span class=\"title function_\">create</span>(<span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下面三部将链表改造为循环链表</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> C = linknode.<span class=\"title function_\">searchnode</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> G = linknode.<span class=\"title function_\">searchnode</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\">G.<span class=\"property\">next</span> = C</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用快慢指针来判断有没有环</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">isCircle</span> = (<span class=\"params\">link</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = link.<span class=\"property\">head</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> q = link.<span class=\"property\">head</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//快指针走完就没有必要再进行判断了</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q&amp;&amp;q.<span class=\"property\">next</span>)&#123;</span><br><span class=\"line\">        p = p.<span class=\"property\">next</span></span><br><span class=\"line\">        q = q.<span class=\"property\">next</span>.<span class=\"property\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p === q)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;此链表循环&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;此链表不循环&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">isCircle</span>(linknode)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最小栈的实现\"><a href=\"#最小栈的实现\" class=\"headerlink\" title=\"最小栈的实现\"></a>最小栈的实现</h2><h3 id=\"设计一个栈-A-让出栈-入栈-输出栈内的最小值的时间复杂度都是O-1\"><a href=\"#设计一个栈-A-让出栈-入栈-输出栈内的最小值的时间复杂度都是O-1\" class=\"headerlink\" title=\"设计一个栈 A, 让出栈 , 入栈 , 输出栈内的最小值的时间复杂度都是O(1)\"></a>设计一个栈 A, 让出栈 , 入栈 , 输出栈内的最小值的时间复杂度都是O(1)</h3><h4 id=\"思路-再设计一个栈-B-存入A第一个元素-每次A入栈的时候-跟B栈顶元素作比较-如果入栈元素小于B栈顶元素-则B也入栈此元素-A出栈的时候-跟B栈顶元素做比较-如果相等-B出栈-这样-B栈顶永远都是A中的最小元素\"><a href=\"#思路-再设计一个栈-B-存入A第一个元素-每次A入栈的时候-跟B栈顶元素作比较-如果入栈元素小于B栈顶元素-则B也入栈此元素-A出栈的时候-跟B栈顶元素做比较-如果相等-B出栈-这样-B栈顶永远都是A中的最小元素\" class=\"headerlink\" title=\"思路:  再设计一个栈 B 存入A第一个元素 , 每次A入栈的时候 , 跟B栈顶元素作比较 , 如果入栈元素小于B栈顶元素 , 则B也入栈此元素 , A出栈的时候 , 跟B栈顶元素做比较 , 如果相等 , B出栈,这样 ,B栈顶永远都是A中的最小元素\"></a>思路:  再设计一个栈 B 存入A第一个元素 , 每次A入栈的时候 , 跟B栈顶元素作比较 , 如果入栈元素小于B栈顶元素 , 则B也入栈此元素 , A出栈的时候 , 跟B栈顶元素做比较 , 如果相等 , B出栈,这样 ,B栈顶永远都是A中的最小元素</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设计一个栈 , 让出栈 , 入栈 , 输出栈内的最小值的时间复杂度都是O(1)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> len = arr.<span class=\"property\">length</span> </span><br><span class=\"line\"><span class=\"keyword\">let</span> len1 = arr.<span class=\"property\">length</span> </span><br><span class=\"line\"><span class=\"keyword\">var</span> min</span><br><span class=\"line\"><span class=\"keyword\">let</span> A = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> B = []</span><br><span class=\"line\"><span class=\"comment\">//让元素都入栈 , 栈A和栈B都造好了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(len)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == len1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        min = arr[<span class=\"number\">0</span>]</span><br><span class=\"line\">        B.<span class=\"title function_\">push</span>(min)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = arr.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">    A.<span class=\"title function_\">push</span>(num)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//每一次进栈的时候都和min作比较 , 小的放入栈B</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num&lt;B[B.<span class=\"property\">length</span>-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">        B.<span class=\"title function_\">push</span>(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    len--</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//出栈 , 出栈的与 B 最小的相等 B也出栈</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">deleteA</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = A.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num==B[B.<span class=\"property\">length</span>-<span class=\"number\">1</span>])</span><br><span class=\"line\">    B.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//入栈 , 入栈的与 B 最小的相等 B也入栈</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">pushA</span> = (<span class=\"params\">data</span>)=&gt;&#123;</span><br><span class=\"line\">    A.<span class=\"title function_\">push</span>(data)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(data&lt;B[B.<span class=\"property\">length</span>-<span class=\"number\">1</span>])</span><br><span class=\"line\">    B.<span class=\"title function_\">push</span>(data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出栈A中最小的值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">pushmin</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> B[B.<span class=\"property\">length</span>-<span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(A);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">pushmin</span>());<span class=\"comment\">//输出A中最小的</span></span><br><span class=\"line\"><span class=\"title function_\">pushA</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(A);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">pushmin</span>());<span class=\"comment\">//输出A中最小的</span></span><br><span class=\"line\"><span class=\"title function_\">deleteA</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(A);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">pushmin</span>());<span class=\"comment\">//输出A中最小的</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"js实现动态规划-优化时间-优化空间\"><a href=\"#js实现动态规划-优化时间-优化空间\" class=\"headerlink\" title=\"js实现动态规划 , 优化时间 , 优化空间\"></a>js实现动态规划 , 优化时间 , 优化空间</h2><p><code>详情见小灰的算法之旅 , 以下是我个人的见解</code><br>==题目==:<br>很久很久以前，有一位国王拥有5座金矿，每座金矿的黄金储量不同，<br>需要参与挖掘的工人人数也不同。例如有的金矿储量是500kg黄金，需 要5个工人来挖掘；有的金矿储量是200kg黄金，需要3个工人来挖 掘…… 如果参与挖矿的工人的总数是10。每座金矿要么全挖，要么不挖，不能 派出一半人挖取一半的金矿。要求用程序求出，要想得到尽可能多的黄金，应该选择挖取哪几座金矿？<br><img src=\"https://img-blog.csdnimg.cn/2a2fc6bff4e64bb18757836c2797a5fc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"一开始的思路\"><a href=\"#一开始的思路\" class=\"headerlink\" title=\"一开始的思路:\"></a>一开始的思路:</h3><p>首先我们想到的是 : 求出每个金矿的性价比 , 从高到低依次挖出金矿<br>挖矿的性价比 : 350/3 &gt; 500/5 &gt;  200/3=300/4=400/5<br> 那么我们<code>十个人</code> </p>\n<ul>\n<li>先用<code> 3 个人挖 350</code> 的金矿 , </li>\n<li>再用 <code>5 个人去挖 500 </code>的金矿 , </li>\n<li>最后剩下<code> 2 个人</code>不能再挖矿  </li>\n<li>此时我们的黄金数量是 <code>850 </code></li>\n</ul>\n<h4 id=\"这是否就是十个人能挖的最大黄金数量了呢-答案不是\"><a href=\"#这是否就是十个人能挖的最大黄金数量了呢-答案不是\" class=\"headerlink\" title=\"这是否就是十个人能挖的最大黄金数量了呢 ? 答案不是\"></a>这是否就是十个人能挖的最大黄金数量了呢 ? 答案不是</h4><p>因为我们 用 5个人 去挖 500 的金矿 , 再用5个人去挖400的金矿 , 此时十个人刚好用完 , 并且黄金的数量是<code>900</code></p>\n<h4 id=\"那么我们怎么才能获得黄金的最大数量呢-这里就要引入动态规划来实现\"><a href=\"#那么我们怎么才能获得黄金的最大数量呢-这里就要引入动态规划来实现\" class=\"headerlink\" title=\"那么我们怎么才能获得黄金的最大数量呢 ? 这里就要引入动态规划来实现\"></a>那么我们怎么才能获得黄金的最大数量呢 ? 这里就要引入动态规划来实现</h4><p>动态规划就是把简单的问题转换成规模较小的子问题,再从简单的子问题自底向上一步一步递推,最终得到问题的最优解 , 这样说你可能还是云里雾里<br>其实我们算出做出每一个举动过后的结果 , 再和其它举动的结果做出比较 , 就可以计算出最好的结果 , 举个列子 : </p>\n<p>p:[5,5,3,4,3],    //金矿开采需要的工人数量<br>g:[500,400,350,300,200]//金矿储量</p>\n<p> ==第一个500金矿我们可以挖也可以不挖==</p>\n<ul>\n<li><code>挖 </code>: 黄金数量+500 ,  工人数量 - 5 </li>\n<li><pre><code>    接下来我们就用剩下的工人去挖下一个金矿 , 此时我们已经获得了500黄金\n</code></pre>\n</li>\n<li><code>不挖</code> : 黄金数量 + 0 , 工人数量 - 0</li>\n<li><pre><code>    接下来我们就直接用不变的工人数量去挖下一个金矿\n</code></pre>\n</li>\n</ul>\n<p>==到第二个400金矿的时候==</p>\n<ul>\n<li><code>挖</code> : 黄金数量+400 ,  工人数量 - 5</li>\n<li><pre><code>     此时已经没有工人 ,  要加上第一次挖的500金矿 , 最终的黄金数量是900\n</code></pre>\n</li>\n<li><code>不挖</code> : 黄金数量 + 0 , 工人数量 - 0 </li>\n<li><pre><code>    到现在为止我们的工人数量和黄金数量都没有变化\n</code></pre>\n</li>\n</ul>\n<p>==一直这样遍历下去 , 直到工人数量为  零  或者 可以挖的黄金数量为  零   , 返回我们挖出的黄金数量==<br><img src=\"https://img-blog.csdnimg.cn/102fc30f6a1b4602b77b01da7cc7a41c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"由题可知-我们创建几个变量\"><a href=\"#由题可知-我们创建几个变量\" class=\"headerlink\" title=\"由题可知 , 我们创建几个变量 :\"></a>由题可知 , 我们创建几个变量 :</h4><p> <code>w</code>:工人的数量 ,<code>n</code>:金矿的数量 ,<br> <code>gold</code>:金矿和人数之间的关系(为了之后的思路比较清晰 , 我把这两个装到一个对象里面)</p>\n<p>==例如== : gold.g[0] 和 gold.p[0] 之间的关系就是 当金矿储量为 500 时需要 5 个人挖</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w = <span class=\"number\">10</span> <span class=\"comment\">//工人的数量</span></span><br><span class=\"line\">n = <span class=\"number\">5</span>  <span class=\"comment\">//金矿的数量 </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> gold = &#123;</span><br><span class=\"line\">    \t\t<span class=\"attr\">p</span>:[<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>],\t<span class=\"comment\">//金矿开采需要的工人数量</span></span><br><span class=\"line\">    \t\t<span class=\"attr\">g</span>:[<span class=\"number\">500</span>,<span class=\"number\">400</span>,<span class=\"number\">350</span>,<span class=\"number\">300</span>,<span class=\"number\">200</span>]<span class=\"comment\">//金矿储量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一-js实现动态规划\"><a href=\"#一-js实现动态规划\" class=\"headerlink\" title=\"一 . js实现动态规划\"></a>一 . js实现动态规划</h3><p>我们还要实现状态转移方程 : </p>\n<ul>\n<li>金矿数量或者工人数量为<code>零</code>时 : <code>F(n,w) = 0</code></li>\n<li>工人的数量<code>不足以</code>挖当前的金矿时 , 去挖下一个金矿 : <code>F(n-1 , w)</code></li>\n<li>当前工人数量<code>足以</code>挖当前的金矿时 : (有两种选择)<pre><code>  - 挖: ``F(w-gold.p[n-1],n-1,gold)+gold.g[n-1]``\n  - 不挖:`` F(w,n-1,gold)``\n</code></pre>\n</li>\n<li>返回第三种情况的最大值  <code>Math.max(F(w,n-1,gold),F(w-gold.p[n-1],n-1,gold)+gold.g[n-1])</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> w = <span class=\"number\">10</span><span class=\"comment\">//工人数量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n = <span class=\"number\">5</span> <span class=\"comment\">//可选金矿数量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> gold = &#123;</span><br><span class=\"line\">    <span class=\"attr\">p</span>:[<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>],<span class=\"comment\">//金矿开采需要的工人数量</span></span><br><span class=\"line\">    <span class=\"attr\">g</span>:[<span class=\"number\">500</span>,<span class=\"number\">400</span>,<span class=\"number\">350</span>,<span class=\"number\">300</span>,<span class=\"number\">200</span>]<span class=\"comment\">//金矿储量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">F</span> = (<span class=\"params\">w,n,gold</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">//金矿没了或者是人没了都返回 0 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(w==<span class=\"number\">0</span>||n==<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当前人数不够挖当前的金矿 , 就去看看下一个金矿 , 人数不变</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(w&lt;gold.<span class=\"property\">p</span>[n-<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">F</span>(w,n-<span class=\"number\">1</span>,gold)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回挖矿或者不挖矿的最优解</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"title function_\">F</span>(w,n-<span class=\"number\">1</span>,gold),<span class=\"title function_\">F</span>(w-gold.<span class=\"property\">p</span>[n-<span class=\"number\">1</span>],n-<span class=\"number\">1</span>,gold)+gold.<span class=\"property\">g</span>[n-<span class=\"number\">1</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">F</span>(w,n,gold));</span><br></pre></td></tr></table></figure>\n<p>就这样我们计算出了每一次挖和不挖获得的黄金数量 , 得到了最大的黄金数量 , 但是这样的时间复杂度非常高O(2^n)</p>\n<h4 id=\"二-优化时间的动态规划算法-自底向上求解\"><a href=\"#二-优化时间的动态规划算法-自底向上求解\" class=\"headerlink\" title=\"二 . 优化时间的动态规划算法 ( 自底向上求解 )\"></a>二 . 优化时间的动态规划算法 ( 自底向上求解 )</h4><p>  算出第一个金矿的所有</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> w = <span class=\"number\">10</span><span class=\"comment\">//工人数量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n = <span class=\"number\">5</span> <span class=\"comment\">//可选金矿数量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> gold = &#123;</span><br><span class=\"line\">    <span class=\"attr\">p</span>:[<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>],<span class=\"comment\">//金矿开采需要的工人数量</span></span><br><span class=\"line\">    <span class=\"attr\">g</span>:[<span class=\"number\">500</span>,<span class=\"number\">400</span>,<span class=\"number\">350</span>,<span class=\"number\">300</span>,<span class=\"number\">200</span>]<span class=\"comment\">//金矿储量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写一个二维数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"title class_\">Array</span>(gold.<span class=\"property\">g</span>.<span class=\"property\">length</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"title class_\">Array</span>(w).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">getBestGoldMiningV2</span> = (<span class=\"params\">arr</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">//数组每一格都根据条件进行状态转移方程</span></span><br><span class=\"line\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//把第一行的状态方程补满</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            item.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item2,index2</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(gold.<span class=\"property\">p</span>[index]&lt;=index2+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    arr[index][index2] = gold.<span class=\"property\">g</span>[index]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        item.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item2,index2</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//人数不够就去看看上一个</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(gold.<span class=\"property\">p</span>[index]&gt;index2+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                arr[index][index2] = arr[index-<span class=\"number\">1</span>][index2]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//返回挖和不挖之间的最大值(每一行的值都可以状态转移到上一行去)</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> j = index2-gold.<span class=\"property\">p</span>[index]==-<span class=\"number\">1</span>?<span class=\"number\">0</span>:index2-gold.<span class=\"property\">p</span>[index]</span><br><span class=\"line\">            arr[index][index2] = </span><br><span class=\"line\">            <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(arr[index-<span class=\"number\">1</span>][index2],arr[index-<span class=\"number\">1</span>][j]+gold.<span class=\"property\">g</span>[index])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回最后一格</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[gold.<span class=\"property\">g</span>.<span class=\"property\">length</span>-<span class=\"number\">1</span>][w-<span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getBestGoldMiningV2</span>(arr));</span><br></pre></td></tr></table></figure>\n<p>时间没问题了, 让我们来看看空间</p>\n<h4 id=\"三-优化空间的算法\"><a href=\"#三-优化空间的算法\" class=\"headerlink\" title=\"三 . 优化空间的算法\"></a>三 . 优化空间的算法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//上面代码的时间已经是最优的了 , 但是空间仍有优化的空间</span></span><br><span class=\"line\"><span class=\"comment\">//因为我们在填写其中一行的空格的时候 , 都是根据上一行的空格来获取最大收益的 </span></span><br><span class=\"line\"><span class=\"comment\">//所以我们只需要一行数组就可以了 , 但是在计算的时候要从右往左计算 ,</span></span><br><span class=\"line\"><span class=\"comment\">//避免这一行的值把上一行的值覆盖</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = <span class=\"title class_\">Array</span>(w).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">//初始化第一行的数据</span></span><br><span class=\"line\">arr2.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(gold.<span class=\"property\">p</span>[<span class=\"number\">0</span>]&lt;=index+<span class=\"number\">1</span>)</span><br><span class=\"line\">    arr2[index] = gold.<span class=\"property\">g</span>[<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">getBestGoldMiningV3</span> = (<span class=\"params\">arr2</span>)=&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    gold.<span class=\"property\">g</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> person = gold.<span class=\"property\">p</span>[index]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">//从右边开始循环arr2</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = w-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> j = i-gold.<span class=\"property\">p</span>[index]==-<span class=\"number\">1</span>?<span class=\"number\">0</span>:i-gold.<span class=\"property\">p</span>[index]</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i+<span class=\"number\">1</span>&gt;=person)&#123;</span><br><span class=\"line\">                arr2[i] = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(arr2[i],arr2[j]+gold.<span class=\"property\">g</span>[index])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr2[w-<span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getBestGoldMiningV3</span>(arr2));</span><br></pre></td></tr></table></figure>\n<h2 id=\"又是一道动态规划的问题\"><a href=\"#又是一道动态规划的问题\" class=\"headerlink\" title=\"又是一道动态规划的问题\"></a>又是一道动态规划的问题</h2><p><img src=\"https://img-blog.csdnimg.cn/fd97efa401b54b0f8ce6f5ceccbb6553.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br>一开始直接使用的是动态规划 , 导致栈满</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在这里计算</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">path</span> = (<span class=\"params\">m,n,i,j</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">//向右或者向下走完了只能有一种走法了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i==m||j==n)<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\">//当两个都没有走完</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">path</span>(m,n,i+<span class=\"number\">1</span>,j)+<span class=\"title function_\">path</span>(m,n,i,j+<span class=\"number\">1</span>)+count</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> uniquePaths = <span class=\"keyword\">function</span>(<span class=\"params\">m, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//在这里使用path</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">path</span>(m,n,<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用记忆化搜索结合动态规划的思想</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用数组结合动态规划的思想 , 解决递归栈满的情况</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> uniquePaths = <span class=\"keyword\">function</span>(<span class=\"params\">m, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建一个数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(m).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>).<span class=\"title function_\">map</span>(<span class=\"function\">()=&gt;</span>item = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(n).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"comment\">//初始化数组 , 走到最底部或者最右边都只剩下一种走法</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span> ;i&lt;m;i++)&#123;</span><br><span class=\"line\">        arr[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j =<span class=\"number\">0</span> ;j&lt;n;j++)&#123;</span><br><span class=\"line\">        arr[<span class=\"number\">0</span>][j] = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">1</span> ;j&lt;n;j++)&#123;</span><br><span class=\"line\">            arr[i][j] = arr[i-<span class=\"number\">1</span>][j] + arr[i][j-<span class=\"number\">1</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"找出arr数组中-出现次数-为奇数次的数-有两种奇数的数\"><a href=\"#找出arr数组中-出现次数-为奇数次的数-有两种奇数的数\" class=\"headerlink\" title=\"找出arr数组中  出现次数  为奇数次的数 , 有两种奇数的数\"></a>找出arr数组中  <code>出现次数</code>  为奇数次的数 , 有两种奇数的数</h2><h2 id=\"let-arr-4-1-2-2-3-1-4-5\"><a href=\"#let-arr-4-1-2-2-3-1-4-5\" class=\"headerlink\" title=\"let arr = [4,1,2,2,3,1,4,5]\"></a>let arr = [4,1,2,2,3,1,4,5]</h2><p>//如果只有一个出现次数是奇数的数的话 , 我们只需要对整个数组进行异或运算 , 算出来的结果就是奇数<br>//如果有两个出现次数是奇数的数的话 , 我们就需要先对整个数组进行异或运算 ,<br>//根据运算结果把元素组分成两个部分 , 然后再依次进行异或运算</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\">//进行异或运算的函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">findLostNum</span> = (<span class=\"params\">arr</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = arr.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b).<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a^b</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把数组分成两个部分再进行异或运算</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">apartArr</span> = (<span class=\"params\">arr</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">findLostNum</span>(arr)==<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;测试案例不符合题意&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//先对整个数组进行异或运算</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> xor = <span class=\"title function_\">findLostNum</span>(arr).<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = xor.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">indexOf</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\">//让mark 指向数组的第一个数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> mark = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">//根据xor的结果把arr分开</span></span><br><span class=\"line\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> flag2 = item.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">charAt</span>(flag) || <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\">//找到符合条件的值就让mark++</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">1</span>==flag2)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//交换mark 和 flag2 当前指向的值</span></span><br><span class=\"line\">            [arr[mark],arr[index]]=[arr[index],arr[mark]]</span><br><span class=\"line\">            mark++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">//现在进行分组寻找</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> left_result = <span class=\"title function_\">findLostNum</span>(arr.<span class=\"title function_\">splice</span>(<span class=\"number\">0</span>,mark))</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right_result = <span class=\"title function_\">findLostNum</span>(arr)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;left_result&#125;</span> , <span class=\"subst\">$&#123;right_result&#125;</span>`</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">apartArr</span>(arr));</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"我发现用位运算可以更快并且更加准确的找到用来区分的数字-并且在区分数组的时候就进行异或运算\"><a href=\"#我发现用位运算可以更快并且更加准确的找到用来区分的数字-并且在区分数组的时候就进行异或运算\" class=\"headerlink\" title=\"我发现用位运算可以更快并且更加准确的找到用来区分的数字 , 并且在区分数组的时候就进行异或运算\"></a>我发现用位运算可以更快并且更加准确的找到用来区分的数字 , 并且在区分数组的时候就进行异或运算</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">333</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">23333</span>]</span><br><span class=\"line\"><span class=\"comment\">//进行异或运算的函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">findLostNum</span> = (<span class=\"params\">arr</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = arr.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b).<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a^b</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把数组分成两个部分再进行异或运算</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">apartArr</span> = (<span class=\"params\">arr</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">findLostNum</span>(arr)==<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;测试案例不符合题意&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//先对整个数组进行异或运算</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> xor = <span class=\"title function_\">findLostNum</span>(arr).<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//接下来用位运算来找到不同的部分</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> separator = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">0</span>==(xor&amp;separator))&#123;</span><br><span class=\"line\">        separator&lt;&lt;=<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//现在separator找到了第一个二进制中相同位置不同的数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//让mark 指向数组的第一个数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"comment\">//根据xor的结果把arr分开</span></span><br><span class=\"line\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//找到符合条件的值就让mark++</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((item&amp;separator)==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            result[<span class=\"number\">0</span>]^=item</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            result[<span class=\"number\">1</span>]^=item</span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">apartArr</span>(arr));</span><br></pre></td></tr></table></figure>\n\n<p>三数之和 , 经典的题目了 , 定下一个数 , 转换成二数之和</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//核心思想就是将三数之和转换为两数之和 , 将a+b+c=0  转换为 b+c = -a 然后利用左右指针找到符合条件的b 和 c </span></span><br><span class=\"line\"><span class=\"comment\">//在这到题里面还要注意重复的结果要跳过</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">quickSort</span> = (<span class=\"params\">arr,i,j</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&gt;=j)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = i</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mark = left </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;=j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[left]&lt;arr[i])&#123;</span><br><span class=\"line\">            mark++</span><br><span class=\"line\">            [arr[left],arr[mark]]=[arr[mark],arr[left]]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        left++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    [arr[i],arr[mark]]=[arr[mark],arr[i]]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">quickSort</span>(arr,i,mark-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"title function_\">quickSort</span>(arr,mark+<span class=\"number\">1</span>,j)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> threeSum = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums.<span class=\"property\">length</span>&lt;<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    <span class=\"comment\">//对数组进行排序(使用快排)</span></span><br><span class=\"line\">    <span class=\"title function_\">quickSort</span>(nums,<span class=\"number\">0</span>,nums.<span class=\"property\">length</span>-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;nums.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i]&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> left = i+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> right = nums.<span class=\"property\">length</span>-<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//去重</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span>&amp;&amp;nums[i]==nums[i-<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//left &lt; right就一直循环</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left&lt;right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> sum = nums[i]+nums[left]+nums[right]</span><br><span class=\"line\">            <span class=\"comment\">//找到了等于零的情况 , 一起移动</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum===<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            arr.<span class=\"title function_\">push</span>([nums[i],nums[left],nums[right]])</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//在移动左右指针的时候先对左右指针进行判断 ,相同的就跳过</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(left&lt;right&amp;&amp;nums[left]==nums[left+<span class=\"number\">1</span>])</span><br><span class=\"line\">            left++</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(left&lt;right&amp;&amp;nums[right]==nums[right+<span class=\"number\">1</span>])</span><br><span class=\"line\">            right--</span><br><span class=\"line\"></span><br><span class=\"line\">            left++</span><br><span class=\"line\">            right--</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sum&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                left++</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">            right--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> num = [-<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,-<span class=\"number\">1</span>,-<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">threeSum</span>(num));</span><br></pre></td></tr></table></figure>\n<p>最接近的三数之和</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">target</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> threeSumClosest = <span class=\"keyword\">function</span> (<span class=\"params\">nums, target</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果数组只有三个数 , 直接退出</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.<span class=\"property\">length</span> == <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">1</span>] + nums[<span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"comment\">//第一层循环定下一个数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result</span><br><span class=\"line\">    <span class=\"comment\">//排序</span></span><br><span class=\"line\">    nums.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b)</span><br><span class=\"line\">    <span class=\"comment\">//这个是最开始的和与target的差</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> dis = <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">1</span>] + nums[nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>] - target)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> left = i + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> right = nums.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用双指针来找</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">let</span> sum = nums[i] + nums[left] + nums[right]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum &gt; target) &#123;</span><br><span class=\"line\">                right--</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(target - sum) &lt;= dis) &#123;</span><br><span class=\"line\">                    result = sum</span><br><span class=\"line\">                    dis = <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(target - sum)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sum &lt; target) &#123;</span><br><span class=\"line\">                left++</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(target - sum) &lt;= dis) &#123;</span><br><span class=\"line\">                    result = sum</span><br><span class=\"line\">                    dis = <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(target - sum)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result = target</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">threeSumClosest</span>([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], <span class=\"number\">0</span>));</span><br></pre></td></tr></table></figure>"},{"title":"初识Echarts","_content":"\n### 安装echarts\n\n```javascript\nnpm install echarts --save\n```\n### 在mian.js中引入(全局引入)\n```javascript\nimport * as echarts from \"echarts\"\nVue.prototype.$echarts = echarts\n```\n### 开始使用echarts\n1. 定义有``宽度和高度``的父容器\n2. 初始化``echarts实例``\n3. 指定配置项和数据\n4. 将配置项设置给echarts实例对象 绘制图表\n\n```javascript\n1. 定义有宽度和高度的父容器\n<div id=\"main\" class=\"main_container\"></div>\n\n2. 初始化echarts实例\nvar mycharts = this.$echarts.init(document.getElementById(\"main\"))\n\n3. 指定配置项和数据\nconst option={}\n\n4. 将配置项设置给echarts实例对象 绘制图表\nmycharts.setOption(option)\n```\n### 基础配置(摘抄自黑马教程)\n- ``series``\n\t- 系列列表 , 每个系列通过``type``决定自己的图标类型 , 可以指定图标数据 , 可以多个图标重叠\n- ``xAxis``\n\t- boundaryGap: 坐标轴两边的留白策略true , 这时候刻度只是作为分割线 , 标签和数据点都会在两个刻度之间的带(band)中间\n- ``yAxis`` : 直角 grid 中的 y 轴\n-`` grid`` : 直角坐标系内绘图网络\n- ``title`` : 标题组件\n-`` tooltip`` : 提示框组件\n-`` legend`` : 图例组件\n- ``color`` : 调色盘颜色列表\n\t数据堆叠 , 同个类目轴上系列配置相同的``stack``值后 , 后一个系列的值会在前一个系列的值上相加\n```javascript\n/* 设置配置项 */\n    const option = {\n      /* color设置我们的线条的颜色 , 注意后面是一个数组 */\n      color:['red','green'],\n      /* 标题 */\n      title: {\n        text: \"Temperature Change\",\n      },\n      /* 图表的提示框组件 */\n      tooltip: {\n        /* 触发方式 , 折线图是axis , 柱状图是item */\n        trigger: \"axis\",\n      },\n      legend: {\n        /* series里面有name的话就不需要legend */\n      },\n      /* 网格配置 grid可以控制线性图 , 柱状图 , 图标大小 */\n      // grid:{\n      //   /* 图标距离左边的距离 */\n      //   left:'20%',\n      //   right:'20%',\n      //   top:'20%',\n      //   /* 是否显示刻度标签 */\n      //   containLabel:true\n      // },\n      /* 工具箱组件 , 可以另存为图片等功能 */\n      toolbox: {\n        show: true,\n        feature: {\n          dataZoom: {\n            yAxisIndex: \"none\",\n          },\n          dataView: { readOnly: false },\n          magicType: { type: [\"line\", \"bar\"] },\n          restore: {},\n          saveAsImage: {},\n        },\n      },\n      /* 设置x轴的相关配置 */\n      xAxis: {\n        /* 类目轴 , 要搭配data使用 , 自定义 x轴 */\n        type: \"category\",\n        /* 是否让我们的线条和坐标轴有缝隙 */\n        boundaryGap: false,\n        /* 自定义坐标轴 */\n        data: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n        /* 设置x轴标签文字样式 */\n        axisLabel:{\n          color:'red',\n        },\n        /* x轴样式不显示 */\n        axisLine:{\n          show:false\n        }\n      },\n      yAxis: {\n        type: \"value\",\n        axisLabel: {\n          formatter: \"{value} °C\",\n          /* 把刻度标签里面的文字颜色设置为白色 */\n          color:'white',\n        },\n        /* y轴的分割线 */\n        // splitLine:{\n        //   lineStyle:{\n        //     color:'blue'\n        //   }\n        // }\n\n        /* 不显示刻度 */\n        axisTick:{\n          show:false\n        },\n        /* 不显示y轴的线 */\n        axisLine:{\n          show:false\n        },\n\n      },\n      /* 系列图表配置 , 它决定着显示哪种类型的图表 */\n      series: [\n        {\n          name: \"Highest\",\n          type: \"line\",\n          data: this.datavalue,\n          markPoint: {\n            data: [\n              { type: \"max\", name: \"Max\" },\n              { type: \"min\", name: \"Min\" },\n            ],\n          },\n          markLine: {\n            data: [{ type: \"average\", name: \"Avg\" }],\n          },\n        },\n        {\n          name: \"Lowest\",\n          type: \"line\",\n          data: [1, -2, 2, 5, 3, 2, 0],\n          markPoint: {\n            data: [{ name: \"周最低\", value: -2, xAxis: 1, yAxis: -1.5 }],\n          },\n          markLine: {\n            data: [\n              { type: \"average\", name: \"Avg\" },\n              [\n                {\n                  symbol: \"none\",\n                  x: \"90%\",\n                  yAxis: \"max\",\n                },\n                {\n                  symbol: \"circle\",\n                  label: {\n                    position: \"start\",\n                    formatter: \"Max\",\n                  },\n                  type: \"max\",\n                  name: \"最高点\",\n                },\n              ],\n            ],\n          },\n        },\n      ],\n    };\n  \n```\n### 让echarts实现响应式\n在mounted中利用``window.onresize``来监听页面是否发生变化 , 当页面发生变化的时候 , 就重绘图表 , 但是注意在 window.onresize 的``funciton中this指向不再是vm`` , 所以就要在之前``let _this = this`` , 并且为了在 mounted 中获得 echarts 实例对象 mycharts  , 就要在 data 中定义 mycharts  , 在实例化的时候直接``this.mycharts = this.$echarts.init()``\n```javascript\n data() {\n    return {\n      datavalue:[10, 11, 13, 11, 12, 12, 9],\n      mycharts:{}\n    };\n  },\n  mounted() {\n    this.Echarts()\n    /* 图表响应式 */\n    let _this = this\n    window.onresize = function(){\n      _this.mycharts.resize()\n    }\n  },\n```","source":"_posts/安装echarts.md","raw":"---\n\ntitle: 初识Echarts\n\n---\n\n### 安装echarts\n\n```javascript\nnpm install echarts --save\n```\n### 在mian.js中引入(全局引入)\n```javascript\nimport * as echarts from \"echarts\"\nVue.prototype.$echarts = echarts\n```\n### 开始使用echarts\n1. 定义有``宽度和高度``的父容器\n2. 初始化``echarts实例``\n3. 指定配置项和数据\n4. 将配置项设置给echarts实例对象 绘制图表\n\n```javascript\n1. 定义有宽度和高度的父容器\n<div id=\"main\" class=\"main_container\"></div>\n\n2. 初始化echarts实例\nvar mycharts = this.$echarts.init(document.getElementById(\"main\"))\n\n3. 指定配置项和数据\nconst option={}\n\n4. 将配置项设置给echarts实例对象 绘制图表\nmycharts.setOption(option)\n```\n### 基础配置(摘抄自黑马教程)\n- ``series``\n\t- 系列列表 , 每个系列通过``type``决定自己的图标类型 , 可以指定图标数据 , 可以多个图标重叠\n- ``xAxis``\n\t- boundaryGap: 坐标轴两边的留白策略true , 这时候刻度只是作为分割线 , 标签和数据点都会在两个刻度之间的带(band)中间\n- ``yAxis`` : 直角 grid 中的 y 轴\n-`` grid`` : 直角坐标系内绘图网络\n- ``title`` : 标题组件\n-`` tooltip`` : 提示框组件\n-`` legend`` : 图例组件\n- ``color`` : 调色盘颜色列表\n\t数据堆叠 , 同个类目轴上系列配置相同的``stack``值后 , 后一个系列的值会在前一个系列的值上相加\n```javascript\n/* 设置配置项 */\n    const option = {\n      /* color设置我们的线条的颜色 , 注意后面是一个数组 */\n      color:['red','green'],\n      /* 标题 */\n      title: {\n        text: \"Temperature Change\",\n      },\n      /* 图表的提示框组件 */\n      tooltip: {\n        /* 触发方式 , 折线图是axis , 柱状图是item */\n        trigger: \"axis\",\n      },\n      legend: {\n        /* series里面有name的话就不需要legend */\n      },\n      /* 网格配置 grid可以控制线性图 , 柱状图 , 图标大小 */\n      // grid:{\n      //   /* 图标距离左边的距离 */\n      //   left:'20%',\n      //   right:'20%',\n      //   top:'20%',\n      //   /* 是否显示刻度标签 */\n      //   containLabel:true\n      // },\n      /* 工具箱组件 , 可以另存为图片等功能 */\n      toolbox: {\n        show: true,\n        feature: {\n          dataZoom: {\n            yAxisIndex: \"none\",\n          },\n          dataView: { readOnly: false },\n          magicType: { type: [\"line\", \"bar\"] },\n          restore: {},\n          saveAsImage: {},\n        },\n      },\n      /* 设置x轴的相关配置 */\n      xAxis: {\n        /* 类目轴 , 要搭配data使用 , 自定义 x轴 */\n        type: \"category\",\n        /* 是否让我们的线条和坐标轴有缝隙 */\n        boundaryGap: false,\n        /* 自定义坐标轴 */\n        data: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n        /* 设置x轴标签文字样式 */\n        axisLabel:{\n          color:'red',\n        },\n        /* x轴样式不显示 */\n        axisLine:{\n          show:false\n        }\n      },\n      yAxis: {\n        type: \"value\",\n        axisLabel: {\n          formatter: \"{value} °C\",\n          /* 把刻度标签里面的文字颜色设置为白色 */\n          color:'white',\n        },\n        /* y轴的分割线 */\n        // splitLine:{\n        //   lineStyle:{\n        //     color:'blue'\n        //   }\n        // }\n\n        /* 不显示刻度 */\n        axisTick:{\n          show:false\n        },\n        /* 不显示y轴的线 */\n        axisLine:{\n          show:false\n        },\n\n      },\n      /* 系列图表配置 , 它决定着显示哪种类型的图表 */\n      series: [\n        {\n          name: \"Highest\",\n          type: \"line\",\n          data: this.datavalue,\n          markPoint: {\n            data: [\n              { type: \"max\", name: \"Max\" },\n              { type: \"min\", name: \"Min\" },\n            ],\n          },\n          markLine: {\n            data: [{ type: \"average\", name: \"Avg\" }],\n          },\n        },\n        {\n          name: \"Lowest\",\n          type: \"line\",\n          data: [1, -2, 2, 5, 3, 2, 0],\n          markPoint: {\n            data: [{ name: \"周最低\", value: -2, xAxis: 1, yAxis: -1.5 }],\n          },\n          markLine: {\n            data: [\n              { type: \"average\", name: \"Avg\" },\n              [\n                {\n                  symbol: \"none\",\n                  x: \"90%\",\n                  yAxis: \"max\",\n                },\n                {\n                  symbol: \"circle\",\n                  label: {\n                    position: \"start\",\n                    formatter: \"Max\",\n                  },\n                  type: \"max\",\n                  name: \"最高点\",\n                },\n              ],\n            ],\n          },\n        },\n      ],\n    };\n  \n```\n### 让echarts实现响应式\n在mounted中利用``window.onresize``来监听页面是否发生变化 , 当页面发生变化的时候 , 就重绘图表 , 但是注意在 window.onresize 的``funciton中this指向不再是vm`` , 所以就要在之前``let _this = this`` , 并且为了在 mounted 中获得 echarts 实例对象 mycharts  , 就要在 data 中定义 mycharts  , 在实例化的时候直接``this.mycharts = this.$echarts.init()``\n```javascript\n data() {\n    return {\n      datavalue:[10, 11, 13, 11, 12, 12, 9],\n      mycharts:{}\n    };\n  },\n  mounted() {\n    this.Echarts()\n    /* 图表响应式 */\n    let _this = this\n    window.onresize = function(){\n      _this.mycharts.resize()\n    }\n  },\n```","slug":"安装echarts","published":1,"date":"2022-05-06T12:32:13.349Z","updated":"2022-05-06T13:57:37.470Z","_id":"cl2uf32or0003m0vodja3bi6p","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"安装echarts\"><a href=\"#安装echarts\" class=\"headerlink\" title=\"安装echarts\"></a>安装echarts</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install echarts --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"在mian-js中引入-全局引入\"><a href=\"#在mian-js中引入-全局引入\" class=\"headerlink\" title=\"在mian.js中引入(全局引入)\"></a>在mian.js中引入(全局引入)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">&quot;echarts&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$echarts</span> = echarts</span><br></pre></td></tr></table></figure>\n<h3 id=\"开始使用echarts\"><a href=\"#开始使用echarts\" class=\"headerlink\" title=\"开始使用echarts\"></a>开始使用echarts</h3><ol>\n<li>定义有<code>宽度和高度</code>的父容器</li>\n<li>初始化<code>echarts实例</code></li>\n<li>指定配置项和数据</li>\n<li>将配置项设置给echarts实例对象 绘制图表</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 定义有宽度和高度的父容器</span><br><span class=\"line\">&lt;div id=<span class=\"string\">&quot;main&quot;</span> <span class=\"keyword\">class</span>=<span class=\"string\">&quot;main_container&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 初始化echarts实例</span><br><span class=\"line\"><span class=\"keyword\">var</span> mycharts = <span class=\"variable language_\">this</span>.<span class=\"property\">$echarts</span>.<span class=\"title function_\">init</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;main&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span> 指定配置项和数据</span><br><span class=\"line\"><span class=\"keyword\">const</span> option=&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span> 将配置项设置给echarts实例对象 绘制图表</span><br><span class=\"line\">mycharts.<span class=\"title function_\">setOption</span>(option)</span><br></pre></td></tr></table></figure>\n<h3 id=\"基础配置-摘抄自黑马教程\"><a href=\"#基础配置-摘抄自黑马教程\" class=\"headerlink\" title=\"基础配置(摘抄自黑马教程)\"></a>基础配置(摘抄自黑马教程)</h3><ul>\n<li><code>series</code><ul>\n<li>系列列表 , 每个系列通过<code>type</code>决定自己的图标类型 , 可以指定图标数据 , 可以多个图标重叠</li>\n</ul>\n</li>\n<li><code>xAxis</code><ul>\n<li>boundaryGap: 坐标轴两边的留白策略true , 这时候刻度只是作为分割线 , 标签和数据点都会在两个刻度之间的带(band)中间</li>\n</ul>\n</li>\n<li><code>yAxis</code> : 直角 grid 中的 y 轴</li>\n<li><code> grid</code> : 直角坐标系内绘图网络</li>\n<li><code>title</code> : 标题组件</li>\n<li><code> tooltip</code> : 提示框组件</li>\n<li><code> legend</code> : 图例组件</li>\n<li><code>color</code> : 调色盘颜色列表<br>  数据堆叠 , 同个类目轴上系列配置相同的<code>stack</code>值后 , 后一个系列的值会在前一个系列的值上相加<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 设置配置项 */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> option = &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* color设置我们的线条的颜色 , 注意后面是一个数组 */</span></span><br><span class=\"line\">      <span class=\"attr\">color</span>:[<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;green&#x27;</span>],</span><br><span class=\"line\">      <span class=\"comment\">/* 标题 */</span></span><br><span class=\"line\">      <span class=\"attr\">title</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">text</span>: <span class=\"string\">&quot;Temperature Change&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">/* 图表的提示框组件 */</span></span><br><span class=\"line\">      <span class=\"attr\">tooltip</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* 触发方式 , 折线图是axis , 柱状图是item */</span></span><br><span class=\"line\">        <span class=\"attr\">trigger</span>: <span class=\"string\">&quot;axis&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">legend</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* series里面有name的话就不需要legend */</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">/* 网格配置 grid可以控制线性图 , 柱状图 , 图标大小 */</span></span><br><span class=\"line\">      <span class=\"comment\">// grid:&#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   /* 图标距离左边的距离 */</span></span><br><span class=\"line\">      <span class=\"comment\">//   left:&#x27;20%&#x27;,</span></span><br><span class=\"line\">      <span class=\"comment\">//   right:&#x27;20%&#x27;,</span></span><br><span class=\"line\">      <span class=\"comment\">//   top:&#x27;20%&#x27;,</span></span><br><span class=\"line\">      <span class=\"comment\">//   /* 是否显示刻度标签 */</span></span><br><span class=\"line\">      <span class=\"comment\">//   containLabel:true</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">      <span class=\"comment\">/* 工具箱组件 , 可以另存为图片等功能 */</span></span><br><span class=\"line\">      <span class=\"attr\">toolbox</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">show</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">feature</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">dataZoom</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">yAxisIndex</span>: <span class=\"string\">&quot;none&quot;</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">dataView</span>: &#123; <span class=\"attr\">readOnly</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">          <span class=\"attr\">magicType</span>: &#123; <span class=\"attr\">type</span>: [<span class=\"string\">&quot;line&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>] &#125;,</span><br><span class=\"line\">          <span class=\"attr\">restore</span>: &#123;&#125;,</span><br><span class=\"line\">          <span class=\"attr\">saveAsImage</span>: &#123;&#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">/* 设置x轴的相关配置 */</span></span><br><span class=\"line\">      <span class=\"attr\">xAxis</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* 类目轴 , 要搭配data使用 , 自定义 x轴 */</span></span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;category&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">/* 是否让我们的线条和坐标轴有缝隙 */</span></span><br><span class=\"line\">        <span class=\"attr\">boundaryGap</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"comment\">/* 自定义坐标轴 */</span></span><br><span class=\"line\">        <span class=\"attr\">data</span>: [<span class=\"string\">&quot;Mon&quot;</span>, <span class=\"string\">&quot;Tue&quot;</span>, <span class=\"string\">&quot;Wed&quot;</span>, <span class=\"string\">&quot;Thu&quot;</span>, <span class=\"string\">&quot;Fri&quot;</span>, <span class=\"string\">&quot;Sat&quot;</span>, <span class=\"string\">&quot;Sun&quot;</span>],</span><br><span class=\"line\">        <span class=\"comment\">/* 设置x轴标签文字样式 */</span></span><br><span class=\"line\">        <span class=\"attr\">axisLabel</span>:&#123;</span><br><span class=\"line\">          <span class=\"attr\">color</span>:<span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">/* x轴样式不显示 */</span></span><br><span class=\"line\">        <span class=\"attr\">axisLine</span>:&#123;</span><br><span class=\"line\">          <span class=\"attr\">show</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">yAxis</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;value&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">axisLabel</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">formatter</span>: <span class=\"string\">&quot;&#123;value&#125; °C&quot;</span>,</span><br><span class=\"line\">          <span class=\"comment\">/* 把刻度标签里面的文字颜色设置为白色 */</span></span><br><span class=\"line\">          <span class=\"attr\">color</span>:<span class=\"string\">&#x27;white&#x27;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">/* y轴的分割线 */</span></span><br><span class=\"line\">        <span class=\"comment\">// splitLine:&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//   lineStyle:&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     color:&#x27;blue&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* 不显示刻度 */</span></span><br><span class=\"line\">        <span class=\"attr\">axisTick</span>:&#123;</span><br><span class=\"line\">          <span class=\"attr\">show</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">/* 不显示y轴的线 */</span></span><br><span class=\"line\">        <span class=\"attr\">axisLine</span>:&#123;</span><br><span class=\"line\">          <span class=\"attr\">show</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">/* 系列图表配置 , 它决定着显示哪种类型的图表 */</span></span><br><span class=\"line\">      <span class=\"attr\">series</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">&quot;Highest&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">type</span>: <span class=\"string\">&quot;line&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">data</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">datavalue</span>,</span><br><span class=\"line\">          <span class=\"attr\">markPoint</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">data</span>: [</span><br><span class=\"line\">              &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;max&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Max&quot;</span> &#125;,</span><br><span class=\"line\">              &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;min&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Min&quot;</span> &#125;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">markLine</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">data</span>: [&#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;average&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Avg&quot;</span> &#125;],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">&quot;Lowest&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">type</span>: <span class=\"string\">&quot;line&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">data</span>: [<span class=\"number\">1</span>, -<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>],</span><br><span class=\"line\">          <span class=\"attr\">markPoint</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">data</span>: [&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;周最低&quot;</span>, <span class=\"attr\">value</span>: -<span class=\"number\">2</span>, <span class=\"attr\">xAxis</span>: <span class=\"number\">1</span>, <span class=\"attr\">yAxis</span>: -<span class=\"number\">1.5</span> &#125;],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">markLine</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">data</span>: [</span><br><span class=\"line\">              &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;average&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Avg&quot;</span> &#125;,</span><br><span class=\"line\">              [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  <span class=\"attr\">symbol</span>: <span class=\"string\">&quot;none&quot;</span>,</span><br><span class=\"line\">                  <span class=\"attr\">x</span>: <span class=\"string\">&quot;90%&quot;</span>,</span><br><span class=\"line\">                  <span class=\"attr\">yAxis</span>: <span class=\"string\">&quot;max&quot;</span>,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  <span class=\"attr\">symbol</span>: <span class=\"string\">&quot;circle&quot;</span>,</span><br><span class=\"line\">                  <span class=\"attr\">label</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">position</span>: <span class=\"string\">&quot;start&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">formatter</span>: <span class=\"string\">&quot;Max&quot;</span>,</span><br><span class=\"line\">                  &#125;,</span><br><span class=\"line\">                  <span class=\"attr\">type</span>: <span class=\"string\">&quot;max&quot;</span>,</span><br><span class=\"line\">                  <span class=\"attr\">name</span>: <span class=\"string\">&quot;最高点&quot;</span>,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">              ],</span><br><span class=\"line\">            ],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n<h3 id=\"让echarts实现响应式\"><a href=\"#让echarts实现响应式\" class=\"headerlink\" title=\"让echarts实现响应式\"></a>让echarts实现响应式</h3>在mounted中利用<code>window.onresize</code>来监听页面是否发生变化 , 当页面发生变化的时候 , 就重绘图表 , 但是注意在 window.onresize 的<code>funciton中this指向不再是vm</code> , 所以就要在之前<code>let _this = this</code> , 并且为了在 mounted 中获得 echarts 实例对象 mycharts  , 就要在 data 中定义 mycharts  , 在实例化的时候直接<code>this.mycharts = this.$echarts.init()</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">     <span class=\"attr\">datavalue</span>:[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">12</span>, <span class=\"number\">9</span>],</span><br><span class=\"line\">     <span class=\"attr\">mycharts</span>:&#123;&#125;</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"title class_\">Echarts</span>()</span><br><span class=\"line\">   <span class=\"comment\">/* 图表响应式 */</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> _this = <span class=\"variable language_\">this</span></span><br><span class=\"line\">   <span class=\"variable language_\">window</span>.<span class=\"property\">onresize</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">     _this.<span class=\"property\">mycharts</span>.<span class=\"title function_\">resize</span>()</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"cover":"/img/avator.jpg","excerpt":"","more":"<h3 id=\"安装echarts\"><a href=\"#安装echarts\" class=\"headerlink\" title=\"安装echarts\"></a>安装echarts</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install echarts --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"在mian-js中引入-全局引入\"><a href=\"#在mian-js中引入-全局引入\" class=\"headerlink\" title=\"在mian.js中引入(全局引入)\"></a>在mian.js中引入(全局引入)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">&quot;echarts&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$echarts</span> = echarts</span><br></pre></td></tr></table></figure>\n<h3 id=\"开始使用echarts\"><a href=\"#开始使用echarts\" class=\"headerlink\" title=\"开始使用echarts\"></a>开始使用echarts</h3><ol>\n<li>定义有<code>宽度和高度</code>的父容器</li>\n<li>初始化<code>echarts实例</code></li>\n<li>指定配置项和数据</li>\n<li>将配置项设置给echarts实例对象 绘制图表</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 定义有宽度和高度的父容器</span><br><span class=\"line\">&lt;div id=<span class=\"string\">&quot;main&quot;</span> <span class=\"keyword\">class</span>=<span class=\"string\">&quot;main_container&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 初始化echarts实例</span><br><span class=\"line\"><span class=\"keyword\">var</span> mycharts = <span class=\"variable language_\">this</span>.<span class=\"property\">$echarts</span>.<span class=\"title function_\">init</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;main&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span> 指定配置项和数据</span><br><span class=\"line\"><span class=\"keyword\">const</span> option=&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span> 将配置项设置给echarts实例对象 绘制图表</span><br><span class=\"line\">mycharts.<span class=\"title function_\">setOption</span>(option)</span><br></pre></td></tr></table></figure>\n<h3 id=\"基础配置-摘抄自黑马教程\"><a href=\"#基础配置-摘抄自黑马教程\" class=\"headerlink\" title=\"基础配置(摘抄自黑马教程)\"></a>基础配置(摘抄自黑马教程)</h3><ul>\n<li><code>series</code><ul>\n<li>系列列表 , 每个系列通过<code>type</code>决定自己的图标类型 , 可以指定图标数据 , 可以多个图标重叠</li>\n</ul>\n</li>\n<li><code>xAxis</code><ul>\n<li>boundaryGap: 坐标轴两边的留白策略true , 这时候刻度只是作为分割线 , 标签和数据点都会在两个刻度之间的带(band)中间</li>\n</ul>\n</li>\n<li><code>yAxis</code> : 直角 grid 中的 y 轴</li>\n<li><code> grid</code> : 直角坐标系内绘图网络</li>\n<li><code>title</code> : 标题组件</li>\n<li><code> tooltip</code> : 提示框组件</li>\n<li><code> legend</code> : 图例组件</li>\n<li><code>color</code> : 调色盘颜色列表<br>  数据堆叠 , 同个类目轴上系列配置相同的<code>stack</code>值后 , 后一个系列的值会在前一个系列的值上相加<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 设置配置项 */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> option = &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* color设置我们的线条的颜色 , 注意后面是一个数组 */</span></span><br><span class=\"line\">      <span class=\"attr\">color</span>:[<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;green&#x27;</span>],</span><br><span class=\"line\">      <span class=\"comment\">/* 标题 */</span></span><br><span class=\"line\">      <span class=\"attr\">title</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">text</span>: <span class=\"string\">&quot;Temperature Change&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">/* 图表的提示框组件 */</span></span><br><span class=\"line\">      <span class=\"attr\">tooltip</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* 触发方式 , 折线图是axis , 柱状图是item */</span></span><br><span class=\"line\">        <span class=\"attr\">trigger</span>: <span class=\"string\">&quot;axis&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">legend</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* series里面有name的话就不需要legend */</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">/* 网格配置 grid可以控制线性图 , 柱状图 , 图标大小 */</span></span><br><span class=\"line\">      <span class=\"comment\">// grid:&#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   /* 图标距离左边的距离 */</span></span><br><span class=\"line\">      <span class=\"comment\">//   left:&#x27;20%&#x27;,</span></span><br><span class=\"line\">      <span class=\"comment\">//   right:&#x27;20%&#x27;,</span></span><br><span class=\"line\">      <span class=\"comment\">//   top:&#x27;20%&#x27;,</span></span><br><span class=\"line\">      <span class=\"comment\">//   /* 是否显示刻度标签 */</span></span><br><span class=\"line\">      <span class=\"comment\">//   containLabel:true</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">      <span class=\"comment\">/* 工具箱组件 , 可以另存为图片等功能 */</span></span><br><span class=\"line\">      <span class=\"attr\">toolbox</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">show</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">feature</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">dataZoom</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">yAxisIndex</span>: <span class=\"string\">&quot;none&quot;</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">dataView</span>: &#123; <span class=\"attr\">readOnly</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">          <span class=\"attr\">magicType</span>: &#123; <span class=\"attr\">type</span>: [<span class=\"string\">&quot;line&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>] &#125;,</span><br><span class=\"line\">          <span class=\"attr\">restore</span>: &#123;&#125;,</span><br><span class=\"line\">          <span class=\"attr\">saveAsImage</span>: &#123;&#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">/* 设置x轴的相关配置 */</span></span><br><span class=\"line\">      <span class=\"attr\">xAxis</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* 类目轴 , 要搭配data使用 , 自定义 x轴 */</span></span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;category&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">/* 是否让我们的线条和坐标轴有缝隙 */</span></span><br><span class=\"line\">        <span class=\"attr\">boundaryGap</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"comment\">/* 自定义坐标轴 */</span></span><br><span class=\"line\">        <span class=\"attr\">data</span>: [<span class=\"string\">&quot;Mon&quot;</span>, <span class=\"string\">&quot;Tue&quot;</span>, <span class=\"string\">&quot;Wed&quot;</span>, <span class=\"string\">&quot;Thu&quot;</span>, <span class=\"string\">&quot;Fri&quot;</span>, <span class=\"string\">&quot;Sat&quot;</span>, <span class=\"string\">&quot;Sun&quot;</span>],</span><br><span class=\"line\">        <span class=\"comment\">/* 设置x轴标签文字样式 */</span></span><br><span class=\"line\">        <span class=\"attr\">axisLabel</span>:&#123;</span><br><span class=\"line\">          <span class=\"attr\">color</span>:<span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">/* x轴样式不显示 */</span></span><br><span class=\"line\">        <span class=\"attr\">axisLine</span>:&#123;</span><br><span class=\"line\">          <span class=\"attr\">show</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">yAxis</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;value&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">axisLabel</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">formatter</span>: <span class=\"string\">&quot;&#123;value&#125; °C&quot;</span>,</span><br><span class=\"line\">          <span class=\"comment\">/* 把刻度标签里面的文字颜色设置为白色 */</span></span><br><span class=\"line\">          <span class=\"attr\">color</span>:<span class=\"string\">&#x27;white&#x27;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">/* y轴的分割线 */</span></span><br><span class=\"line\">        <span class=\"comment\">// splitLine:&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//   lineStyle:&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     color:&#x27;blue&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* 不显示刻度 */</span></span><br><span class=\"line\">        <span class=\"attr\">axisTick</span>:&#123;</span><br><span class=\"line\">          <span class=\"attr\">show</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">/* 不显示y轴的线 */</span></span><br><span class=\"line\">        <span class=\"attr\">axisLine</span>:&#123;</span><br><span class=\"line\">          <span class=\"attr\">show</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">/* 系列图表配置 , 它决定着显示哪种类型的图表 */</span></span><br><span class=\"line\">      <span class=\"attr\">series</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">&quot;Highest&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">type</span>: <span class=\"string\">&quot;line&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">data</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">datavalue</span>,</span><br><span class=\"line\">          <span class=\"attr\">markPoint</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">data</span>: [</span><br><span class=\"line\">              &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;max&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Max&quot;</span> &#125;,</span><br><span class=\"line\">              &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;min&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Min&quot;</span> &#125;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">markLine</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">data</span>: [&#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;average&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Avg&quot;</span> &#125;],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">&quot;Lowest&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">type</span>: <span class=\"string\">&quot;line&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">data</span>: [<span class=\"number\">1</span>, -<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>],</span><br><span class=\"line\">          <span class=\"attr\">markPoint</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">data</span>: [&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;周最低&quot;</span>, <span class=\"attr\">value</span>: -<span class=\"number\">2</span>, <span class=\"attr\">xAxis</span>: <span class=\"number\">1</span>, <span class=\"attr\">yAxis</span>: -<span class=\"number\">1.5</span> &#125;],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">markLine</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">data</span>: [</span><br><span class=\"line\">              &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;average&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Avg&quot;</span> &#125;,</span><br><span class=\"line\">              [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  <span class=\"attr\">symbol</span>: <span class=\"string\">&quot;none&quot;</span>,</span><br><span class=\"line\">                  <span class=\"attr\">x</span>: <span class=\"string\">&quot;90%&quot;</span>,</span><br><span class=\"line\">                  <span class=\"attr\">yAxis</span>: <span class=\"string\">&quot;max&quot;</span>,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  <span class=\"attr\">symbol</span>: <span class=\"string\">&quot;circle&quot;</span>,</span><br><span class=\"line\">                  <span class=\"attr\">label</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">position</span>: <span class=\"string\">&quot;start&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">formatter</span>: <span class=\"string\">&quot;Max&quot;</span>,</span><br><span class=\"line\">                  &#125;,</span><br><span class=\"line\">                  <span class=\"attr\">type</span>: <span class=\"string\">&quot;max&quot;</span>,</span><br><span class=\"line\">                  <span class=\"attr\">name</span>: <span class=\"string\">&quot;最高点&quot;</span>,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">              ],</span><br><span class=\"line\">            ],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n<h3 id=\"让echarts实现响应式\"><a href=\"#让echarts实现响应式\" class=\"headerlink\" title=\"让echarts实现响应式\"></a>让echarts实现响应式</h3>在mounted中利用<code>window.onresize</code>来监听页面是否发生变化 , 当页面发生变化的时候 , 就重绘图表 , 但是注意在 window.onresize 的<code>funciton中this指向不再是vm</code> , 所以就要在之前<code>let _this = this</code> , 并且为了在 mounted 中获得 echarts 实例对象 mycharts  , 就要在 data 中定义 mycharts  , 在实例化的时候直接<code>this.mycharts = this.$echarts.init()</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">     <span class=\"attr\">datavalue</span>:[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">12</span>, <span class=\"number\">9</span>],</span><br><span class=\"line\">     <span class=\"attr\">mycharts</span>:&#123;&#125;</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"title class_\">Echarts</span>()</span><br><span class=\"line\">   <span class=\"comment\">/* 图表响应式 */</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> _this = <span class=\"variable language_\">this</span></span><br><span class=\"line\">   <span class=\"variable language_\">window</span>.<span class=\"property\">onresize</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">     _this.<span class=\"property\">mycharts</span>.<span class=\"title function_\">resize</span>()</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"瀑布流_懒加载","_content":"\n\n### 懒加载(可以在里面写防抖)\n[这个大佬写的很详细](https://blog.csdn.net/ruoyu923/article/details/82461634?spm=1001.2101.3001.6650.8&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8.pc_relevant_default&utm_relevant_index=12)\nvue项目里实现懒加载要用到 ``v-infinite-scroll`` 插件\n\n```javascript\nnpm i v-infinite-scroll -D\nimport lazyLoad from 'v-infinite-scroll' \nVue.use(lazyLoad)\n```\n下面的``v-infinite-scroll``绑定的事件``load()``就会在滚动条距离页面底部``300px``的时候触发\n``:infinite-scroll-disabled=\"disabled\"``随着disabled的值的变化,决定是否禁止触发加载\n\n```javascript\n<div\n      v-else-if=\"type === 'video'\"\n      class=\"container\"\n      v-infinite-scroll=\"load\"\n      :infinite-scroll-disabled=\"disabled\"\n      :infinite-scroll-distance=\"300\"\n      :infinite-scroll-immediate=\"false\"\n    >\n      <div class=\"item\" v-for=\"(item, index) in musicListData\" :key=\"index\">\n        <div class=\"item_box\">\n          <div class=\"img1\"><img :src=\"item.data.coverUrl\" alt=\"\" /></div>\n          <div class=\"play_count\">30万+</div>\n          <div class=\"play_time\">4:32</div>\n        </div>\n        <div class=\"bottom\">\n          <div class=\"item_discribe\">\n            {{ item.data.description || item.data.title }}\n          </div>\n          <div class=\"author\">by:{{ item.data.creator.nickname }}</div>\n        </div>\n      </div>\n    </div>\n```\n下面经过自定义事件触发父组件里面的``bottomLoad``函数(这里特地起一样的名字)\n懒加载被触发一次之后 , 设置``this.disabled = true``,防止重复触发懒加载事件 \n```javascript\nload() {\n      // console.log('我被触发了');\n      this.$emit(\"bottomLoad\");\n      // 触发load后加载数据 期间不允许再次触发load事件\n      this.disabled = true;\n    },\n```\n父组件中被触发的自定义事件处理函数 , 改变歌单的数据 \n\n```javascript\n//懒加载\n    bottomLoad(){\n      if(this.hasMore){\n        this.getMusicInfo(this.currentTag.id)\n      }\n    }\n```\n子组件中监听歌单的数据有没有被改变 , 新数据加载了之后重新开启懒加载\n\n```javascript\nwatch: {\n    //数据更新之后再次触发load事件\n    musicListData() {\n      if (this.isLoad) {//父组件传过来的值 , 说明父组件中的函数已经进行完毕\n        if (this.musicListData.length != 0) {\n          this.disabled = false;\n        } else {\n          this.disabled = true;\n        }\n      }\n    },\n  },\n```\n\n1. `` v-infinite-scroll=\"load\"``\n\t滚动触发的事件load\n2. `` infinite-scroll-disabled``\n\t是否禁止触发加载\n3. `` infinite-scroll-distance``\n\t距离底部多高开始加载数据\n4. ``infinite-scroll-immediate-check``\n\t指令在绑定后立即检查，是否内容高度不足以填充页面容器。","source":"_posts/瀑布流_懒加载.md","raw":"---\ntitle: 瀑布流_懒加载\n---\n\n\n### 懒加载(可以在里面写防抖)\n[这个大佬写的很详细](https://blog.csdn.net/ruoyu923/article/details/82461634?spm=1001.2101.3001.6650.8&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8.pc_relevant_default&utm_relevant_index=12)\nvue项目里实现懒加载要用到 ``v-infinite-scroll`` 插件\n\n```javascript\nnpm i v-infinite-scroll -D\nimport lazyLoad from 'v-infinite-scroll' \nVue.use(lazyLoad)\n```\n下面的``v-infinite-scroll``绑定的事件``load()``就会在滚动条距离页面底部``300px``的时候触发\n``:infinite-scroll-disabled=\"disabled\"``随着disabled的值的变化,决定是否禁止触发加载\n\n```javascript\n<div\n      v-else-if=\"type === 'video'\"\n      class=\"container\"\n      v-infinite-scroll=\"load\"\n      :infinite-scroll-disabled=\"disabled\"\n      :infinite-scroll-distance=\"300\"\n      :infinite-scroll-immediate=\"false\"\n    >\n      <div class=\"item\" v-for=\"(item, index) in musicListData\" :key=\"index\">\n        <div class=\"item_box\">\n          <div class=\"img1\"><img :src=\"item.data.coverUrl\" alt=\"\" /></div>\n          <div class=\"play_count\">30万+</div>\n          <div class=\"play_time\">4:32</div>\n        </div>\n        <div class=\"bottom\">\n          <div class=\"item_discribe\">\n            {{ item.data.description || item.data.title }}\n          </div>\n          <div class=\"author\">by:{{ item.data.creator.nickname }}</div>\n        </div>\n      </div>\n    </div>\n```\n下面经过自定义事件触发父组件里面的``bottomLoad``函数(这里特地起一样的名字)\n懒加载被触发一次之后 , 设置``this.disabled = true``,防止重复触发懒加载事件 \n```javascript\nload() {\n      // console.log('我被触发了');\n      this.$emit(\"bottomLoad\");\n      // 触发load后加载数据 期间不允许再次触发load事件\n      this.disabled = true;\n    },\n```\n父组件中被触发的自定义事件处理函数 , 改变歌单的数据 \n\n```javascript\n//懒加载\n    bottomLoad(){\n      if(this.hasMore){\n        this.getMusicInfo(this.currentTag.id)\n      }\n    }\n```\n子组件中监听歌单的数据有没有被改变 , 新数据加载了之后重新开启懒加载\n\n```javascript\nwatch: {\n    //数据更新之后再次触发load事件\n    musicListData() {\n      if (this.isLoad) {//父组件传过来的值 , 说明父组件中的函数已经进行完毕\n        if (this.musicListData.length != 0) {\n          this.disabled = false;\n        } else {\n          this.disabled = true;\n        }\n      }\n    },\n  },\n```\n\n1. `` v-infinite-scroll=\"load\"``\n\t滚动触发的事件load\n2. `` infinite-scroll-disabled``\n\t是否禁止触发加载\n3. `` infinite-scroll-distance``\n\t距离底部多高开始加载数据\n4. ``infinite-scroll-immediate-check``\n\t指令在绑定后立即检查，是否内容高度不足以填充页面容器。","slug":"瀑布流_懒加载","published":1,"date":"2022-05-06T13:34:20.940Z","updated":"2022-05-06T13:36:11.534Z","_id":"cl2uhaz2p00000gvo3c2c6mnk","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"懒加载-可以在里面写防抖\"><a href=\"#懒加载-可以在里面写防抖\" class=\"headerlink\" title=\"懒加载(可以在里面写防抖)\"></a>懒加载(可以在里面写防抖)</h3><p><a href=\"https://blog.csdn.net/ruoyu923/article/details/82461634?spm=1001.2101.3001.6650.8&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8.pc_relevant_default&utm_relevant_index=12\">这个大佬写的很详细</a><br>vue项目里实现懒加载要用到 <code>v-infinite-scroll</code> 插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i v-infinite-scroll -D</span><br><span class=\"line\"><span class=\"keyword\">import</span> lazyLoad <span class=\"keyword\">from</span> <span class=\"string\">&#x27;v-infinite-scroll&#x27;</span> </span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(lazyLoad)</span><br></pre></td></tr></table></figure>\n<p>下面的<code>v-infinite-scroll</code>绑定的事件<code>load()</code>就会在滚动条距离页面底部<code>300px</code>的时候触发<br><code>:infinite-scroll-disabled=&quot;disabled&quot;</code>随着disabled的值的变化,决定是否禁止触发加载</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div</span><br><span class=\"line\">      v-<span class=\"keyword\">else</span>-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;type === &#x27;video&#x27;&quot;</span></span><br><span class=\"line\">      <span class=\"keyword\">class</span>=<span class=\"string\">&quot;container&quot;</span></span><br><span class=\"line\">      v-infinite-scroll=<span class=\"string\">&quot;load&quot;</span></span><br><span class=\"line\">      :infinite-scroll-disabled=<span class=\"string\">&quot;disabled&quot;</span></span><br><span class=\"line\">      :infinite-scroll-distance=<span class=\"string\">&quot;300&quot;</span></span><br><span class=\"line\">      :infinite-scroll-immediate=<span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, index) in musicListData&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item_box&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;img1&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;item.data.coverUrl&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;play_count&quot;</span>&gt;</span>30万+<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;play_time&quot;</span>&gt;</span>4:32<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bottom&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item_discribe&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            &#123;&#123; item.data.description || item.data.title &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;author&quot;</span>&gt;</span>by:&#123;&#123; item.data.creator.nickname &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>下面经过自定义事件触发父组件里面的<code>bottomLoad</code>函数(这里特地起一样的名字)<br>懒加载被触发一次之后 , 设置<code>this.disabled = true</code>,防止重复触发懒加载事件 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">load</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(&#x27;我被触发了&#x27;);</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&quot;bottomLoad&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 触发load后加载数据 期间不允许再次触发load事件</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">disabled</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<p>父组件中被触发的自定义事件处理函数 , 改变歌单的数据 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//懒加载</span></span><br><span class=\"line\">    <span class=\"title function_\">bottomLoad</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">hasMore</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">getMusicInfo</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">currentTag</span>.<span class=\"property\">id</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>子组件中监听歌单的数据有没有被改变 , 新数据加载了之后重新开启懒加载</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//数据更新之后再次触发load事件</span></span><br><span class=\"line\">    <span class=\"title function_\">musicListData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">isLoad</span>) &#123;<span class=\"comment\">//父组件传过来的值 , 说明父组件中的函数已经进行完毕</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">musicListData</span>.<span class=\"property\">length</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">disabled</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">disabled</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code> v-infinite-scroll=&quot;load&quot;</code><br> 滚动触发的事件load</li>\n<li><code> infinite-scroll-disabled</code><br> 是否禁止触发加载</li>\n<li><code> infinite-scroll-distance</code><br> 距离底部多高开始加载数据</li>\n<li><code>infinite-scroll-immediate-check</code><br> 指令在绑定后立即检查，是否内容高度不足以填充页面容器。</li>\n</ol>\n","site":{"data":{}},"cover":"/img/avator.jpg","excerpt":"","more":"<h3 id=\"懒加载-可以在里面写防抖\"><a href=\"#懒加载-可以在里面写防抖\" class=\"headerlink\" title=\"懒加载(可以在里面写防抖)\"></a>懒加载(可以在里面写防抖)</h3><p><a href=\"https://blog.csdn.net/ruoyu923/article/details/82461634?spm=1001.2101.3001.6650.8&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8.pc_relevant_default&utm_relevant_index=12\">这个大佬写的很详细</a><br>vue项目里实现懒加载要用到 <code>v-infinite-scroll</code> 插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i v-infinite-scroll -D</span><br><span class=\"line\"><span class=\"keyword\">import</span> lazyLoad <span class=\"keyword\">from</span> <span class=\"string\">&#x27;v-infinite-scroll&#x27;</span> </span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(lazyLoad)</span><br></pre></td></tr></table></figure>\n<p>下面的<code>v-infinite-scroll</code>绑定的事件<code>load()</code>就会在滚动条距离页面底部<code>300px</code>的时候触发<br><code>:infinite-scroll-disabled=&quot;disabled&quot;</code>随着disabled的值的变化,决定是否禁止触发加载</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div</span><br><span class=\"line\">      v-<span class=\"keyword\">else</span>-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;type === &#x27;video&#x27;&quot;</span></span><br><span class=\"line\">      <span class=\"keyword\">class</span>=<span class=\"string\">&quot;container&quot;</span></span><br><span class=\"line\">      v-infinite-scroll=<span class=\"string\">&quot;load&quot;</span></span><br><span class=\"line\">      :infinite-scroll-disabled=<span class=\"string\">&quot;disabled&quot;</span></span><br><span class=\"line\">      :infinite-scroll-distance=<span class=\"string\">&quot;300&quot;</span></span><br><span class=\"line\">      :infinite-scroll-immediate=<span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, index) in musicListData&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item_box&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;img1&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;item.data.coverUrl&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;play_count&quot;</span>&gt;</span>30万+<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;play_time&quot;</span>&gt;</span>4:32<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bottom&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item_discribe&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            &#123;&#123; item.data.description || item.data.title &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;author&quot;</span>&gt;</span>by:&#123;&#123; item.data.creator.nickname &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>下面经过自定义事件触发父组件里面的<code>bottomLoad</code>函数(这里特地起一样的名字)<br>懒加载被触发一次之后 , 设置<code>this.disabled = true</code>,防止重复触发懒加载事件 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">load</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(&#x27;我被触发了&#x27;);</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&quot;bottomLoad&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 触发load后加载数据 期间不允许再次触发load事件</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">disabled</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<p>父组件中被触发的自定义事件处理函数 , 改变歌单的数据 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//懒加载</span></span><br><span class=\"line\">    <span class=\"title function_\">bottomLoad</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">hasMore</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">getMusicInfo</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">currentTag</span>.<span class=\"property\">id</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>子组件中监听歌单的数据有没有被改变 , 新数据加载了之后重新开启懒加载</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//数据更新之后再次触发load事件</span></span><br><span class=\"line\">    <span class=\"title function_\">musicListData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">isLoad</span>) &#123;<span class=\"comment\">//父组件传过来的值 , 说明父组件中的函数已经进行完毕</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">musicListData</span>.<span class=\"property\">length</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">disabled</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">disabled</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code> v-infinite-scroll=&quot;load&quot;</code><br> 滚动触发的事件load</li>\n<li><code> infinite-scroll-disabled</code><br> 是否禁止触发加载</li>\n<li><code> infinite-scroll-distance</code><br> 距离底部多高开始加载数据</li>\n<li><code>infinite-scroll-immediate-check</code><br> 指令在绑定后立即检查，是否内容高度不足以填充页面容器。</li>\n</ol>\n"},{"title":"Canvas","_content":"  ## canvas可以绘制路径 , 矩形 , 圆形, 字符  , 渐变, 以及 添加图像\n\n首先要创建一个canvas容器\n```javascript\n<canvas id=\"myCanvas\" width=\"300\" height=\"300\" ></canvas>\n```\n获取容器 , 并创建context对象\n\n```javascript\nvar c=document.getElementById(\"myCanvas\");\n//创建context对象\nvar ctx=c.getContext(\"2d\");\n```\n\n- 路径(直线)\n\t\t- 方法:  ``moveTo(x,y)``   \t  ``lineTo(x,y)``    x,y确定在画布里的起始位置和结束位置\n  \t\t- 使用  ``stroke()`` 方法来绘制\n\n```javascript\n\nvar c=document.getElementById(\"myCanvas\");\nvar ctx=c.getContext(\"2d\");\nctx.moveTo(0,0);\nctx.lineTo(200,100);\nctx.stroke();\n```\n\n- 矩形\n\t\t- 方法 : ``fillStyle=\"color\"``   ``fillRect(x,y,width,height)``  x,y 矩形的起点 , width , height 矩形的宽高 \n```javascript\nctx.fillStyle=\"blue\";\nctx.fillRect(150,150,150,150);\n```\n\n- 圆形\n\t\t- 方法: ``arc(150,150,75,0,2*Math.PI)`` //x,y,r,srart,stop  `` stroke()``\n```javascript\nctx.arc(150,150,75,0,2*Math.PI) //x,y,r,srart,stop\nctx.stroke()\n```\n\n- 文本字符\n\t\t- 方法: ``ctx.font = \"30px Arial\" ``字体效果      ``strokeText(\"一十四洲\",150,150)``内容 , x,y起点\n```javascript\nctx.font = \"30px Arial\"\nctx.strokeText(\"一十四洲\",150,150)//内容 , x,y起点\n```\n\n- 渐变\n\t\t- 方法:  \n\t\t\t\t\t- createLinearGradient() // 线性渐变\n\t\t\t\t\t- createRadialGradient() //径向渐变\n\t\t\t\t\t- addColorStop() \n```javascript\n// var grd1 = ctx.createLinearGradient(0,0,200,0); //线性渐变\nvar grd=ctx.createRadialGradient(75,50,5,90,60,100);//径向渐变\ngrd.addColorStop(0,'red')\ngrd.addColorStop(1,'white')\n```\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/5e74cede1bf74686b426a5570ed67466.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center)","source":"_posts/canvas.md","raw":"\n---\ntitle: Canvas\n---\n  ## canvas可以绘制路径 , 矩形 , 圆形, 字符  , 渐变, 以及 添加图像\n\n首先要创建一个canvas容器\n```javascript\n<canvas id=\"myCanvas\" width=\"300\" height=\"300\" ></canvas>\n```\n获取容器 , 并创建context对象\n\n```javascript\nvar c=document.getElementById(\"myCanvas\");\n//创建context对象\nvar ctx=c.getContext(\"2d\");\n```\n\n- 路径(直线)\n\t\t- 方法:  ``moveTo(x,y)``   \t  ``lineTo(x,y)``    x,y确定在画布里的起始位置和结束位置\n  \t\t- 使用  ``stroke()`` 方法来绘制\n\n```javascript\n\nvar c=document.getElementById(\"myCanvas\");\nvar ctx=c.getContext(\"2d\");\nctx.moveTo(0,0);\nctx.lineTo(200,100);\nctx.stroke();\n```\n\n- 矩形\n\t\t- 方法 : ``fillStyle=\"color\"``   ``fillRect(x,y,width,height)``  x,y 矩形的起点 , width , height 矩形的宽高 \n```javascript\nctx.fillStyle=\"blue\";\nctx.fillRect(150,150,150,150);\n```\n\n- 圆形\n\t\t- 方法: ``arc(150,150,75,0,2*Math.PI)`` //x,y,r,srart,stop  `` stroke()``\n```javascript\nctx.arc(150,150,75,0,2*Math.PI) //x,y,r,srart,stop\nctx.stroke()\n```\n\n- 文本字符\n\t\t- 方法: ``ctx.font = \"30px Arial\" ``字体效果      ``strokeText(\"一十四洲\",150,150)``内容 , x,y起点\n```javascript\nctx.font = \"30px Arial\"\nctx.strokeText(\"一十四洲\",150,150)//内容 , x,y起点\n```\n\n- 渐变\n\t\t- 方法:  \n\t\t\t\t\t- createLinearGradient() // 线性渐变\n\t\t\t\t\t- createRadialGradient() //径向渐变\n\t\t\t\t\t- addColorStop() \n```javascript\n// var grd1 = ctx.createLinearGradient(0,0,200,0); //线性渐变\nvar grd=ctx.createRadialGradient(75,50,5,90,60,100);//径向渐变\ngrd.addColorStop(0,'red')\ngrd.addColorStop(1,'white')\n```\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/5e74cede1bf74686b426a5570ed67466.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center)","slug":"canvas","published":1,"date":"2022-05-06T13:39:18.735Z","updated":"2022-05-06T13:39:37.934Z","_id":"cl2uhhcow00010gvo2ta27lli","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"canvas可以绘制路径-矩形-圆形-字符-渐变-以及-添加图像\"><a href=\"#canvas可以绘制路径-矩形-圆形-字符-渐变-以及-添加图像\" class=\"headerlink\" title=\"canvas可以绘制路径 , 矩形 , 圆形, 字符  , 渐变, 以及 添加图像\"></a>canvas可以绘制路径 , 矩形 , 圆形, 字符  , 渐变, 以及 添加图像</h2><p>首先要创建一个canvas容器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id=<span class=\"string\">&quot;myCanvas&quot;</span> width=<span class=\"string\">&quot;300&quot;</span> height=<span class=\"string\">&quot;300&quot;</span> &gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure>\n<p>获取容器 , 并创建context对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c=<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;myCanvas&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//创建context对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx=c.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>路径(直线)<pre><code>  - 方法:  ``moveTo(x,y)``         ``lineTo(x,y)``    x,y确定在画布里的起始位置和结束位置\n    - 使用  ``stroke()`` 方法来绘制\n</code></pre>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c=<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;myCanvas&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx=c.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">moveTo</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">lineTo</span>(<span class=\"number\">200</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">stroke</span>();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>矩形</p>\n<pre><code>  - 方法 : ``fillStyle=&quot;color&quot;``   ``fillRect(x,y,width,height)``  x,y 矩形的起点 , width , height 矩形的宽高 \n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.<span class=\"property\">fillStyle</span>=<span class=\"string\">&quot;blue&quot;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">fillRect</span>(<span class=\"number\">150</span>,<span class=\"number\">150</span>,<span class=\"number\">150</span>,<span class=\"number\">150</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>圆形</p>\n<pre><code>  - 方法: ``arc(150,150,75,0,2*Math.PI)`` //x,y,r,srart,stop  `` stroke()``\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.<span class=\"title function_\">arc</span>(<span class=\"number\">150</span>,<span class=\"number\">150</span>,<span class=\"number\">75</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>*<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>) <span class=\"comment\">//x,y,r,srart,stop</span></span><br><span class=\"line\">ctx.<span class=\"title function_\">stroke</span>()</span><br></pre></td></tr></table></figure></li>\n<li><p>文本字符</p>\n<pre><code>  - 方法: ``ctx.font = &quot;30px Arial&quot; ``字体效果      ``strokeText(&quot;一十四洲&quot;,150,150)``内容 , x,y起点\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.<span class=\"property\">font</span> = <span class=\"string\">&quot;30px Arial&quot;</span></span><br><span class=\"line\">ctx.<span class=\"title function_\">strokeText</span>(<span class=\"string\">&quot;一十四洲&quot;</span>,<span class=\"number\">150</span>,<span class=\"number\">150</span>)<span class=\"comment\">//内容 , x,y起点</span></span><br></pre></td></tr></table></figure></li>\n<li><p>渐变</p>\n<pre><code>  - 方法:  \n              - createLinearGradient() // 线性渐变\n              - createRadialGradient() //径向渐变\n              - addColorStop() \n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var grd1 = ctx.createLinearGradient(0,0,200,0); //线性渐变</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> grd=ctx.<span class=\"title function_\">createRadialGradient</span>(<span class=\"number\">75</span>,<span class=\"number\">50</span>,<span class=\"number\">5</span>,<span class=\"number\">90</span>,<span class=\"number\">60</span>,<span class=\"number\">100</span>);<span class=\"comment\">//径向渐变</span></span><br><span class=\"line\">grd.<span class=\"title function_\">addColorStop</span>(<span class=\"number\">0</span>,<span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">grd.<span class=\"title function_\">addColorStop</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;white&#x27;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/5e74cede1bf74686b426a5570ed67466.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"cover":"/img/avator.jpg","excerpt":"","more":"<h2 id=\"canvas可以绘制路径-矩形-圆形-字符-渐变-以及-添加图像\"><a href=\"#canvas可以绘制路径-矩形-圆形-字符-渐变-以及-添加图像\" class=\"headerlink\" title=\"canvas可以绘制路径 , 矩形 , 圆形, 字符  , 渐变, 以及 添加图像\"></a>canvas可以绘制路径 , 矩形 , 圆形, 字符  , 渐变, 以及 添加图像</h2><p>首先要创建一个canvas容器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id=<span class=\"string\">&quot;myCanvas&quot;</span> width=<span class=\"string\">&quot;300&quot;</span> height=<span class=\"string\">&quot;300&quot;</span> &gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure>\n<p>获取容器 , 并创建context对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c=<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;myCanvas&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//创建context对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx=c.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>路径(直线)<pre><code>  - 方法:  ``moveTo(x,y)``         ``lineTo(x,y)``    x,y确定在画布里的起始位置和结束位置\n    - 使用  ``stroke()`` 方法来绘制\n</code></pre>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c=<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;myCanvas&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx=c.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">moveTo</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">lineTo</span>(<span class=\"number\">200</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">stroke</span>();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>矩形</p>\n<pre><code>  - 方法 : ``fillStyle=&quot;color&quot;``   ``fillRect(x,y,width,height)``  x,y 矩形的起点 , width , height 矩形的宽高 \n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.<span class=\"property\">fillStyle</span>=<span class=\"string\">&quot;blue&quot;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">fillRect</span>(<span class=\"number\">150</span>,<span class=\"number\">150</span>,<span class=\"number\">150</span>,<span class=\"number\">150</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>圆形</p>\n<pre><code>  - 方法: ``arc(150,150,75,0,2*Math.PI)`` //x,y,r,srart,stop  `` stroke()``\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.<span class=\"title function_\">arc</span>(<span class=\"number\">150</span>,<span class=\"number\">150</span>,<span class=\"number\">75</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>*<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>) <span class=\"comment\">//x,y,r,srart,stop</span></span><br><span class=\"line\">ctx.<span class=\"title function_\">stroke</span>()</span><br></pre></td></tr></table></figure></li>\n<li><p>文本字符</p>\n<pre><code>  - 方法: ``ctx.font = &quot;30px Arial&quot; ``字体效果      ``strokeText(&quot;一十四洲&quot;,150,150)``内容 , x,y起点\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.<span class=\"property\">font</span> = <span class=\"string\">&quot;30px Arial&quot;</span></span><br><span class=\"line\">ctx.<span class=\"title function_\">strokeText</span>(<span class=\"string\">&quot;一十四洲&quot;</span>,<span class=\"number\">150</span>,<span class=\"number\">150</span>)<span class=\"comment\">//内容 , x,y起点</span></span><br></pre></td></tr></table></figure></li>\n<li><p>渐变</p>\n<pre><code>  - 方法:  \n              - createLinearGradient() // 线性渐变\n              - createRadialGradient() //径向渐变\n              - addColorStop() \n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var grd1 = ctx.createLinearGradient(0,0,200,0); //线性渐变</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> grd=ctx.<span class=\"title function_\">createRadialGradient</span>(<span class=\"number\">75</span>,<span class=\"number\">50</span>,<span class=\"number\">5</span>,<span class=\"number\">90</span>,<span class=\"number\">60</span>,<span class=\"number\">100</span>);<span class=\"comment\">//径向渐变</span></span><br><span class=\"line\">grd.<span class=\"title function_\">addColorStop</span>(<span class=\"number\">0</span>,<span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">grd.<span class=\"title function_\">addColorStop</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;white&#x27;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/5e74cede1bf74686b426a5570ed67466.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"vue_刷新当前页面的几种方法","_content":"第一个想到的方法是this.$router.push() , 但是会报错 , 不让自己页面跳转自己页面 , 就算解决了这个问题跳转了之后 , dom也不会渲染 , 页面的数据显示不出来 , 所以查询了一下方法来解决问题\n\n#  location.reload()  不推荐 : 页面出现一瞬间的空白\n1. 这个方法相当于( ctrl + R )刷新当前页面 , 但是刷新过后``vuex里面的值也会重新刷新`` , 当我们要实现多个组件根据 vuex 里面的值做相应的判断时 , 这个功能不能实现 , 于是我们结合``window.sessionStorage.getItem() 和 vuex ``以实现vuex中的值在本次会话的时候不会被刷新\n\n```javascript\n//freeze状态只出现一次 , 解封之后知道浏览器关闭都不在出现\nthis.$store.commit('changeFreeze')\n//  1. dom没有渲染 , 我们要重新渲染dom \nlocation.reload()//这种刷新方式太耗能了,亟待优化\n//  2. 强制刷新之后freeze还会出现-->把值保存在session中\nwindow.sessionStorage.setItem('freeze',0)\n\n\n以下是vuex中的\nfreeze: window.sessionStorage.getItem('freeze') || 1,\n\ndom页面根据vuex中的freeze来判断显不显示\n<div class=\"all0\" v-if=\"this.$store.state.freeze===1\">\n```\n\n# provide / inject \n这对选项是一起使用的 , 允许父组件向子孙组件注入一个依赖 , 如果子孙组件想要获取祖先组件的资源 , 就可以使用 inject 中的方法\nprovide : 一个对象 , 提供给子孙资源\ninject : 一个组件 , 子孙组件调用父组件的值\n\n使用provide / inject 来实现 当前页面刷新 , 组件自身刷新 , 并且重新渲染dom\n\n父组件中编写provide向子组件提供资源 , 利用 v-if ,来显示app在dom树上存在与否 \n\n```javascript\n<template>\n  <div id=\"app\">\n    <router-view v-if=\"isRouterAlive\"/>\n  </div>\n</template>\n<script>\nexport default {\n  provide() {\n    return {\n      reload:this.reload\n    }\n  },\n  data() {\n    return {\n      isRouterAlive:true\n    }\n  },\n  methods: {\n    reload(){\n      this.isRouterAlive = false\n      this.$nextTick(function(){\n        this.isRouterAlive = true\n      })\n    }\n  },\n}\n</script>\n```\n\n子组件中inject使用父组件提供的方法\n\n```javascript\nexport default {\n  //注入刷新依赖provide/inject\n  inject:['reload'],\n  methods:{\n  //使用inject中的方法\n  this.reload()\n  }\n}\n```\n# nextTick\n在下次dom刷新之后调用它的回调函数\n\n\n上面的nextTick的作用是在app刷新之后 , 重新给data中的 ``isRouterAlive 赋值true``\n```javascript\nthis.$nextTick(function(){\n        this.isRouterAlive = true\n      })\n```","source":"_posts/vue刷新页面.md","raw":"\n---\ntitle: vue_刷新当前页面的几种方法\n---\n第一个想到的方法是this.$router.push() , 但是会报错 , 不让自己页面跳转自己页面 , 就算解决了这个问题跳转了之后 , dom也不会渲染 , 页面的数据显示不出来 , 所以查询了一下方法来解决问题\n\n#  location.reload()  不推荐 : 页面出现一瞬间的空白\n1. 这个方法相当于( ctrl + R )刷新当前页面 , 但是刷新过后``vuex里面的值也会重新刷新`` , 当我们要实现多个组件根据 vuex 里面的值做相应的判断时 , 这个功能不能实现 , 于是我们结合``window.sessionStorage.getItem() 和 vuex ``以实现vuex中的值在本次会话的时候不会被刷新\n\n```javascript\n//freeze状态只出现一次 , 解封之后知道浏览器关闭都不在出现\nthis.$store.commit('changeFreeze')\n//  1. dom没有渲染 , 我们要重新渲染dom \nlocation.reload()//这种刷新方式太耗能了,亟待优化\n//  2. 强制刷新之后freeze还会出现-->把值保存在session中\nwindow.sessionStorage.setItem('freeze',0)\n\n\n以下是vuex中的\nfreeze: window.sessionStorage.getItem('freeze') || 1,\n\ndom页面根据vuex中的freeze来判断显不显示\n<div class=\"all0\" v-if=\"this.$store.state.freeze===1\">\n```\n\n# provide / inject \n这对选项是一起使用的 , 允许父组件向子孙组件注入一个依赖 , 如果子孙组件想要获取祖先组件的资源 , 就可以使用 inject 中的方法\nprovide : 一个对象 , 提供给子孙资源\ninject : 一个组件 , 子孙组件调用父组件的值\n\n使用provide / inject 来实现 当前页面刷新 , 组件自身刷新 , 并且重新渲染dom\n\n父组件中编写provide向子组件提供资源 , 利用 v-if ,来显示app在dom树上存在与否 \n\n```javascript\n<template>\n  <div id=\"app\">\n    <router-view v-if=\"isRouterAlive\"/>\n  </div>\n</template>\n<script>\nexport default {\n  provide() {\n    return {\n      reload:this.reload\n    }\n  },\n  data() {\n    return {\n      isRouterAlive:true\n    }\n  },\n  methods: {\n    reload(){\n      this.isRouterAlive = false\n      this.$nextTick(function(){\n        this.isRouterAlive = true\n      })\n    }\n  },\n}\n</script>\n```\n\n子组件中inject使用父组件提供的方法\n\n```javascript\nexport default {\n  //注入刷新依赖provide/inject\n  inject:['reload'],\n  methods:{\n  //使用inject中的方法\n  this.reload()\n  }\n}\n```\n# nextTick\n在下次dom刷新之后调用它的回调函数\n\n\n上面的nextTick的作用是在app刷新之后 , 重新给data中的 ``isRouterAlive 赋值true``\n```javascript\nthis.$nextTick(function(){\n        this.isRouterAlive = true\n      })\n```","slug":"vue刷新页面","published":1,"date":"2022-05-06T13:40:10.259Z","updated":"2022-05-06T13:40:58.014Z","_id":"cl2uhiggp00020gvo3ndph4ng","comments":1,"layout":"post","photos":[],"link":"","content":"<p>第一个想到的方法是this.$router.push() , 但是会报错 , 不让自己页面跳转自己页面 , 就算解决了这个问题跳转了之后 , dom也不会渲染 , 页面的数据显示不出来 , 所以查询了一下方法来解决问题</p>\n<h1 id=\"location-reload-不推荐-页面出现一瞬间的空白\"><a href=\"#location-reload-不推荐-页面出现一瞬间的空白\" class=\"headerlink\" title=\"location.reload()  不推荐 : 页面出现一瞬间的空白\"></a>location.reload()  不推荐 : 页面出现一瞬间的空白</h1><ol>\n<li>这个方法相当于( ctrl + R )刷新当前页面 , 但是刷新过后<code>vuex里面的值也会重新刷新</code> , 当我们要实现多个组件根据 vuex 里面的值做相应的判断时 , 这个功能不能实现 , 于是我们结合<code>window.sessionStorage.getItem() 和 vuex </code>以实现vuex中的值在本次会话的时候不会被刷新</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//freeze状态只出现一次 , 解封之后知道浏览器关闭都不在出现</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;changeFreeze&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//  1. dom没有渲染 , 我们要重新渲染dom </span></span><br><span class=\"line\">location.<span class=\"title function_\">reload</span>()<span class=\"comment\">//这种刷新方式太耗能了,亟待优化</span></span><br><span class=\"line\"><span class=\"comment\">//  2. 强制刷新之后freeze还会出现--&gt;把值保存在session中</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">sessionStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;freeze&#x27;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">以下是vuex中的</span><br><span class=\"line\"><span class=\"attr\">freeze</span>: <span class=\"variable language_\">window</span>.<span class=\"property\">sessionStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;freeze&#x27;</span>) || <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">dom页面根据vuex中的freeze来判断显不显示</span><br><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;all0&quot;</span> v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;this.$store.state.freeze===1&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"provide-inject\"><a href=\"#provide-inject\" class=\"headerlink\" title=\"provide / inject\"></a>provide / inject</h1><p>这对选项是一起使用的 , 允许父组件向子孙组件注入一个依赖 , 如果子孙组件想要获取祖先组件的资源 , 就可以使用 inject 中的方法<br>provide : 一个对象 , 提供给子孙资源<br>inject : 一个组件 , 子孙组件调用父组件的值</p>\n<p>使用provide / inject 来实现 当前页面刷新 , 组件自身刷新 , 并且重新渲染dom</p>\n<p>父组件中编写provide向子组件提供资源 , 利用 v-if ,来显示app在dom树上存在与否 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isRouterAlive&quot;</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"title function_\">provide</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">reload</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">reload</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">isRouterAlive</span>:<span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title function_\">reload</span>(<span class=\"params\"></span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">this</span>.<span class=\"property\">isRouterAlive</span> = <span class=\"literal\">false</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">this</span>.$nextTick(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"variable language_\">this</span>.<span class=\"property\">isRouterAlive</span> = <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>子组件中inject使用父组件提供的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//注入刷新依赖provide/inject</span></span><br><span class=\"line\">  <span class=\"attr\">inject</span>:[<span class=\"string\">&#x27;reload&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">methods</span>:&#123;</span><br><span class=\"line\">  <span class=\"comment\">//使用inject中的方法</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">reload</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"nextTick\"></a>nextTick</h1><p>在下次dom刷新之后调用它的回调函数</p>\n<p>上面的nextTick的作用是在app刷新之后 , 重新给data中的 <code>isRouterAlive 赋值true</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.$nextTick(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">isRouterAlive</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":"/img/avator.jpg","excerpt":"","more":"<p>第一个想到的方法是this.$router.push() , 但是会报错 , 不让自己页面跳转自己页面 , 就算解决了这个问题跳转了之后 , dom也不会渲染 , 页面的数据显示不出来 , 所以查询了一下方法来解决问题</p>\n<h1 id=\"location-reload-不推荐-页面出现一瞬间的空白\"><a href=\"#location-reload-不推荐-页面出现一瞬间的空白\" class=\"headerlink\" title=\"location.reload()  不推荐 : 页面出现一瞬间的空白\"></a>location.reload()  不推荐 : 页面出现一瞬间的空白</h1><ol>\n<li>这个方法相当于( ctrl + R )刷新当前页面 , 但是刷新过后<code>vuex里面的值也会重新刷新</code> , 当我们要实现多个组件根据 vuex 里面的值做相应的判断时 , 这个功能不能实现 , 于是我们结合<code>window.sessionStorage.getItem() 和 vuex </code>以实现vuex中的值在本次会话的时候不会被刷新</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//freeze状态只出现一次 , 解封之后知道浏览器关闭都不在出现</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;changeFreeze&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//  1. dom没有渲染 , 我们要重新渲染dom </span></span><br><span class=\"line\">location.<span class=\"title function_\">reload</span>()<span class=\"comment\">//这种刷新方式太耗能了,亟待优化</span></span><br><span class=\"line\"><span class=\"comment\">//  2. 强制刷新之后freeze还会出现--&gt;把值保存在session中</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">sessionStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;freeze&#x27;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">以下是vuex中的</span><br><span class=\"line\"><span class=\"attr\">freeze</span>: <span class=\"variable language_\">window</span>.<span class=\"property\">sessionStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;freeze&#x27;</span>) || <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">dom页面根据vuex中的freeze来判断显不显示</span><br><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;all0&quot;</span> v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;this.$store.state.freeze===1&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"provide-inject\"><a href=\"#provide-inject\" class=\"headerlink\" title=\"provide / inject\"></a>provide / inject</h1><p>这对选项是一起使用的 , 允许父组件向子孙组件注入一个依赖 , 如果子孙组件想要获取祖先组件的资源 , 就可以使用 inject 中的方法<br>provide : 一个对象 , 提供给子孙资源<br>inject : 一个组件 , 子孙组件调用父组件的值</p>\n<p>使用provide / inject 来实现 当前页面刷新 , 组件自身刷新 , 并且重新渲染dom</p>\n<p>父组件中编写provide向子组件提供资源 , 利用 v-if ,来显示app在dom树上存在与否 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isRouterAlive&quot;</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"title function_\">provide</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">reload</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">reload</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">isRouterAlive</span>:<span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title function_\">reload</span>(<span class=\"params\"></span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">this</span>.<span class=\"property\">isRouterAlive</span> = <span class=\"literal\">false</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">this</span>.$nextTick(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"variable language_\">this</span>.<span class=\"property\">isRouterAlive</span> = <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>子组件中inject使用父组件提供的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//注入刷新依赖provide/inject</span></span><br><span class=\"line\">  <span class=\"attr\">inject</span>:[<span class=\"string\">&#x27;reload&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">methods</span>:&#123;</span><br><span class=\"line\">  <span class=\"comment\">//使用inject中的方法</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">reload</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"nextTick\"></a>nextTick</h1><p>在下次dom刷新之后调用它的回调函数</p>\n<p>上面的nextTick的作用是在app刷新之后 , 重新给data中的 <code>isRouterAlive 赋值true</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.$nextTick(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">isRouterAlive</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure>"},{"title":"vue_路由","_content":"\n## 路由\n\n \t1. 理解: 一个路由(route)就是一组映射关系(key-value),多个路由(routes)需要的路由器(router)进行管理\n \t2. 前端路由: key是路径,value是组件\n\n### 1.基本使用\n\n 1. 安装vue-router,命令: `npm i vue-router`\n\n 2. 引入vue-router之后应用插件: Vue.use(VueRouter)\n\n 3. 编写router配置项\n\n    ````js\n    //该文件专门创建整个应用的路由器\n    import VueRouter from 'vue-router'\n    //引入组件\n    import About from '../components/About'\n    import Home from '../components/Home'\n    \n    //创建并暴露一个路由器\n    export default new VueRouter({\n        routes:[\n            {\n                path:'/about',\n                component:About\n            },\n            {\n                path:'/home',\n                component:Home\n            }\n        ]\n    })\n    ````\n\n    4. 实现切换(active-class可配置高亮样式)\n\n    ````js\n    <router-link class=\"list-group-item\" active-class=\"active\" to=\"/about\">About</router-link>\n    ````\n\n    5. 指定展示位置\n\n    ````js\n    <router-view></router-view>\n    ````\n\n\n### 2.几个注意点\n\n1. 路由组件通常存放在`page`文件夹,一般组件通常存放在`component`文件夹\n2. 通过切换,'隐藏'了的路由组件,默认是被销毁掉的,需要的时候再去挂载\n3. 每个组件都有自己的`$route`属性,里面储存着自己的路由信息\n4. 整个应用只有一个router,可以通过组件的`$router`属性获取到\n\n### 3.多级路由\n\n1. 配置路由规则,使用chlidren配置项:\n\n   ````js\n    routes:[\n           {\n               path:'/about',\n               component:About\n           },\n           {\n               path:'/home',\n               component:Home,\n               children:[\n                   {\n                       path:'message',\n                       component:Message\n                   },\n                   {\n                       path:'news',\n                       component:News\n                   }\n               ]\n           },\n           \n       ]\n   ````\n\n2. 跳转(要写完整的路径):\n\n   ````js\n   <router-link class=\"list-group-item\" active-class=\"active\" to=\"/home/news\">News</router-link>\n   ````\n\n## 路由参数有几种?\nquery、params 两个属性可以传递参数\n\n``query``参数 : 不属于路径当中的一部分，类似于 get 请求，\n - 地址栏表现为 /search?k1=v1&k2=v2  \t\t\n - query 参数对应的路由信息 path: \"/search\"\n\n``params``参数：属于路径当中的一部分，需要注意，在配置路由的时候，需要占位 ,\n - 地址栏表现为 /search/v1/v2 \n - params参数对应的路由信息`` path:\"/search/:v1/:v2``\"\n - ``注:``路由携带params参数的时候,若使用``to的对象写法(常用)``,则不能使用path配置项,必须使用``name``配置!\n\n### 4.路由的query参数\n\n 1. 传递参数:\n\n    ````js\n    <!-- 跳转路由并携带参数,to的字符串写法 -->\n              <!-- <router-link :to=\"`/home/message/detail?id=${m.id}&title=${m.title}`\">{{message.title}}</router-link>&nbsp;&nbsp; -->\n              \n              <!-- 跳转路由并携带query参数,to的对象写法 -->\n                <router-link :to=\"{\n                    path:'/home/message/detail',\n                    query:{\n                        id:message.id,\n                        title:message.title\n                    }\n                }\">\n                  {{message.title}}\n                </router-link>\n    ````\n\n    2.接收参数:\n\n    ````js\n    $route.query.id\n    $route.query.title\n    ````\n\n\n### 5.命名路由\n\n1.作用: 可以简化路由的跳转\n\n2.如何使用\n\n 1. 给路由命名:\n\n    ````js\n    path:'/home',\n                component:Home,\n                children:[\n                    {\n                        path:'message',\n                        component:Message, \n                        children:[\n                            {\n                                name:'xiangqing',\n                                path:'detail',\n                                component:Detail\n                            }\n                        ]\n                    },\n                    {\n                        path:'news',\n                        component:News\n                    }\n                ]\n    ````\n\n2. 简化跳转\n\n   ````js\n   <router-link class=\"list-group-item\" active-class=\"active\" :to=\"{name:'guanyu'}\">About</router-link>\n             <router-link class=\"list-group-item\" active-class=\"active\" to=\"/home\">Home</router-link>\n   \n   <router-link :to=\"{\n                   name:'xiangqing',\n                   query:{\n                       id:message.id,\n                       title:message.title\n                   }\n               }\">\n                 {{message.title}}\n               </router-link>\n   ````\n\n\n### 6.路由的params参数\n\n1. 配置路由,声明接收params参数\n\n   ````js\n   path:'/home',\n               component:Home,\n               children:[\n                   {\n                       path:'message',\n                       component:Message, \n                       children:[\n                           {\n                               name:'xiangqing',\n                               path:'detail/:id/:title',\n                               component:Detail\n                           }\n                       ]\n                   },\n                   {\n                       path:'news',\n                       component:News\n                   }\n               ]\n   ````\n\n2. 传递参数\n\n   ````js\n   <!-- 跳转路由并携带params参数,to的字符串写法 -->\n             <!-- <router-link :to=\"`/home/message/detail/${message.id}/${message.title}`\">{{message.title}}</router-link>&nbsp;&nbsp; -->\n             \n             <!-- 跳转路由并携带query参数,to的对象写法 -->\n               <router-link :to=\"{\n                   name:'xiangqing',\n                   params:{\n                       id:message.id,\n                       title:message.title\n                   }\n               }\">\n                 {{message.title}}\n               </router-link>\n   ````\n\n   注意:路由携带params参数的时候,若使用to的对象写法,则不能使用path配置项,必须使用name配置!\n\n   3. 接收参数\n\n      ````js\n      $route.params.id\n      $\n      ````\n\n\n### 7.路由的props配置\n\n\t作用:让路由组件更加方便的接收到参数\n\n````js\n{\n                            \n         name:'xiangqing',\n         path:'detail/',              \n         component:Detail,\n\n\n//props的第一种写法,值为对象,该对象的所有key-value都会以props的形式传给Detail组件.\n props:{a:1,b:'hello'}\n \n//props的第二种写法,值为布尔值.若布尔值为真,就会把该路由组件收到的所有params参数,以props的形式传给Detail组件\nprops:true\n\n//props的第三种写法,值为函数,\n props({query:{id,title}}){//连续结构赋值的写法\n     return{id:id,title:title}\n }\n\nprops($route){\n    return{                     \t\t\t\n    id:$route.query.id,\n    title:$route.query.title\n          }\n             }\n\n````\n\n### 8.`<router-link>`的replace属性\n\n1. 作用: 控制路由跳转时操作浏览器历史纪录的模式\n\n2. 浏览器历史记录有两种写入方式: 分别为`push`和`replace`,push是追加历史记录,`replace`是替换当前记录,路由跳转的时候默认为`push`\n\n3. 如何开启`repalce`模式,`<router-link replce.....>News</router-link>`\n\n\n### 9.编程时路由导航\n\n1. 作用:不借助`<router-link>`实现路由跳转,让路由跳转更加灵活\n\n2. 具体编码:\n\n   ````js\n   //$router的两个API(\n   pushShow(m){\n         this.$router.push({\n           name:'xiangqing',\n           query:{\n             id:m.id,\n             title:m.title\n           }\n         })\n       },\n       replaceShow(m){\n         this.$router.replace({\n           name:'xiangqing',\n         query:{\n           id:m.id,\n           title:m.title\n         }\n         })\n       }\n   \n   forward(){\n         this.$router.forward()\n       },\n   back(){\n         this.$router.back()\n       },\n      go(){\n         this.$router.go(2)\n       }\n   ````\n\n   ### 10.缓存路由组件\n\n    1. 作用:让不展示的路由组件保持挂载,不被销毁\n\n    2. 具体编码\n\n       ````js\n       <keep-alive include=\"News\">\n       <router-view></router-view>\n       </keep-alive>\n       ````\n\n   ### 11.两个新的生命周期钩子\n\n   1. 作用:路由组件所独有的两个钩子,用于捕获路由组件的激活状态\n   2. 具体名字:\n      1. `actived`路由组件被激活时触发\n      2. `deactived`路由组件失活时触发\n\n   ### 12.路由守卫\n\n   1. 作用:对路由进行权限控制\n   2. 分类:全局守卫,独享守卫,组件内守卫\n   3. 全局守卫:\n\n    ````js\n   //全局前置路由守卫---初始化的时候被调用,每次路由切换之前被调用\n   router.beforeEach((to,from,next)=>{\n    console.log('前置路由守卫')\n    if(to.meta.isAuth)//判断是否需要鉴权\n    {\n        if(localStorage.getItem('school')==='atguigu')//权限控制的具体规则\n        next()\n        else\n        alert('学校名称不正确,无权查看!')\n    }   \n    else next()//放行\n   })\n   //全局后置路由守卫---初始化的时候被调用,每次路由切换之后被调用\n   router.afterEach((to,from)=>{\n    console.log('后置路由守卫')\n    document.title = to.meta.title || '硅谷系统'//修改网页的title\n   })\n    ````\n\n   4. 独享路由守卫\n\n   ````js\n   beforeEnter:(to,from,next)=>{\n                        if(localStorage.getItem('school')===\"atguigu\")\n                        next()\n                        else\n                        alert('学校名称不正确,无权查看!')\n                    }\n   ````\n\n   5. 组件内守卫\n\n   ````js\n   //进入守卫,通过路由规则,进入该组件时被调用\n    beforeRouteEnter (to, from, next) {}\n   \n   //离开守卫,通过路由规则,离开该组件时被调用\n   beforeRouteLeave (to, from, next) {}\n   ````\n\n   ### 13.路由器的两种工作模式\n\n     1. 对于一个`url`来说,什么是hash值?----#及其后面的内容就是hashzhi\n     2. hash值不会包含在HTTP请求之中,即:hash值不会带给服务器\n     3. hash模式:\n        1. 地址中永远带着#号,不美观\n        2. 若以后将地址通过第三方手机app分享,若app校验严格,则地址也会被标记为不合法\n        3. 兼容性较好\n     4. history模式:\n        1. 地址干净,美观\n        2. 兼容性和hash模式相比略差\n        3. 应用部署上线时需要后端人员支持,解决刷新页面服务端404的问题\n### 考题\n1. 路由传递参数（对象写法）path是否可以结合params参数一起使用?\n\n```javascript\n//不可以：不能这样书写,程序会崩掉,必须使用name\n<router-link :to=\"{\n                name:'xiangqing',\n                params:{\n                    id:message.id,\n                    title:message.title\n                }\n            }\">\n```\n2. 如何指定params参数可传可不传? \n\n```javascript\n //在使用params传参的时候,路由配置如下\n path: \"/search/:value?\", ?表示该参数可传可不传\n```\n\n3. params参数可以传递也可以不传递，但是如果传递是空串，如何解决？\n```javascript\nthis.$router.push({\n  name: \"home\",\n  params: {\n    id: \"\" || undefined,//在参数的后面加入\n  },\n});\n```\n\n4. 如果指定name与params配置, 但params中数据是一个\"\", 无法跳转，路径会出问题\n5.  路由组件能不能传递props数据?\n6. 多次执行相同的 push 报错问题\n\t``原因``: push是一个promise,promise需要传递成功和失败两个参数,我们的push中没有传递\n\t解决方法一:\n\t\n\n```javascript\nthis.$router.push({name:‘Search’,params:{keyword:\"…\"||undefined}},()=>{},()=>{})\n//后面两项分别代表执行成功和失败的回调函数,此方法只能解决这一次的问题\n```\n\t解决方法二:在router中的index重写该方法\n```javascript\n//1、先把VueRouter原型对象的push，保存一份\nlet originPush = VueRouter.prototype.push;\n//2、重写push|replace\n//第一个参数：告诉原来的push，跳转的目标位置和传递了哪些参数\nVueRouter.prototype.push = function (location, resolve, reject) {\n  if (resolve && reject) {\n    originPush.call(this, location, resolve, reject);\n  } else {\n    originPush.call(\n      this,\n      location,\n      () => {},\n      () => {}\n    );\n  }\n};\n```\n\n​\t","source":"_posts/路由.md","raw":"---\ntitle: vue_路由\n---\n\n## 路由\n\n \t1. 理解: 一个路由(route)就是一组映射关系(key-value),多个路由(routes)需要的路由器(router)进行管理\n \t2. 前端路由: key是路径,value是组件\n\n### 1.基本使用\n\n 1. 安装vue-router,命令: `npm i vue-router`\n\n 2. 引入vue-router之后应用插件: Vue.use(VueRouter)\n\n 3. 编写router配置项\n\n    ````js\n    //该文件专门创建整个应用的路由器\n    import VueRouter from 'vue-router'\n    //引入组件\n    import About from '../components/About'\n    import Home from '../components/Home'\n    \n    //创建并暴露一个路由器\n    export default new VueRouter({\n        routes:[\n            {\n                path:'/about',\n                component:About\n            },\n            {\n                path:'/home',\n                component:Home\n            }\n        ]\n    })\n    ````\n\n    4. 实现切换(active-class可配置高亮样式)\n\n    ````js\n    <router-link class=\"list-group-item\" active-class=\"active\" to=\"/about\">About</router-link>\n    ````\n\n    5. 指定展示位置\n\n    ````js\n    <router-view></router-view>\n    ````\n\n\n### 2.几个注意点\n\n1. 路由组件通常存放在`page`文件夹,一般组件通常存放在`component`文件夹\n2. 通过切换,'隐藏'了的路由组件,默认是被销毁掉的,需要的时候再去挂载\n3. 每个组件都有自己的`$route`属性,里面储存着自己的路由信息\n4. 整个应用只有一个router,可以通过组件的`$router`属性获取到\n\n### 3.多级路由\n\n1. 配置路由规则,使用chlidren配置项:\n\n   ````js\n    routes:[\n           {\n               path:'/about',\n               component:About\n           },\n           {\n               path:'/home',\n               component:Home,\n               children:[\n                   {\n                       path:'message',\n                       component:Message\n                   },\n                   {\n                       path:'news',\n                       component:News\n                   }\n               ]\n           },\n           \n       ]\n   ````\n\n2. 跳转(要写完整的路径):\n\n   ````js\n   <router-link class=\"list-group-item\" active-class=\"active\" to=\"/home/news\">News</router-link>\n   ````\n\n## 路由参数有几种?\nquery、params 两个属性可以传递参数\n\n``query``参数 : 不属于路径当中的一部分，类似于 get 请求，\n - 地址栏表现为 /search?k1=v1&k2=v2  \t\t\n - query 参数对应的路由信息 path: \"/search\"\n\n``params``参数：属于路径当中的一部分，需要注意，在配置路由的时候，需要占位 ,\n - 地址栏表现为 /search/v1/v2 \n - params参数对应的路由信息`` path:\"/search/:v1/:v2``\"\n - ``注:``路由携带params参数的时候,若使用``to的对象写法(常用)``,则不能使用path配置项,必须使用``name``配置!\n\n### 4.路由的query参数\n\n 1. 传递参数:\n\n    ````js\n    <!-- 跳转路由并携带参数,to的字符串写法 -->\n              <!-- <router-link :to=\"`/home/message/detail?id=${m.id}&title=${m.title}`\">{{message.title}}</router-link>&nbsp;&nbsp; -->\n              \n              <!-- 跳转路由并携带query参数,to的对象写法 -->\n                <router-link :to=\"{\n                    path:'/home/message/detail',\n                    query:{\n                        id:message.id,\n                        title:message.title\n                    }\n                }\">\n                  {{message.title}}\n                </router-link>\n    ````\n\n    2.接收参数:\n\n    ````js\n    $route.query.id\n    $route.query.title\n    ````\n\n\n### 5.命名路由\n\n1.作用: 可以简化路由的跳转\n\n2.如何使用\n\n 1. 给路由命名:\n\n    ````js\n    path:'/home',\n                component:Home,\n                children:[\n                    {\n                        path:'message',\n                        component:Message, \n                        children:[\n                            {\n                                name:'xiangqing',\n                                path:'detail',\n                                component:Detail\n                            }\n                        ]\n                    },\n                    {\n                        path:'news',\n                        component:News\n                    }\n                ]\n    ````\n\n2. 简化跳转\n\n   ````js\n   <router-link class=\"list-group-item\" active-class=\"active\" :to=\"{name:'guanyu'}\">About</router-link>\n             <router-link class=\"list-group-item\" active-class=\"active\" to=\"/home\">Home</router-link>\n   \n   <router-link :to=\"{\n                   name:'xiangqing',\n                   query:{\n                       id:message.id,\n                       title:message.title\n                   }\n               }\">\n                 {{message.title}}\n               </router-link>\n   ````\n\n\n### 6.路由的params参数\n\n1. 配置路由,声明接收params参数\n\n   ````js\n   path:'/home',\n               component:Home,\n               children:[\n                   {\n                       path:'message',\n                       component:Message, \n                       children:[\n                           {\n                               name:'xiangqing',\n                               path:'detail/:id/:title',\n                               component:Detail\n                           }\n                       ]\n                   },\n                   {\n                       path:'news',\n                       component:News\n                   }\n               ]\n   ````\n\n2. 传递参数\n\n   ````js\n   <!-- 跳转路由并携带params参数,to的字符串写法 -->\n             <!-- <router-link :to=\"`/home/message/detail/${message.id}/${message.title}`\">{{message.title}}</router-link>&nbsp;&nbsp; -->\n             \n             <!-- 跳转路由并携带query参数,to的对象写法 -->\n               <router-link :to=\"{\n                   name:'xiangqing',\n                   params:{\n                       id:message.id,\n                       title:message.title\n                   }\n               }\">\n                 {{message.title}}\n               </router-link>\n   ````\n\n   注意:路由携带params参数的时候,若使用to的对象写法,则不能使用path配置项,必须使用name配置!\n\n   3. 接收参数\n\n      ````js\n      $route.params.id\n      $\n      ````\n\n\n### 7.路由的props配置\n\n\t作用:让路由组件更加方便的接收到参数\n\n````js\n{\n                            \n         name:'xiangqing',\n         path:'detail/',              \n         component:Detail,\n\n\n//props的第一种写法,值为对象,该对象的所有key-value都会以props的形式传给Detail组件.\n props:{a:1,b:'hello'}\n \n//props的第二种写法,值为布尔值.若布尔值为真,就会把该路由组件收到的所有params参数,以props的形式传给Detail组件\nprops:true\n\n//props的第三种写法,值为函数,\n props({query:{id,title}}){//连续结构赋值的写法\n     return{id:id,title:title}\n }\n\nprops($route){\n    return{                     \t\t\t\n    id:$route.query.id,\n    title:$route.query.title\n          }\n             }\n\n````\n\n### 8.`<router-link>`的replace属性\n\n1. 作用: 控制路由跳转时操作浏览器历史纪录的模式\n\n2. 浏览器历史记录有两种写入方式: 分别为`push`和`replace`,push是追加历史记录,`replace`是替换当前记录,路由跳转的时候默认为`push`\n\n3. 如何开启`repalce`模式,`<router-link replce.....>News</router-link>`\n\n\n### 9.编程时路由导航\n\n1. 作用:不借助`<router-link>`实现路由跳转,让路由跳转更加灵活\n\n2. 具体编码:\n\n   ````js\n   //$router的两个API(\n   pushShow(m){\n         this.$router.push({\n           name:'xiangqing',\n           query:{\n             id:m.id,\n             title:m.title\n           }\n         })\n       },\n       replaceShow(m){\n         this.$router.replace({\n           name:'xiangqing',\n         query:{\n           id:m.id,\n           title:m.title\n         }\n         })\n       }\n   \n   forward(){\n         this.$router.forward()\n       },\n   back(){\n         this.$router.back()\n       },\n      go(){\n         this.$router.go(2)\n       }\n   ````\n\n   ### 10.缓存路由组件\n\n    1. 作用:让不展示的路由组件保持挂载,不被销毁\n\n    2. 具体编码\n\n       ````js\n       <keep-alive include=\"News\">\n       <router-view></router-view>\n       </keep-alive>\n       ````\n\n   ### 11.两个新的生命周期钩子\n\n   1. 作用:路由组件所独有的两个钩子,用于捕获路由组件的激活状态\n   2. 具体名字:\n      1. `actived`路由组件被激活时触发\n      2. `deactived`路由组件失活时触发\n\n   ### 12.路由守卫\n\n   1. 作用:对路由进行权限控制\n   2. 分类:全局守卫,独享守卫,组件内守卫\n   3. 全局守卫:\n\n    ````js\n   //全局前置路由守卫---初始化的时候被调用,每次路由切换之前被调用\n   router.beforeEach((to,from,next)=>{\n    console.log('前置路由守卫')\n    if(to.meta.isAuth)//判断是否需要鉴权\n    {\n        if(localStorage.getItem('school')==='atguigu')//权限控制的具体规则\n        next()\n        else\n        alert('学校名称不正确,无权查看!')\n    }   \n    else next()//放行\n   })\n   //全局后置路由守卫---初始化的时候被调用,每次路由切换之后被调用\n   router.afterEach((to,from)=>{\n    console.log('后置路由守卫')\n    document.title = to.meta.title || '硅谷系统'//修改网页的title\n   })\n    ````\n\n   4. 独享路由守卫\n\n   ````js\n   beforeEnter:(to,from,next)=>{\n                        if(localStorage.getItem('school')===\"atguigu\")\n                        next()\n                        else\n                        alert('学校名称不正确,无权查看!')\n                    }\n   ````\n\n   5. 组件内守卫\n\n   ````js\n   //进入守卫,通过路由规则,进入该组件时被调用\n    beforeRouteEnter (to, from, next) {}\n   \n   //离开守卫,通过路由规则,离开该组件时被调用\n   beforeRouteLeave (to, from, next) {}\n   ````\n\n   ### 13.路由器的两种工作模式\n\n     1. 对于一个`url`来说,什么是hash值?----#及其后面的内容就是hashzhi\n     2. hash值不会包含在HTTP请求之中,即:hash值不会带给服务器\n     3. hash模式:\n        1. 地址中永远带着#号,不美观\n        2. 若以后将地址通过第三方手机app分享,若app校验严格,则地址也会被标记为不合法\n        3. 兼容性较好\n     4. history模式:\n        1. 地址干净,美观\n        2. 兼容性和hash模式相比略差\n        3. 应用部署上线时需要后端人员支持,解决刷新页面服务端404的问题\n### 考题\n1. 路由传递参数（对象写法）path是否可以结合params参数一起使用?\n\n```javascript\n//不可以：不能这样书写,程序会崩掉,必须使用name\n<router-link :to=\"{\n                name:'xiangqing',\n                params:{\n                    id:message.id,\n                    title:message.title\n                }\n            }\">\n```\n2. 如何指定params参数可传可不传? \n\n```javascript\n //在使用params传参的时候,路由配置如下\n path: \"/search/:value?\", ?表示该参数可传可不传\n```\n\n3. params参数可以传递也可以不传递，但是如果传递是空串，如何解决？\n```javascript\nthis.$router.push({\n  name: \"home\",\n  params: {\n    id: \"\" || undefined,//在参数的后面加入\n  },\n});\n```\n\n4. 如果指定name与params配置, 但params中数据是一个\"\", 无法跳转，路径会出问题\n5.  路由组件能不能传递props数据?\n6. 多次执行相同的 push 报错问题\n\t``原因``: push是一个promise,promise需要传递成功和失败两个参数,我们的push中没有传递\n\t解决方法一:\n\t\n\n```javascript\nthis.$router.push({name:‘Search’,params:{keyword:\"…\"||undefined}},()=>{},()=>{})\n//后面两项分别代表执行成功和失败的回调函数,此方法只能解决这一次的问题\n```\n\t解决方法二:在router中的index重写该方法\n```javascript\n//1、先把VueRouter原型对象的push，保存一份\nlet originPush = VueRouter.prototype.push;\n//2、重写push|replace\n//第一个参数：告诉原来的push，跳转的目标位置和传递了哪些参数\nVueRouter.prototype.push = function (location, resolve, reject) {\n  if (resolve && reject) {\n    originPush.call(this, location, resolve, reject);\n  } else {\n    originPush.call(\n      this,\n      location,\n      () => {},\n      () => {}\n    );\n  }\n};\n```\n\n​\t","slug":"路由","published":1,"date":"2022-05-06T13:43:07.657Z","updated":"2022-05-06T13:43:24.176Z","_id":"cl2uhm9br00030gvocvue7zkc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><pre><code> 1. 理解: 一个路由(route)就是一组映射关系(key-value),多个路由(routes)需要的路由器(router)进行管理\n 2. 前端路由: key是路径,value是组件\n</code></pre>\n<h3 id=\"1-基本使用\"><a href=\"#1-基本使用\" class=\"headerlink\" title=\"1.基本使用\"></a>1.基本使用</h3><ol>\n<li><p>安装vue-router,命令: <code>npm i vue-router</code></p>\n</li>\n<li><p>引入vue-router之后应用插件: Vue.use(VueRouter)</p>\n</li>\n<li><p>编写router配置项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该文件专门创建整个应用的路由器</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">VueRouter</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//引入组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">About</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../components/About&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../components/Home&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建并暴露一个路由器</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VueRouter</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">routes</span>:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/about&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>:<span class=\"title class_\">About</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>:<span class=\"title class_\">Home</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>实现切换(active-class可配置高亮样式)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link <span class=\"keyword\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span> active-<span class=\"keyword\">class</span>=<span class=\"string\">&quot;active&quot;</span> to=<span class=\"string\">&quot;/about&quot;</span>&gt;<span class=\"title class_\">About</span>&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>指定展示位置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"2-几个注意点\"><a href=\"#2-几个注意点\" class=\"headerlink\" title=\"2.几个注意点\"></a>2.几个注意点</h3><ol>\n<li>路由组件通常存放在<code>page</code>文件夹,一般组件通常存放在<code>component</code>文件夹</li>\n<li>通过切换,’隐藏’了的路由组件,默认是被销毁掉的,需要的时候再去挂载</li>\n<li>每个组件都有自己的<code>$route</code>属性,里面储存着自己的路由信息</li>\n<li>整个应用只有一个router,可以通过组件的<code>$router</code>属性获取到</li>\n</ol>\n<h3 id=\"3-多级路由\"><a href=\"#3-多级路由\" class=\"headerlink\" title=\"3.多级路由\"></a>3.多级路由</h3><ol>\n<li><p>配置路由规则,使用chlidren配置项:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">routes</span>:[</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/about&#x27;</span>,</span><br><span class=\"line\">           <span class=\"attr\">component</span>:<span class=\"title class_\">About</span></span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">           <span class=\"attr\">component</span>:<span class=\"title class_\">Home</span>,</span><br><span class=\"line\">           <span class=\"attr\">children</span>:[</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">path</span>:<span class=\"string\">&#x27;message&#x27;</span>,</span><br><span class=\"line\">                   <span class=\"attr\">component</span>:<span class=\"title class_\">Message</span></span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">path</span>:<span class=\"string\">&#x27;news&#x27;</span>,</span><br><span class=\"line\">                   <span class=\"attr\">component</span>:<span class=\"title class_\">News</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           ]</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       </span><br><span class=\"line\">   ]</span><br></pre></td></tr></table></figure></li>\n<li><p>跳转(要写完整的路径):</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link <span class=\"keyword\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span> active-<span class=\"keyword\">class</span>=<span class=\"string\">&quot;active&quot;</span> to=<span class=\"string\">&quot;/home/news&quot;</span>&gt;<span class=\"title class_\">News</span>&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"路由参数有几种\"><a href=\"#路由参数有几种\" class=\"headerlink\" title=\"路由参数有几种?\"></a>路由参数有几种?</h2><p>query、params 两个属性可以传递参数</p>\n<p><code>query</code>参数 : 不属于路径当中的一部分，类似于 get 请求，</p>\n<ul>\n<li>地址栏表现为 /search?k1=v1&amp;k2=v2          </li>\n<li>query 参数对应的路由信息 path: “/search”</li>\n</ul>\n<p><code>params</code>参数：属于路径当中的一部分，需要注意，在配置路由的时候，需要占位 ,</p>\n<ul>\n<li>地址栏表现为 /search/v1/v2 </li>\n<li>params参数对应的路由信息<code> path:&quot;/search/:v1/:v2</code>“</li>\n<li><code>注:</code>路由携带params参数的时候,若使用<code>to的对象写法(常用)</code>,则不能使用path配置项,必须使用<code>name</code>配置!</li>\n</ul>\n<h3 id=\"4-路由的query参数\"><a href=\"#4-路由的query参数\" class=\"headerlink\" title=\"4.路由的query参数\"></a>4.路由的query参数</h3><ol>\n<li><p>传递参数:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 跳转路由并携带参数,to的字符串写法 --&gt;</span><br><span class=\"line\">          &lt;!-- <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;</span>&gt;</span>&#123;&#123;message.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span>&amp;nbsp;&amp;nbsp; --&gt;</span><br><span class=\"line\">          </span><br><span class=\"line\">          &lt;!-- 跳转路由并携带query参数,to的对象写法 --&gt;</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                path:&#x27;/home/message/detail&#x27;,</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                query:&#123;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                    id:message.id,</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                    title:message.title</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                &#125;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">            &#125;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              &#123;&#123;message.title&#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>2.接收参数:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$route.<span class=\"property\">query</span>.<span class=\"property\">id</span></span><br><span class=\"line\">$route.<span class=\"property\">query</span>.<span class=\"property\">title</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"5-命名路由\"><a href=\"#5-命名路由\" class=\"headerlink\" title=\"5.命名路由\"></a>5.命名路由</h3><p>1.作用: 可以简化路由的跳转</p>\n<p>2.如何使用</p>\n<ol>\n<li><p>给路由命名:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>:<span class=\"title class_\">Home</span>,</span><br><span class=\"line\">            <span class=\"attr\">children</span>:[</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;message&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">component</span>:<span class=\"title class_\">Message</span>, </span><br><span class=\"line\">                    <span class=\"attr\">children</span>:[</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiangqing&#x27;</span>,</span><br><span class=\"line\">                            <span class=\"attr\">path</span>:<span class=\"string\">&#x27;detail&#x27;</span>,</span><br><span class=\"line\">                            <span class=\"attr\">component</span>:<span class=\"title class_\">Detail</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;news&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">component</span>:<span class=\"title class_\">News</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br></pre></td></tr></table></figure></li>\n<li><p>简化跳转</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link <span class=\"keyword\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span> active-<span class=\"keyword\">class</span>=<span class=\"string\">&quot;active&quot;</span> :to=<span class=\"string\">&quot;&#123;name:&#x27;guanyu&#x27;&#125;&quot;</span>&gt;<span class=\"title class_\">About</span>&lt;/router-link&gt;</span><br><span class=\"line\">          <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span> <span class=\"attr\">active-class</span>=<span class=\"string\">&quot;active&quot;</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/home&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                name:&#x27;xiangqing&#x27;,</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                query:&#123;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                    id:message.id,</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                    title:message.title</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                &#125;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">            &#125;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              &#123;&#123;message.title&#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"6-路由的params参数\"><a href=\"#6-路由的params参数\" class=\"headerlink\" title=\"6.路由的params参数\"></a>6.路由的params参数</h3><ol>\n<li><p>配置路由,声明接收params参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>:<span class=\"title class_\">Home</span>,</span><br><span class=\"line\">            <span class=\"attr\">children</span>:[</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;message&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">component</span>:<span class=\"title class_\">Message</span>, </span><br><span class=\"line\">                    <span class=\"attr\">children</span>:[</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiangqing&#x27;</span>,</span><br><span class=\"line\">                            <span class=\"attr\">path</span>:<span class=\"string\">&#x27;detail/:id/:title&#x27;</span>,</span><br><span class=\"line\">                            <span class=\"attr\">component</span>:<span class=\"title class_\">Detail</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;news&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">component</span>:<span class=\"title class_\">News</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br></pre></td></tr></table></figure></li>\n<li><p>传递参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 跳转路由并携带params参数,to的字符串写法 --&gt;</span><br><span class=\"line\">          &lt;!-- <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;`/home/message/detail/$&#123;message.id&#125;/$&#123;message.title&#125;`&quot;</span>&gt;</span>&#123;&#123;message.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span>&amp;nbsp;&amp;nbsp; --&gt;</span><br><span class=\"line\">          </span><br><span class=\"line\">          &lt;!-- 跳转路由并携带query参数,to的对象写法 --&gt;</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                name:&#x27;xiangqing&#x27;,</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                params:&#123;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                    id:message.id,</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                    title:message.title</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                &#125;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">            &#125;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              &#123;&#123;message.title&#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>注意:路由携带params参数的时候,若使用to的对象写法,则不能使用path配置项,必须使用name配置!</p>\n<ol start=\"3\">\n<li><p>接收参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$route.<span class=\"property\">params</span>.<span class=\"property\">id</span></span><br><span class=\"line\">$</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"7-路由的props配置\"><a href=\"#7-路由的props配置\" class=\"headerlink\" title=\"7.路由的props配置\"></a>7.路由的props配置</h3><pre><code>作用:让路由组件更加方便的接收到参数\n</code></pre>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">                            </span><br><span class=\"line\">         <span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiangqing&#x27;</span>,</span><br><span class=\"line\">         <span class=\"attr\">path</span>:<span class=\"string\">&#x27;detail/&#x27;</span>,              </span><br><span class=\"line\">         <span class=\"attr\">component</span>:<span class=\"title class_\">Detail</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//props的第一种写法,值为对象,该对象的所有key-value都会以props的形式传给Detail组件.</span></span><br><span class=\"line\"> <span class=\"attr\">props</span>:&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"string\">&#x27;hello&#x27;</span>&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//props的第二种写法,值为布尔值.若布尔值为真,就会把该路由组件收到的所有params参数,以props的形式传给Detail组件</span></span><br><span class=\"line\"><span class=\"attr\">props</span>:<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//props的第三种写法,值为函数,</span></span><br><span class=\"line\"> <span class=\"title function_\">props</span>(<span class=\"params\">&#123;query:&#123;id,title&#125;&#125;</span>)&#123;<span class=\"comment\">//连续结构赋值的写法</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span>&#123;<span class=\"attr\">id</span>:id,<span class=\"attr\">title</span>:title&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">props</span>(<span class=\"params\">$route</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;                     \t\t\t</span><br><span class=\"line\">    <span class=\"attr\">id</span>:$route.<span class=\"property\">query</span>.<span class=\"property\">id</span>,</span><br><span class=\"line\">    <span class=\"attr\">title</span>:$route.<span class=\"property\">query</span>.<span class=\"property\">title</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-lt-router-link-gt-的replace属性\"><a href=\"#8-lt-router-link-gt-的replace属性\" class=\"headerlink\" title=\"8.&lt;router-link&gt;的replace属性\"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol>\n<li><p>作用: 控制路由跳转时操作浏览器历史纪录的模式</p>\n</li>\n<li><p>浏览器历史记录有两种写入方式: 分别为<code>push</code>和<code>replace</code>,push是追加历史记录,<code>replace</code>是替换当前记录,路由跳转的时候默认为<code>push</code></p>\n</li>\n<li><p>如何开启<code>repalce</code>模式,<code>&lt;router-link replce.....&gt;News&lt;/router-link&gt;</code></p>\n</li>\n</ol>\n<h3 id=\"9-编程时路由导航\"><a href=\"#9-编程时路由导航\" class=\"headerlink\" title=\"9.编程时路由导航\"></a>9.编程时路由导航</h3><ol>\n<li><p>作用:不借助<code>&lt;router-link&gt;</code>实现路由跳转,让路由跳转更加灵活</p>\n</li>\n<li><p>具体编码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//$router的两个API(</span></span><br><span class=\"line\"><span class=\"title function_\">pushShow</span>(<span class=\"params\">m</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiangqing&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">query</span>:&#123;</span><br><span class=\"line\">          <span class=\"attr\">id</span>:m.<span class=\"property\">id</span>,</span><br><span class=\"line\">          <span class=\"attr\">title</span>:m.<span class=\"property\">title</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">replaceShow</span>(<span class=\"params\">m</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">replace</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiangqing&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">query</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>:m.<span class=\"property\">id</span>,</span><br><span class=\"line\">        <span class=\"attr\">title</span>:m.<span class=\"property\">title</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">forward</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">forward</span>()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"title function_\">back</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">back</span>()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">   <span class=\"title function_\">go</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">go</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-缓存路由组件\"><a href=\"#10-缓存路由组件\" class=\"headerlink\" title=\"10.缓存路由组件\"></a>10.缓存路由组件</h3><ol>\n<li><p>作用:让不展示的路由组件保持挂载,不被销毁</p>\n</li>\n<li><p>具体编码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;keep-alive include=<span class=\"string\">&quot;News&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span></span><br><span class=\"line\">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"11-两个新的生命周期钩子\"><a href=\"#11-两个新的生命周期钩子\" class=\"headerlink\" title=\"11.两个新的生命周期钩子\"></a>11.两个新的生命周期钩子</h3><ol>\n<li>作用:路由组件所独有的两个钩子,用于捕获路由组件的激活状态</li>\n<li>具体名字:<ol>\n<li><code>actived</code>路由组件被激活时触发</li>\n<li><code>deactived</code>路由组件失活时触发</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"12-路由守卫\"><a href=\"#12-路由守卫\" class=\"headerlink\" title=\"12.路由守卫\"></a>12.路由守卫</h3><ol>\n<li>作用:对路由进行权限控制</li>\n<li>分类:全局守卫,独享守卫,组件内守卫</li>\n<li>全局守卫:</li>\n</ol>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局前置路由守卫---初始化的时候被调用,每次路由切换之前被调用</span></span><br><span class=\"line\">router.<span class=\"title function_\">beforeEach</span>(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;前置路由守卫&#x27;</span>)</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(to.<span class=\"property\">meta</span>.<span class=\"property\">isAuth</span>)<span class=\"comment\">//判断是否需要鉴权</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;school&#x27;</span>)===<span class=\"string\">&#x27;atguigu&#x27;</span>)<span class=\"comment\">//权限控制的具体规则</span></span><br><span class=\"line\">     <span class=\"title function_\">next</span>()</span><br><span class=\"line\">     <span class=\"keyword\">else</span></span><br><span class=\"line\">     <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;学校名称不正确,无权查看!&#x27;</span>)</span><br><span class=\"line\"> &#125;   </span><br><span class=\"line\"> <span class=\"keyword\">else</span> <span class=\"title function_\">next</span>()<span class=\"comment\">//放行</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//全局后置路由守卫---初始化的时候被调用,每次路由切换之后被调用</span></span><br><span class=\"line\">router.<span class=\"title function_\">afterEach</span>(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span></span>)=&gt;</span>&#123;</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;后置路由守卫&#x27;</span>)</span><br><span class=\"line\"> <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = to.<span class=\"property\">meta</span>.<span class=\"property\">title</span> || <span class=\"string\">&#x27;硅谷系统&#x27;</span><span class=\"comment\">//修改网页的title</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>独享路由守卫</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">beforeEnter</span>:<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                     <span class=\"keyword\">if</span>(<span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;school&#x27;</span>)===<span class=\"string\">&quot;atguigu&quot;</span>)</span><br><span class=\"line\">                     <span class=\"title function_\">next</span>()</span><br><span class=\"line\">                     <span class=\"keyword\">else</span></span><br><span class=\"line\">                     <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;学校名称不正确,无权查看!&#x27;</span>)</span><br><span class=\"line\">                 &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>组件内守卫</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//进入守卫,通过路由规则,进入该组件时被调用</span></span><br><span class=\"line\"> beforeRouteEnter (to, <span class=\"keyword\">from</span>, next) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//离开守卫,通过路由规则,离开该组件时被调用</span></span><br><span class=\"line\">beforeRouteLeave (to, <span class=\"keyword\">from</span>, next) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-路由器的两种工作模式\"><a href=\"#13-路由器的两种工作模式\" class=\"headerlink\" title=\"13.路由器的两种工作模式\"></a>13.路由器的两种工作模式</h3><ol>\n<li>对于一个<code>url</code>来说,什么是hash值?—-#及其后面的内容就是hashzhi</li>\n<li>hash值不会包含在HTTP请求之中,即:hash值不会带给服务器</li>\n<li>hash模式:<ol>\n<li>地址中永远带着#号,不美观</li>\n<li>若以后将地址通过第三方手机app分享,若app校验严格,则地址也会被标记为不合法</li>\n<li>兼容性较好</li>\n</ol>\n</li>\n<li>history模式:<ol>\n<li>地址干净,美观</li>\n<li>兼容性和hash模式相比略差</li>\n<li>应用部署上线时需要后端人员支持,解决刷新页面服务端404的问题<h3 id=\"考题\"><a href=\"#考题\" class=\"headerlink\" title=\"考题\"></a>考题</h3></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>路由传递参数（对象写法）path是否可以结合params参数一起使用?</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不可以：不能这样书写,程序会崩掉,必须使用name</span></span><br><span class=\"line\">&lt;router-link :to=<span class=\"string\">&quot;&#123;</span></span><br><span class=\"line\"><span class=\"string\">                name:&#x27;xiangqing&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">                params:&#123;</span></span><br><span class=\"line\"><span class=\"string\">                    id:message.id,</span></span><br><span class=\"line\"><span class=\"string\">                    title:message.title</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>如何指定params参数可传可不传? </li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在使用params传参的时候,路由配置如下</span></span><br><span class=\"line\"><span class=\"attr\">path</span>: <span class=\"string\">&quot;/search/:value?&quot;</span>, ?表示该参数可传可不传</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>params参数可以传递也可以不传递，但是如果传递是空串，如何解决？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;home&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&quot;&quot;</span> || <span class=\"literal\">undefined</span>,<span class=\"comment\">//在参数的后面加入</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><p>如果指定name与params配置, 但params中数据是一个””, 无法跳转，路径会出问题</p>\n</li>\n<li><p> 路由组件能不能传递props数据?</p>\n</li>\n<li><p>多次执行相同的 push 报错问题<br> <code>原因</code>: push是一个promise,promise需要传递成功和失败两个参数,我们的push中没有传递<br> 解决方法一:</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(&#123;<span class=\"attr\">name</span>:‘<span class=\"title class_\">Search</span>’,<span class=\"attr\">params</span>:&#123;<span class=\"attr\">keyword</span>:<span class=\"string\">&quot;…&quot;</span>||<span class=\"literal\">undefined</span>&#125;&#125;,<span class=\"function\">()=&gt;</span>&#123;&#125;,<span class=\"function\">()=&gt;</span>&#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//后面两项分别代表执行成功和失败的回调函数,此方法只能解决这一次的问题</span></span><br></pre></td></tr></table></figure>\n<pre><code>解决方法二:在router中的index重写该方法\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、先把VueRouter原型对象的push，保存一份</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> originPush = <span class=\"title class_\">VueRouter</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push</span>;</span><br><span class=\"line\"><span class=\"comment\">//2、重写push|replace</span></span><br><span class=\"line\"><span class=\"comment\">//第一个参数：告诉原来的push，跳转的目标位置和传递了哪些参数</span></span><br><span class=\"line\"><span class=\"title class_\">VueRouter</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push</span> = <span class=\"keyword\">function</span> (<span class=\"params\">location, resolve, reject</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (resolve &amp;&amp; reject) &#123;</span><br><span class=\"line\">    originPush.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, location, resolve, reject);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    originPush.<span class=\"title function_\">call</span>(</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">      location,</span><br><span class=\"line\">      <span class=\"function\">() =&gt;</span> &#123;&#125;,</span><br><span class=\"line\">      <span class=\"function\">() =&gt;</span> &#123;&#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>​    </p>\n","site":{"data":{}},"cover":"/img/avator.jpg","excerpt":"","more":"<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><pre><code> 1. 理解: 一个路由(route)就是一组映射关系(key-value),多个路由(routes)需要的路由器(router)进行管理\n 2. 前端路由: key是路径,value是组件\n</code></pre>\n<h3 id=\"1-基本使用\"><a href=\"#1-基本使用\" class=\"headerlink\" title=\"1.基本使用\"></a>1.基本使用</h3><ol>\n<li><p>安装vue-router,命令: <code>npm i vue-router</code></p>\n</li>\n<li><p>引入vue-router之后应用插件: Vue.use(VueRouter)</p>\n</li>\n<li><p>编写router配置项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该文件专门创建整个应用的路由器</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">VueRouter</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//引入组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">About</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../components/About&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../components/Home&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建并暴露一个路由器</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VueRouter</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">routes</span>:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/about&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>:<span class=\"title class_\">About</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>:<span class=\"title class_\">Home</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>实现切换(active-class可配置高亮样式)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link <span class=\"keyword\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span> active-<span class=\"keyword\">class</span>=<span class=\"string\">&quot;active&quot;</span> to=<span class=\"string\">&quot;/about&quot;</span>&gt;<span class=\"title class_\">About</span>&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>指定展示位置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"2-几个注意点\"><a href=\"#2-几个注意点\" class=\"headerlink\" title=\"2.几个注意点\"></a>2.几个注意点</h3><ol>\n<li>路由组件通常存放在<code>page</code>文件夹,一般组件通常存放在<code>component</code>文件夹</li>\n<li>通过切换,’隐藏’了的路由组件,默认是被销毁掉的,需要的时候再去挂载</li>\n<li>每个组件都有自己的<code>$route</code>属性,里面储存着自己的路由信息</li>\n<li>整个应用只有一个router,可以通过组件的<code>$router</code>属性获取到</li>\n</ol>\n<h3 id=\"3-多级路由\"><a href=\"#3-多级路由\" class=\"headerlink\" title=\"3.多级路由\"></a>3.多级路由</h3><ol>\n<li><p>配置路由规则,使用chlidren配置项:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">routes</span>:[</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/about&#x27;</span>,</span><br><span class=\"line\">           <span class=\"attr\">component</span>:<span class=\"title class_\">About</span></span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">           <span class=\"attr\">component</span>:<span class=\"title class_\">Home</span>,</span><br><span class=\"line\">           <span class=\"attr\">children</span>:[</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">path</span>:<span class=\"string\">&#x27;message&#x27;</span>,</span><br><span class=\"line\">                   <span class=\"attr\">component</span>:<span class=\"title class_\">Message</span></span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"attr\">path</span>:<span class=\"string\">&#x27;news&#x27;</span>,</span><br><span class=\"line\">                   <span class=\"attr\">component</span>:<span class=\"title class_\">News</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           ]</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       </span><br><span class=\"line\">   ]</span><br></pre></td></tr></table></figure></li>\n<li><p>跳转(要写完整的路径):</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link <span class=\"keyword\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span> active-<span class=\"keyword\">class</span>=<span class=\"string\">&quot;active&quot;</span> to=<span class=\"string\">&quot;/home/news&quot;</span>&gt;<span class=\"title class_\">News</span>&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"路由参数有几种\"><a href=\"#路由参数有几种\" class=\"headerlink\" title=\"路由参数有几种?\"></a>路由参数有几种?</h2><p>query、params 两个属性可以传递参数</p>\n<p><code>query</code>参数 : 不属于路径当中的一部分，类似于 get 请求，</p>\n<ul>\n<li>地址栏表现为 /search?k1=v1&amp;k2=v2          </li>\n<li>query 参数对应的路由信息 path: “/search”</li>\n</ul>\n<p><code>params</code>参数：属于路径当中的一部分，需要注意，在配置路由的时候，需要占位 ,</p>\n<ul>\n<li>地址栏表现为 /search/v1/v2 </li>\n<li>params参数对应的路由信息<code> path:&quot;/search/:v1/:v2</code>“</li>\n<li><code>注:</code>路由携带params参数的时候,若使用<code>to的对象写法(常用)</code>,则不能使用path配置项,必须使用<code>name</code>配置!</li>\n</ul>\n<h3 id=\"4-路由的query参数\"><a href=\"#4-路由的query参数\" class=\"headerlink\" title=\"4.路由的query参数\"></a>4.路由的query参数</h3><ol>\n<li><p>传递参数:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 跳转路由并携带参数,to的字符串写法 --&gt;</span><br><span class=\"line\">          &lt;!-- <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;</span>&gt;</span>&#123;&#123;message.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span>&amp;nbsp;&amp;nbsp; --&gt;</span><br><span class=\"line\">          </span><br><span class=\"line\">          &lt;!-- 跳转路由并携带query参数,to的对象写法 --&gt;</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                path:&#x27;/home/message/detail&#x27;,</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                query:&#123;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                    id:message.id,</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                    title:message.title</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                &#125;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">            &#125;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              &#123;&#123;message.title&#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>2.接收参数:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$route.<span class=\"property\">query</span>.<span class=\"property\">id</span></span><br><span class=\"line\">$route.<span class=\"property\">query</span>.<span class=\"property\">title</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"5-命名路由\"><a href=\"#5-命名路由\" class=\"headerlink\" title=\"5.命名路由\"></a>5.命名路由</h3><p>1.作用: 可以简化路由的跳转</p>\n<p>2.如何使用</p>\n<ol>\n<li><p>给路由命名:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>:<span class=\"title class_\">Home</span>,</span><br><span class=\"line\">            <span class=\"attr\">children</span>:[</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;message&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">component</span>:<span class=\"title class_\">Message</span>, </span><br><span class=\"line\">                    <span class=\"attr\">children</span>:[</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiangqing&#x27;</span>,</span><br><span class=\"line\">                            <span class=\"attr\">path</span>:<span class=\"string\">&#x27;detail&#x27;</span>,</span><br><span class=\"line\">                            <span class=\"attr\">component</span>:<span class=\"title class_\">Detail</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;news&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">component</span>:<span class=\"title class_\">News</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br></pre></td></tr></table></figure></li>\n<li><p>简化跳转</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link <span class=\"keyword\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span> active-<span class=\"keyword\">class</span>=<span class=\"string\">&quot;active&quot;</span> :to=<span class=\"string\">&quot;&#123;name:&#x27;guanyu&#x27;&#125;&quot;</span>&gt;<span class=\"title class_\">About</span>&lt;/router-link&gt;</span><br><span class=\"line\">          <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span> <span class=\"attr\">active-class</span>=<span class=\"string\">&quot;active&quot;</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/home&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                name:&#x27;xiangqing&#x27;,</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                query:&#123;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                    id:message.id,</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                    title:message.title</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                &#125;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">            &#125;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              &#123;&#123;message.title&#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"6-路由的params参数\"><a href=\"#6-路由的params参数\" class=\"headerlink\" title=\"6.路由的params参数\"></a>6.路由的params参数</h3><ol>\n<li><p>配置路由,声明接收params参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>:<span class=\"title class_\">Home</span>,</span><br><span class=\"line\">            <span class=\"attr\">children</span>:[</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;message&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">component</span>:<span class=\"title class_\">Message</span>, </span><br><span class=\"line\">                    <span class=\"attr\">children</span>:[</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiangqing&#x27;</span>,</span><br><span class=\"line\">                            <span class=\"attr\">path</span>:<span class=\"string\">&#x27;detail/:id/:title&#x27;</span>,</span><br><span class=\"line\">                            <span class=\"attr\">component</span>:<span class=\"title class_\">Detail</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;news&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">component</span>:<span class=\"title class_\">News</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br></pre></td></tr></table></figure></li>\n<li><p>传递参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 跳转路由并携带params参数,to的字符串写法 --&gt;</span><br><span class=\"line\">          &lt;!-- <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;`/home/message/detail/$&#123;message.id&#125;/$&#123;message.title&#125;`&quot;</span>&gt;</span>&#123;&#123;message.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span>&amp;nbsp;&amp;nbsp; --&gt;</span><br><span class=\"line\">          </span><br><span class=\"line\">          &lt;!-- 跳转路由并携带query参数,to的对象写法 --&gt;</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                name:&#x27;xiangqing&#x27;,</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                params:&#123;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                    id:message.id,</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                    title:message.title</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">                &#125;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"><span class=\"language-xml\">            &#125;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              &#123;&#123;message.title&#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>注意:路由携带params参数的时候,若使用to的对象写法,则不能使用path配置项,必须使用name配置!</p>\n<ol start=\"3\">\n<li><p>接收参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$route.<span class=\"property\">params</span>.<span class=\"property\">id</span></span><br><span class=\"line\">$</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"7-路由的props配置\"><a href=\"#7-路由的props配置\" class=\"headerlink\" title=\"7.路由的props配置\"></a>7.路由的props配置</h3><pre><code>作用:让路由组件更加方便的接收到参数\n</code></pre>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">                            </span><br><span class=\"line\">         <span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiangqing&#x27;</span>,</span><br><span class=\"line\">         <span class=\"attr\">path</span>:<span class=\"string\">&#x27;detail/&#x27;</span>,              </span><br><span class=\"line\">         <span class=\"attr\">component</span>:<span class=\"title class_\">Detail</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//props的第一种写法,值为对象,该对象的所有key-value都会以props的形式传给Detail组件.</span></span><br><span class=\"line\"> <span class=\"attr\">props</span>:&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"string\">&#x27;hello&#x27;</span>&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//props的第二种写法,值为布尔值.若布尔值为真,就会把该路由组件收到的所有params参数,以props的形式传给Detail组件</span></span><br><span class=\"line\"><span class=\"attr\">props</span>:<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//props的第三种写法,值为函数,</span></span><br><span class=\"line\"> <span class=\"title function_\">props</span>(<span class=\"params\">&#123;query:&#123;id,title&#125;&#125;</span>)&#123;<span class=\"comment\">//连续结构赋值的写法</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span>&#123;<span class=\"attr\">id</span>:id,<span class=\"attr\">title</span>:title&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">props</span>(<span class=\"params\">$route</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;                     \t\t\t</span><br><span class=\"line\">    <span class=\"attr\">id</span>:$route.<span class=\"property\">query</span>.<span class=\"property\">id</span>,</span><br><span class=\"line\">    <span class=\"attr\">title</span>:$route.<span class=\"property\">query</span>.<span class=\"property\">title</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-lt-router-link-gt-的replace属性\"><a href=\"#8-lt-router-link-gt-的replace属性\" class=\"headerlink\" title=\"8.&lt;router-link&gt;的replace属性\"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol>\n<li><p>作用: 控制路由跳转时操作浏览器历史纪录的模式</p>\n</li>\n<li><p>浏览器历史记录有两种写入方式: 分别为<code>push</code>和<code>replace</code>,push是追加历史记录,<code>replace</code>是替换当前记录,路由跳转的时候默认为<code>push</code></p>\n</li>\n<li><p>如何开启<code>repalce</code>模式,<code>&lt;router-link replce.....&gt;News&lt;/router-link&gt;</code></p>\n</li>\n</ol>\n<h3 id=\"9-编程时路由导航\"><a href=\"#9-编程时路由导航\" class=\"headerlink\" title=\"9.编程时路由导航\"></a>9.编程时路由导航</h3><ol>\n<li><p>作用:不借助<code>&lt;router-link&gt;</code>实现路由跳转,让路由跳转更加灵活</p>\n</li>\n<li><p>具体编码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//$router的两个API(</span></span><br><span class=\"line\"><span class=\"title function_\">pushShow</span>(<span class=\"params\">m</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiangqing&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">query</span>:&#123;</span><br><span class=\"line\">          <span class=\"attr\">id</span>:m.<span class=\"property\">id</span>,</span><br><span class=\"line\">          <span class=\"attr\">title</span>:m.<span class=\"property\">title</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">replaceShow</span>(<span class=\"params\">m</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">replace</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiangqing&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">query</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>:m.<span class=\"property\">id</span>,</span><br><span class=\"line\">        <span class=\"attr\">title</span>:m.<span class=\"property\">title</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">forward</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">forward</span>()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"title function_\">back</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">back</span>()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">   <span class=\"title function_\">go</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">go</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-缓存路由组件\"><a href=\"#10-缓存路由组件\" class=\"headerlink\" title=\"10.缓存路由组件\"></a>10.缓存路由组件</h3><ol>\n<li><p>作用:让不展示的路由组件保持挂载,不被销毁</p>\n</li>\n<li><p>具体编码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;keep-alive include=<span class=\"string\">&quot;News&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span></span><br><span class=\"line\">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"11-两个新的生命周期钩子\"><a href=\"#11-两个新的生命周期钩子\" class=\"headerlink\" title=\"11.两个新的生命周期钩子\"></a>11.两个新的生命周期钩子</h3><ol>\n<li>作用:路由组件所独有的两个钩子,用于捕获路由组件的激活状态</li>\n<li>具体名字:<ol>\n<li><code>actived</code>路由组件被激活时触发</li>\n<li><code>deactived</code>路由组件失活时触发</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"12-路由守卫\"><a href=\"#12-路由守卫\" class=\"headerlink\" title=\"12.路由守卫\"></a>12.路由守卫</h3><ol>\n<li>作用:对路由进行权限控制</li>\n<li>分类:全局守卫,独享守卫,组件内守卫</li>\n<li>全局守卫:</li>\n</ol>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局前置路由守卫---初始化的时候被调用,每次路由切换之前被调用</span></span><br><span class=\"line\">router.<span class=\"title function_\">beforeEach</span>(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;前置路由守卫&#x27;</span>)</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(to.<span class=\"property\">meta</span>.<span class=\"property\">isAuth</span>)<span class=\"comment\">//判断是否需要鉴权</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;school&#x27;</span>)===<span class=\"string\">&#x27;atguigu&#x27;</span>)<span class=\"comment\">//权限控制的具体规则</span></span><br><span class=\"line\">     <span class=\"title function_\">next</span>()</span><br><span class=\"line\">     <span class=\"keyword\">else</span></span><br><span class=\"line\">     <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;学校名称不正确,无权查看!&#x27;</span>)</span><br><span class=\"line\"> &#125;   </span><br><span class=\"line\"> <span class=\"keyword\">else</span> <span class=\"title function_\">next</span>()<span class=\"comment\">//放行</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//全局后置路由守卫---初始化的时候被调用,每次路由切换之后被调用</span></span><br><span class=\"line\">router.<span class=\"title function_\">afterEach</span>(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span></span>)=&gt;</span>&#123;</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;后置路由守卫&#x27;</span>)</span><br><span class=\"line\"> <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = to.<span class=\"property\">meta</span>.<span class=\"property\">title</span> || <span class=\"string\">&#x27;硅谷系统&#x27;</span><span class=\"comment\">//修改网页的title</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>独享路由守卫</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">beforeEnter</span>:<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                     <span class=\"keyword\">if</span>(<span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;school&#x27;</span>)===<span class=\"string\">&quot;atguigu&quot;</span>)</span><br><span class=\"line\">                     <span class=\"title function_\">next</span>()</span><br><span class=\"line\">                     <span class=\"keyword\">else</span></span><br><span class=\"line\">                     <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;学校名称不正确,无权查看!&#x27;</span>)</span><br><span class=\"line\">                 &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>组件内守卫</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//进入守卫,通过路由规则,进入该组件时被调用</span></span><br><span class=\"line\"> beforeRouteEnter (to, <span class=\"keyword\">from</span>, next) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//离开守卫,通过路由规则,离开该组件时被调用</span></span><br><span class=\"line\">beforeRouteLeave (to, <span class=\"keyword\">from</span>, next) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-路由器的两种工作模式\"><a href=\"#13-路由器的两种工作模式\" class=\"headerlink\" title=\"13.路由器的两种工作模式\"></a>13.路由器的两种工作模式</h3><ol>\n<li>对于一个<code>url</code>来说,什么是hash值?—-#及其后面的内容就是hashzhi</li>\n<li>hash值不会包含在HTTP请求之中,即:hash值不会带给服务器</li>\n<li>hash模式:<ol>\n<li>地址中永远带着#号,不美观</li>\n<li>若以后将地址通过第三方手机app分享,若app校验严格,则地址也会被标记为不合法</li>\n<li>兼容性较好</li>\n</ol>\n</li>\n<li>history模式:<ol>\n<li>地址干净,美观</li>\n<li>兼容性和hash模式相比略差</li>\n<li>应用部署上线时需要后端人员支持,解决刷新页面服务端404的问题<h3 id=\"考题\"><a href=\"#考题\" class=\"headerlink\" title=\"考题\"></a>考题</h3></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>路由传递参数（对象写法）path是否可以结合params参数一起使用?</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不可以：不能这样书写,程序会崩掉,必须使用name</span></span><br><span class=\"line\">&lt;router-link :to=<span class=\"string\">&quot;&#123;</span></span><br><span class=\"line\"><span class=\"string\">                name:&#x27;xiangqing&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">                params:&#123;</span></span><br><span class=\"line\"><span class=\"string\">                    id:message.id,</span></span><br><span class=\"line\"><span class=\"string\">                    title:message.title</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>如何指定params参数可传可不传? </li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在使用params传参的时候,路由配置如下</span></span><br><span class=\"line\"><span class=\"attr\">path</span>: <span class=\"string\">&quot;/search/:value?&quot;</span>, ?表示该参数可传可不传</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>params参数可以传递也可以不传递，但是如果传递是空串，如何解决？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;home&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&quot;&quot;</span> || <span class=\"literal\">undefined</span>,<span class=\"comment\">//在参数的后面加入</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><p>如果指定name与params配置, 但params中数据是一个””, 无法跳转，路径会出问题</p>\n</li>\n<li><p> 路由组件能不能传递props数据?</p>\n</li>\n<li><p>多次执行相同的 push 报错问题<br> <code>原因</code>: push是一个promise,promise需要传递成功和失败两个参数,我们的push中没有传递<br> 解决方法一:</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(&#123;<span class=\"attr\">name</span>:‘<span class=\"title class_\">Search</span>’,<span class=\"attr\">params</span>:&#123;<span class=\"attr\">keyword</span>:<span class=\"string\">&quot;…&quot;</span>||<span class=\"literal\">undefined</span>&#125;&#125;,<span class=\"function\">()=&gt;</span>&#123;&#125;,<span class=\"function\">()=&gt;</span>&#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//后面两项分别代表执行成功和失败的回调函数,此方法只能解决这一次的问题</span></span><br></pre></td></tr></table></figure>\n<pre><code>解决方法二:在router中的index重写该方法\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、先把VueRouter原型对象的push，保存一份</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> originPush = <span class=\"title class_\">VueRouter</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push</span>;</span><br><span class=\"line\"><span class=\"comment\">//2、重写push|replace</span></span><br><span class=\"line\"><span class=\"comment\">//第一个参数：告诉原来的push，跳转的目标位置和传递了哪些参数</span></span><br><span class=\"line\"><span class=\"title class_\">VueRouter</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push</span> = <span class=\"keyword\">function</span> (<span class=\"params\">location, resolve, reject</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (resolve &amp;&amp; reject) &#123;</span><br><span class=\"line\">    originPush.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, location, resolve, reject);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    originPush.<span class=\"title function_\">call</span>(</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">      location,</span><br><span class=\"line\">      <span class=\"function\">() =&gt;</span> &#123;&#125;,</span><br><span class=\"line\">      <span class=\"function\">() =&gt;</span> &#123;&#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>​    </p>\n"},{"title":"JS 的同步异步操作 和 事件循环机制","_content":"\n# JS 的同步异步操作 和 事件循环机制\n\n总所周知 ,  js 是单线程 , 因此只能依次处理任务 , 只有当前任务完成了之后才可以进行下一个任务 , 这无疑降低了 js  的性能 , 降低了用户的使用体验 , 为了解决这一问题 , js引入了异步操作\n\n### 有哪些是异步操作\n\n1. ``回调函数`` 的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。\n2. ``Promise``的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。\n3. ``generator`` 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部还可以将执行权转移回来。\n4. ``async 函数`` 的方式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。\n\n### promise的详解\n\n1. ``promise``对象的状态不受外界的影响 , pending fulfilled Rejected\n2. ``resolve ``的作用是把promise的状态由 pending -> fulfilled , 并将异步操作的结果作为参数传递出去\n3. ``reject`` 的作用是把promise的状态由 pending -> rejected , 并将异步操作的结果作为参数传递出去\n4. ``then``方法会自动返回一个promise对象 , 可以链式调用then , 在then里面你可以自己返回promise实例 , 或者then自动返回promise实例加上你的参数\n\n### promise身上方法 : resolved , rejected , all ,race , finally\n\n#### all   \n\npromise.all()该方法用于将多个Promise实例，包装成一个新的Promise实例。这样当遇到发送多个请求并根据请求顺序获取和使用数据的场景，就可以使用Promise.all来解决\n\n````js\nlet p1 = new Promise((resolve, reject) => {\n    resolve('成功了')\n    })\n    \n    let p2 = new Promise((resolve, reject) => {\n    resolve('success')\n    })\n    \n    let p3 = Promise.reject('失败')\n    \n    Promise.all([p1, p2]).then((result) => {\n    console.log(result) //['成功了', 'success']\n    }).catch((error) => {\n    console.log(error)\n    })\n    \n    Promise.all([p1,p3,p2]).then((result) => {\n    console.log(result)\n    }).catch((error) => {\n    console.log(error) // 失败了，打出 '失败'\n    })\n````\n\n\n\n#### race : \n\nrace 第一个执行完的promise 决定race状态  , 那么race方法有什么实际作用呢？当要做一件事，超过多长时间就不做了，可以用这个方法来解决\n\n````js\nlet promise1 = new Promise((resolve)=>{\n    setTimeout(() => {\n        resolve('成功执行')\n    }, 1500);\n})\nlet promise2 = new Promise((resolve)=>{\n    setTimeout(() => {\n        resolve('取消执行')\n    }, 1000);\n})\n//超过一秒就不执行 promise1\nPromise.race([promise1,promise2]).then(res=>{console.log(res);})\n````\n\n\n\n#### finally : \n\n不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。\n\n````js\nlet promise2 = new Promise((resolve,rejected)=>{\n    if(1==2)resolve('执行成功')\n    rejected('执行失败')\n}).then((data)=>{console.log(data);},(data)=>{console.log(data);})\n.finally(()=>{console.log('我就是要执行');})\n````\n\n\n\n### 下面来看这道题\n\n````js\n\nconsole.log('1');\n\nsetTimeout(function() {\n    console.log('2');\n    process.nextTick(function() {\n        console.log('3');\n    })\n    new Promise(function(resolve) {\n        console.log('4');\n        resolve();\n    }).then(function() {\n        console.log('5')\n    })\n})\nprocess.nextTick(function() {\n    console.log('6');\n})\nnew Promise(function(resolve) {\n    console.log('7');\n    resolve();\n}).then(function() {\n    console.log('8')\n})\n\nsetTimeout(function() {\n    console.log('9');\n    process.nextTick(function() {\n        console.log('10');\n    })\n    new Promise(function(resolve) {\n        console.log('11');\n        resolve();\n    }).then(function() {\n        console.log('12')\n    })\n})\n````\n\n这道题涉及到了 js 的运行机制 , 事件循环 , 同步异步等知识点 \n\n输出是 : 1，7，6，8，2，4，3，5，9，11，10，12\n\n做这道题的方法就是 : 先把同步的代码执行完 , 再把异步操作放到event table中 ,event queue 里面 宏任务和微任务队列排好之后( ``注意微任务队列和宏任务队列不是一个队列`` ) , 先执行完微任务才能执行微任务 \n\n","source":"_posts/JS 的同步异步操作 和 事件循环机制.md","raw":"---\ntitle: JS 的同步异步操作 和 事件循环机制\n---\n\n# JS 的同步异步操作 和 事件循环机制\n\n总所周知 ,  js 是单线程 , 因此只能依次处理任务 , 只有当前任务完成了之后才可以进行下一个任务 , 这无疑降低了 js  的性能 , 降低了用户的使用体验 , 为了解决这一问题 , js引入了异步操作\n\n### 有哪些是异步操作\n\n1. ``回调函数`` 的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。\n2. ``Promise``的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。\n3. ``generator`` 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部还可以将执行权转移回来。\n4. ``async 函数`` 的方式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。\n\n### promise的详解\n\n1. ``promise``对象的状态不受外界的影响 , pending fulfilled Rejected\n2. ``resolve ``的作用是把promise的状态由 pending -> fulfilled , 并将异步操作的结果作为参数传递出去\n3. ``reject`` 的作用是把promise的状态由 pending -> rejected , 并将异步操作的结果作为参数传递出去\n4. ``then``方法会自动返回一个promise对象 , 可以链式调用then , 在then里面你可以自己返回promise实例 , 或者then自动返回promise实例加上你的参数\n\n### promise身上方法 : resolved , rejected , all ,race , finally\n\n#### all   \n\npromise.all()该方法用于将多个Promise实例，包装成一个新的Promise实例。这样当遇到发送多个请求并根据请求顺序获取和使用数据的场景，就可以使用Promise.all来解决\n\n````js\nlet p1 = new Promise((resolve, reject) => {\n    resolve('成功了')\n    })\n    \n    let p2 = new Promise((resolve, reject) => {\n    resolve('success')\n    })\n    \n    let p3 = Promise.reject('失败')\n    \n    Promise.all([p1, p2]).then((result) => {\n    console.log(result) //['成功了', 'success']\n    }).catch((error) => {\n    console.log(error)\n    })\n    \n    Promise.all([p1,p3,p2]).then((result) => {\n    console.log(result)\n    }).catch((error) => {\n    console.log(error) // 失败了，打出 '失败'\n    })\n````\n\n\n\n#### race : \n\nrace 第一个执行完的promise 决定race状态  , 那么race方法有什么实际作用呢？当要做一件事，超过多长时间就不做了，可以用这个方法来解决\n\n````js\nlet promise1 = new Promise((resolve)=>{\n    setTimeout(() => {\n        resolve('成功执行')\n    }, 1500);\n})\nlet promise2 = new Promise((resolve)=>{\n    setTimeout(() => {\n        resolve('取消执行')\n    }, 1000);\n})\n//超过一秒就不执行 promise1\nPromise.race([promise1,promise2]).then(res=>{console.log(res);})\n````\n\n\n\n#### finally : \n\n不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。\n\n````js\nlet promise2 = new Promise((resolve,rejected)=>{\n    if(1==2)resolve('执行成功')\n    rejected('执行失败')\n}).then((data)=>{console.log(data);},(data)=>{console.log(data);})\n.finally(()=>{console.log('我就是要执行');})\n````\n\n\n\n### 下面来看这道题\n\n````js\n\nconsole.log('1');\n\nsetTimeout(function() {\n    console.log('2');\n    process.nextTick(function() {\n        console.log('3');\n    })\n    new Promise(function(resolve) {\n        console.log('4');\n        resolve();\n    }).then(function() {\n        console.log('5')\n    })\n})\nprocess.nextTick(function() {\n    console.log('6');\n})\nnew Promise(function(resolve) {\n    console.log('7');\n    resolve();\n}).then(function() {\n    console.log('8')\n})\n\nsetTimeout(function() {\n    console.log('9');\n    process.nextTick(function() {\n        console.log('10');\n    })\n    new Promise(function(resolve) {\n        console.log('11');\n        resolve();\n    }).then(function() {\n        console.log('12')\n    })\n})\n````\n\n这道题涉及到了 js 的运行机制 , 事件循环 , 同步异步等知识点 \n\n输出是 : 1，7，6，8，2，4，3，5，9，11，10，12\n\n做这道题的方法就是 : 先把同步的代码执行完 , 再把异步操作放到event table中 ,event queue 里面 宏任务和微任务队列排好之后( ``注意微任务队列和宏任务队列不是一个队列`` ) , 先执行完微任务才能执行微任务 \n\n","slug":"JS 的同步异步操作 和 事件循环机制","published":1,"date":"2022-05-06T14:10:20.828Z","updated":"2022-05-06T14:15:35.320Z","_id":"cl2uil9mf0000c0vogg7z5lxn","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JS-的同步异步操作-和-事件循环机制\"><a href=\"#JS-的同步异步操作-和-事件循环机制\" class=\"headerlink\" title=\"JS 的同步异步操作 和 事件循环机制\"></a>JS 的同步异步操作 和 事件循环机制</h1><p>总所周知 ,  js 是单线程 , 因此只能依次处理任务 , 只有当前任务完成了之后才可以进行下一个任务 , 这无疑降低了 js  的性能 , 降低了用户的使用体验 , 为了解决这一问题 , js引入了异步操作</p>\n<h3 id=\"有哪些是异步操作\"><a href=\"#有哪些是异步操作\" class=\"headerlink\" title=\"有哪些是异步操作\"></a>有哪些是异步操作</h3><ol>\n<li><code>回调函数</code> 的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。</li>\n<li><code>Promise</code>的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。</li>\n<li><code>generator</code> 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部还可以将执行权转移回来。</li>\n<li><code>async 函数</code> 的方式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。</li>\n</ol>\n<h3 id=\"promise的详解\"><a href=\"#promise的详解\" class=\"headerlink\" title=\"promise的详解\"></a>promise的详解</h3><ol>\n<li><code>promise</code>对象的状态不受外界的影响 , pending fulfilled Rejected</li>\n<li><code>resolve </code>的作用是把promise的状态由 pending -&gt; fulfilled , 并将异步操作的结果作为参数传递出去</li>\n<li><code>reject</code> 的作用是把promise的状态由 pending -&gt; rejected , 并将异步操作的结果作为参数传递出去</li>\n<li><code>then</code>方法会自动返回一个promise对象 , 可以链式调用then , 在then里面你可以自己返回promise实例 , 或者then自动返回promise实例加上你的参数</li>\n</ol>\n<h3 id=\"promise身上方法-resolved-rejected-all-race-finally\"><a href=\"#promise身上方法-resolved-rejected-all-race-finally\" class=\"headerlink\" title=\"promise身上方法 : resolved , rejected , all ,race , finally\"></a>promise身上方法 : resolved , rejected , all ,race , finally</h3><h4 id=\"all\"><a href=\"#all\" class=\"headerlink\" title=\"all\"></a>all</h4><p>promise.all()该方法用于将多个Promise实例，包装成一个新的Promise实例。这样当遇到发送多个请求并根据请求顺序获取和使用数据的场景，就可以使用Promise.all来解决</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功了&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;success&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> p3 = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;失败&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([p1, p2]).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">//[&#x27;成功了&#x27;, &#x27;success&#x27;]</span></span><br><span class=\"line\">    &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([p1,p3,p2]).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result)</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error) <span class=\"comment\">// 失败了，打出 &#x27;失败&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"race\"><a href=\"#race\" class=\"headerlink\" title=\"race :\"></a>race :</h4><p>race 第一个执行完的promise 决定race状态  , 那么race方法有什么实际作用呢？当要做一件事，超过多长时间就不做了，可以用这个方法来解决</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功执行&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1500</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;取消执行&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//超过一秒就不执行 promise1</span></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>([promise1,promise2]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"finally\"><a href=\"#finally\" class=\"headerlink\" title=\"finally :\"></a>finally :</h4><p>不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,rejected</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"number\">1</span>==<span class=\"number\">2</span>)<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;执行成功&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">rejected</span>(<span class=\"string\">&#x27;执行失败&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);&#125;,<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">finally</span>(<span class=\"function\">()=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我就是要执行&#x27;</span>);&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"下面来看这道题\"><a href=\"#下面来看这道题\" class=\"headerlink\" title=\"下面来看这道题\"></a>下面来看这道题</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">    process.<span class=\"title function_\">nextTick</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;4&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;5&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">process.<span class=\"title function_\">nextTick</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;6&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;7&#x27;</span>);</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;8&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;9&#x27;</span>);</span><br><span class=\"line\">    process.<span class=\"title function_\">nextTick</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;10&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;11&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;12&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这道题涉及到了 js 的运行机制 , 事件循环 , 同步异步等知识点 </p>\n<p>输出是 : 1，7，6，8，2，4，3，5，9，11，10，12</p>\n<p>做这道题的方法就是 : 先把同步的代码执行完 , 再把异步操作放到event table中 ,event queue 里面 宏任务和微任务队列排好之后( <code>注意微任务队列和宏任务队列不是一个队列</code> ) , 先执行完微任务才能执行微任务 </p>\n","site":{"data":{}},"cover":"/img/avator.jpg","excerpt":"","more":"<h1 id=\"JS-的同步异步操作-和-事件循环机制\"><a href=\"#JS-的同步异步操作-和-事件循环机制\" class=\"headerlink\" title=\"JS 的同步异步操作 和 事件循环机制\"></a>JS 的同步异步操作 和 事件循环机制</h1><p>总所周知 ,  js 是单线程 , 因此只能依次处理任务 , 只有当前任务完成了之后才可以进行下一个任务 , 这无疑降低了 js  的性能 , 降低了用户的使用体验 , 为了解决这一问题 , js引入了异步操作</p>\n<h3 id=\"有哪些是异步操作\"><a href=\"#有哪些是异步操作\" class=\"headerlink\" title=\"有哪些是异步操作\"></a>有哪些是异步操作</h3><ol>\n<li><code>回调函数</code> 的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。</li>\n<li><code>Promise</code>的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。</li>\n<li><code>generator</code> 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部还可以将执行权转移回来。</li>\n<li><code>async 函数</code> 的方式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。</li>\n</ol>\n<h3 id=\"promise的详解\"><a href=\"#promise的详解\" class=\"headerlink\" title=\"promise的详解\"></a>promise的详解</h3><ol>\n<li><code>promise</code>对象的状态不受外界的影响 , pending fulfilled Rejected</li>\n<li><code>resolve </code>的作用是把promise的状态由 pending -&gt; fulfilled , 并将异步操作的结果作为参数传递出去</li>\n<li><code>reject</code> 的作用是把promise的状态由 pending -&gt; rejected , 并将异步操作的结果作为参数传递出去</li>\n<li><code>then</code>方法会自动返回一个promise对象 , 可以链式调用then , 在then里面你可以自己返回promise实例 , 或者then自动返回promise实例加上你的参数</li>\n</ol>\n<h3 id=\"promise身上方法-resolved-rejected-all-race-finally\"><a href=\"#promise身上方法-resolved-rejected-all-race-finally\" class=\"headerlink\" title=\"promise身上方法 : resolved , rejected , all ,race , finally\"></a>promise身上方法 : resolved , rejected , all ,race , finally</h3><h4 id=\"all\"><a href=\"#all\" class=\"headerlink\" title=\"all\"></a>all</h4><p>promise.all()该方法用于将多个Promise实例，包装成一个新的Promise实例。这样当遇到发送多个请求并根据请求顺序获取和使用数据的场景，就可以使用Promise.all来解决</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功了&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;success&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> p3 = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;失败&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([p1, p2]).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">//[&#x27;成功了&#x27;, &#x27;success&#x27;]</span></span><br><span class=\"line\">    &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([p1,p3,p2]).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result)</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error) <span class=\"comment\">// 失败了，打出 &#x27;失败&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"race\"><a href=\"#race\" class=\"headerlink\" title=\"race :\"></a>race :</h4><p>race 第一个执行完的promise 决定race状态  , 那么race方法有什么实际作用呢？当要做一件事，超过多长时间就不做了，可以用这个方法来解决</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功执行&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1500</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;取消执行&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//超过一秒就不执行 promise1</span></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>([promise1,promise2]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"finally\"><a href=\"#finally\" class=\"headerlink\" title=\"finally :\"></a>finally :</h4><p>不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,rejected</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"number\">1</span>==<span class=\"number\">2</span>)<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;执行成功&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">rejected</span>(<span class=\"string\">&#x27;执行失败&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);&#125;,<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">finally</span>(<span class=\"function\">()=&gt;</span>&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我就是要执行&#x27;</span>);&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"下面来看这道题\"><a href=\"#下面来看这道题\" class=\"headerlink\" title=\"下面来看这道题\"></a>下面来看这道题</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">    process.<span class=\"title function_\">nextTick</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;4&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;5&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">process.<span class=\"title function_\">nextTick</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;6&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;7&#x27;</span>);</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;8&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;9&#x27;</span>);</span><br><span class=\"line\">    process.<span class=\"title function_\">nextTick</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;10&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;11&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;12&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这道题涉及到了 js 的运行机制 , 事件循环 , 同步异步等知识点 </p>\n<p>输出是 : 1，7，6，8，2，4，3，5，9，11，10，12</p>\n<p>做这道题的方法就是 : 先把同步的代码执行完 , 再把异步操作放到event table中 ,event queue 里面 宏任务和微任务队列排好之后( <code>注意微任务队列和宏任务队列不是一个队列</code> ) , 先执行完微任务才能执行微任务 </p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}