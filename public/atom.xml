<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一十四洲</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-06T14:15:35.320Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>lnl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS 的同步异步操作 和 事件循环机制</title>
    <link href="http://example.com/2022/05/06/JS%20%E7%9A%84%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%20%E5%92%8C%20%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2022/05/06/JS%20%E7%9A%84%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%20%E5%92%8C%20%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/</id>
    <published>2022-05-06T14:10:20.828Z</published>
    <updated>2022-05-06T14:15:35.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS-的同步异步操作-和-事件循环机制"><a href="#JS-的同步异步操作-和-事件循环机制" class="headerlink" title="JS 的同步异步操作 和 事件循环机制"></a>JS 的同步异步操作 和 事件循环机制</h1><p>总所周知 ,  js 是单线程 , 因此只能依次处理任务 , 只有当前任务完成了之后才可以进行下一个任务 , 这无疑降低了 js  的性能 , 降低了用户的使用体验 , 为了解决这一问题 , js引入了异步操作</p><h3 id="有哪些是异步操作"><a href="#有哪些是异步操作" class="headerlink" title="有哪些是异步操作"></a>有哪些是异步操作</h3><ol><li><code>回调函数</code> 的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。</li><li><code>Promise</code>的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。</li><li><code>generator</code> 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部还可以将执行权转移回来。</li><li><code>async 函数</code> 的方式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。</li></ol><h3 id="promise的详解"><a href="#promise的详解" class="headerlink" title="promise的详解"></a>promise的详解</h3><ol><li><code>promise</code>对象的状态不受外界的影响 , pending fulfilled Rejected</li><li><code>resolve </code>的作用是把promise的状态由 pending -&gt; fulfilled , 并将异步操作的结果作为参数传递出去</li><li><code>reject</code> 的作用是把promise的状态由 pending -&gt; rejected , 并将异步操作的结果作为参数传递出去</li><li><code>then</code>方法会自动返回一个promise对象 , 可以链式调用then , 在then里面你可以自己返回promise实例 , 或者then自动返回promise实例加上你的参数</li></ol><h3 id="promise身上方法-resolved-rejected-all-race-finally"><a href="#promise身上方法-resolved-rejected-all-race-finally" class="headerlink" title="promise身上方法 : resolved , rejected , all ,race , finally"></a>promise身上方法 : resolved , rejected , all ,race , finally</h3><h4 id="all"><a href="#all" class="headerlink" title="all"></a>all</h4><p>promise.all()该方法用于将多个Promise实例，包装成一个新的Promise实例。这样当遇到发送多个请求并根据请求顺序获取和使用数据的场景，就可以使用Promise.all来解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;成功了&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2]).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">//[&#x27;成功了&#x27;, &#x27;success&#x27;]</span></span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p3,p2]).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error) <span class="comment">// 失败了，打出 &#x27;失败&#x27;</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="race"><a href="#race" class="headerlink" title="race :"></a>race :</h4><p>race 第一个执行完的promise 决定race状态  , 那么race方法有什么实际作用呢？当要做一件事，超过多长时间就不做了，可以用这个方法来解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;成功执行&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1500</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;取消执行&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//超过一秒就不执行 promise1</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([promise1,promise2]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(res);&#125;)</span><br></pre></td></tr></table></figure><h4 id="finally"><a href="#finally" class="headerlink" title="finally :"></a>finally :</h4><p>不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,rejected</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>==<span class="number">2</span>)<span class="title function_">resolve</span>(<span class="string">&#x27;执行成功&#x27;</span>)</span><br><span class="line">    <span class="title function_">rejected</span>(<span class="string">&#x27;执行失败&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(data);&#125;,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(data);&#125;)</span><br><span class="line">.<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我就是要执行&#x27;</span>);&#125;)</span><br></pre></td></tr></table></figure><h3 id="下面来看这道题"><a href="#下面来看这道题" class="headerlink" title="下面来看这道题"></a>下面来看这道题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    process.<span class="title function_">nextTick</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    process.<span class="title function_">nextTick</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;10&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;11&#x27;</span>);</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这道题涉及到了 js 的运行机制 , 事件循环 , 同步异步等知识点 </p><p>输出是 : 1，7，6，8，2，4，3，5，9，11，10，12</p><p>做这道题的方法就是 : 先把同步的代码执行完 , 再把异步操作放到event table中 ,event queue 里面 宏任务和微任务队列排好之后( <code>注意微任务队列和宏任务队列不是一个队列</code> ) , 先执行完微任务才能执行微任务 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JS-的同步异步操作-和-事件循环机制&quot;&gt;&lt;a href=&quot;#JS-的同步异步操作-和-事件循环机制&quot; class=&quot;headerlink&quot; title=&quot;JS 的同步异步操作 和 事件循环机制&quot;&gt;&lt;/a&gt;JS 的同步异步操作 和 事件循环机制&lt;/h1&gt;&lt;p&gt;总所</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue_路由</title>
    <link href="http://example.com/2022/05/06/%E8%B7%AF%E7%94%B1/"/>
    <id>http://example.com/2022/05/06/%E8%B7%AF%E7%94%B1/</id>
    <published>2022-05-06T13:43:07.657Z</published>
    <updated>2022-05-06T13:43:24.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><pre><code> 1. 理解: 一个路由(route)就是一组映射关系(key-value),多个路由(routes)需要的路由器(router)进行管理 2. 前端路由: key是路径,value是组件</code></pre><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol><li><p>安装vue-router,命令: <code>npm i vue-router</code></p></li><li><p>引入vue-router之后应用插件: Vue.use(VueRouter)</p></li><li><p>编写router配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该文件专门创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>实现切换(active-class可配置高亮样式)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link <span class="keyword">class</span>=<span class="string">&quot;list-group-item&quot;</span> active-<span class="keyword">class</span>=<span class="string">&quot;active&quot;</span> to=<span class="string">&quot;/about&quot;</span>&gt;<span class="title class_">About</span>&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>指定展示位置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li>路由组件通常存放在<code>page</code>文件夹,一般组件通常存放在<code>component</code>文件夹</li><li>通过切换,’隐藏’了的路由组件,默认是被销毁掉的,需要的时候再去挂载</li><li>每个组件都有自己的<code>$route</code>属性,里面储存着自己的路由信息</li><li>整个应用只有一个router,可以通过组件的<code>$router</code>属性获取到</li></ol><h3 id="3-多级路由"><a href="#3-多级路由" class="headerlink" title="3.多级路由"></a>3.多级路由</h3><ol><li><p>配置路由规则,使用chlidren配置项:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">           <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">           <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">           <span class="attr">children</span>:[</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                   <span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                   <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">               &#125;</span><br><span class="line">           ]</span><br><span class="line">       &#125;,</span><br><span class="line">       </span><br><span class="line">   ]</span><br></pre></td></tr></table></figure></li><li><p>跳转(要写完整的路径):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link <span class="keyword">class</span>=<span class="string">&quot;list-group-item&quot;</span> active-<span class="keyword">class</span>=<span class="string">&quot;active&quot;</span> to=<span class="string">&quot;/home/news&quot;</span>&gt;<span class="title class_">News</span>&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="路由参数有几种"><a href="#路由参数有几种" class="headerlink" title="路由参数有几种?"></a>路由参数有几种?</h2><p>query、params 两个属性可以传递参数</p><p><code>query</code>参数 : 不属于路径当中的一部分，类似于 get 请求，</p><ul><li>地址栏表现为 /search?k1=v1&amp;k2=v2          </li><li>query 参数对应的路由信息 path: “/search”</li></ul><p><code>params</code>参数：属于路径当中的一部分，需要注意，在配置路由的时候，需要占位 ,</p><ul><li>地址栏表现为 /search/v1/v2 </li><li>params参数对应的路由信息<code> path:&quot;/search/:v1/:v2</code>“</li><li><code>注:</code>路由携带params参数的时候,若使用<code>to的对象写法(常用)</code>,则不能使用path配置项,必须使用<code>name</code>配置!</li></ul><h3 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h3><ol><li><p>传递参数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转路由并携带参数,to的字符串写法 --&gt;</span><br><span class="line">          &lt;!-- <span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;</span>&gt;</span>&#123;&#123;message.title&#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span>&amp;nbsp;&amp;nbsp; --&gt;</span><br><span class="line">          </span><br><span class="line">          &lt;!-- 跳转路由并携带query参数,to的对象写法 --&gt;</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                path:&#x27;/home/message/detail&#x27;,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                query:&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    id:message.id,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    title:message.title</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;&#123;message.title&#125;&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.接收参数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><p>1.作用: 可以简化路由的跳转</p><p>2.如何使用</p><ol><li><p>给路由命名:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Message</span>, </span><br><span class="line">                    <span class="attr">children</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                            <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                            <span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br></pre></td></tr></table></figure></li><li><p>简化跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link <span class="keyword">class</span>=<span class="string">&quot;list-group-item&quot;</span> active-<span class="keyword">class</span>=<span class="string">&quot;active&quot;</span> :to=<span class="string">&quot;&#123;name:&#x27;guanyu&#x27;&#125;&quot;</span>&gt;<span class="title class_">About</span>&lt;/router-link&gt;</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                name:&#x27;xiangqing&#x27;,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                query:&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    id:message.id,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    title:message.title</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;&#123;message.title&#125;&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="6-路由的params参数"><a href="#6-路由的params参数" class="headerlink" title="6.路由的params参数"></a>6.路由的params参数</h3><ol><li><p>配置路由,声明接收params参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Message</span>, </span><br><span class="line">                    <span class="attr">children</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                            <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>,</span><br><span class="line">                            <span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转路由并携带params参数,to的字符串写法 --&gt;</span><br><span class="line">          &lt;!-- <span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/home/message/detail/$&#123;message.id&#125;/$&#123;message.title&#125;`&quot;</span>&gt;</span>&#123;&#123;message.title&#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span>&amp;nbsp;&amp;nbsp; --&gt;</span><br><span class="line">          </span><br><span class="line">          &lt;!-- 跳转路由并携带query参数,to的对象写法 --&gt;</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                name:&#x27;xiangqing&#x27;,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                params:&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    id:message.id,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    title:message.title</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;&#123;message.title&#125;&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>注意:路由携带params参数的时候,若使用to的对象写法,则不能使用path配置项,必须使用name配置!</p><ol start="3"><li><p>接收参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h3><pre><code>作用:让路由组件更加方便的接收到参数</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">                            </span><br><span class="line">         <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">         <span class="attr">path</span>:<span class="string">&#x27;detail/&#x27;</span>,              </span><br><span class="line">         <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//props的第一种写法,值为对象,该对象的所有key-value都会以props的形式传给Detail组件.</span></span><br><span class="line"> <span class="attr">props</span>:&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="string">&#x27;hello&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//props的第二种写法,值为布尔值.若布尔值为真,就会把该路由组件收到的所有params参数,以props的形式传给Detail组件</span></span><br><span class="line"><span class="attr">props</span>:<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//props的第三种写法,值为函数,</span></span><br><span class="line"> <span class="title function_">props</span>(<span class="params">&#123;query:&#123;id,title&#125;&#125;</span>)&#123;<span class="comment">//连续结构赋值的写法</span></span><br><span class="line">     <span class="keyword">return</span>&#123;<span class="attr">id</span>:id,<span class="attr">title</span>:title&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;                     </span><br><span class="line">    <span class="attr">id</span>:$route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">title</span>:$route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">          &#125;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-lt-router-link-gt-的replace属性"><a href="#8-lt-router-link-gt-的replace属性" class="headerlink" title="8.&lt;router-link&gt;的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol><li><p>作用: 控制路由跳转时操作浏览器历史纪录的模式</p></li><li><p>浏览器历史记录有两种写入方式: 分别为<code>push</code>和<code>replace</code>,push是追加历史记录,<code>replace</code>是替换当前记录,路由跳转的时候默认为<code>push</code></p></li><li><p>如何开启<code>repalce</code>模式,<code>&lt;router-link replce.....&gt;News&lt;/router-link&gt;</code></p></li></ol><h3 id="9-编程时路由导航"><a href="#9-编程时路由导航" class="headerlink" title="9.编程时路由导航"></a>9.编程时路由导航</h3><ol><li><p>作用:不借助<code>&lt;router-link&gt;</code>实现路由跳转,让路由跳转更加灵活</p></li><li><p>具体编码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API(</span></span><br><span class="line"><span class="title function_">pushShow</span>(<span class="params">m</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">        <span class="attr">query</span>:&#123;</span><br><span class="line">          <span class="attr">id</span>:m.<span class="property">id</span>,</span><br><span class="line">          <span class="attr">title</span>:m.<span class="property">title</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">replaceShow</span>(<span class="params">m</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">      <span class="attr">query</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:m.<span class="property">id</span>,</span><br><span class="line">        <span class="attr">title</span>:m.<span class="property">title</span></span><br><span class="line">      &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">forward</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>()</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="title function_">back</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">   <span class="title function_">go</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol><li><p>作用:让不展示的路由组件保持挂载,不被销毁</p></li><li><p>具体编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=<span class="string">&quot;News&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol><li>作用:路由组件所独有的两个钩子,用于捕获路由组件的激活状态</li><li>具体名字:<ol><li><code>actived</code>路由组件被激活时触发</li><li><code>deactived</code>路由组件失活时触发</li></ol></li></ol><h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol><li>作用:对路由进行权限控制</li><li>分类:全局守卫,独享守卫,组件内守卫</li><li>全局守卫:</li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置路由守卫---初始化的时候被调用,每次路由切换之前被调用</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;前置路由守卫&#x27;</span>)</span><br><span class="line"> <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)<span class="comment">//判断是否需要鉴权</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>)===<span class="string">&#x27;atguigu&#x27;</span>)<span class="comment">//权限控制的具体规则</span></span><br><span class="line">     <span class="title function_">next</span>()</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;学校名称不正确,无权查看!&#x27;</span>)</span><br><span class="line"> &#125;   </span><br><span class="line"> <span class="keyword">else</span> <span class="title function_">next</span>()<span class="comment">//放行</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//全局后置路由守卫---初始化的时候被调用,每次路由切换之后被调用</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;后置路由守卫&#x27;</span>)</span><br><span class="line"> <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> || <span class="string">&#x27;硅谷系统&#x27;</span><span class="comment">//修改网页的title</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>独享路由守卫</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">beforeEnter</span>:<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">                     <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>)===<span class="string">&quot;atguigu&quot;</span>)</span><br><span class="line">                     <span class="title function_">next</span>()</span><br><span class="line">                     <span class="keyword">else</span></span><br><span class="line">                     <span class="title function_">alert</span>(<span class="string">&#x27;学校名称不正确,无权查看!&#x27;</span>)</span><br><span class="line">                 &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>组件内守卫</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫,通过路由规则,进入该组件时被调用</span></span><br><span class="line"> beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//离开守卫,通过路由规则,离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><ol><li>对于一个<code>url</code>来说,什么是hash值?—-#及其后面的内容就是hashzhi</li><li>hash值不会包含在HTTP请求之中,即:hash值不会带给服务器</li><li>hash模式:<ol><li>地址中永远带着#号,不美观</li><li>若以后将地址通过第三方手机app分享,若app校验严格,则地址也会被标记为不合法</li><li>兼容性较好</li></ol></li><li>history模式:<ol><li>地址干净,美观</li><li>兼容性和hash模式相比略差</li><li>应用部署上线时需要后端人员支持,解决刷新页面服务端404的问题<h3 id="考题"><a href="#考题" class="headerlink" title="考题"></a>考题</h3></li></ol></li></ol></li><li><p>路由传递参数（对象写法）path是否可以结合params参数一起使用?</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不可以：不能这样书写,程序会崩掉,必须使用name</span></span><br><span class="line">&lt;router-link :to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">                name:&#x27;xiangqing&#x27;,</span></span><br><span class="line"><span class="string">                params:&#123;</span></span><br><span class="line"><span class="string">                    id:message.id,</span></span><br><span class="line"><span class="string">                    title:message.title</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>如何指定params参数可传可不传? </li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在使用params传参的时候,路由配置如下</span></span><br><span class="line"><span class="attr">path</span>: <span class="string">&quot;/search/:value?&quot;</span>, ?表示该参数可传可不传</span><br></pre></td></tr></table></figure><ol start="3"><li><p>params参数可以传递也可以不传递，但是如果传递是空串，如何解决？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&quot;&quot;</span> || <span class="literal">undefined</span>,<span class="comment">//在参数的后面加入</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>如果指定name与params配置, 但params中数据是一个””, 无法跳转，路径会出问题</p></li><li><p> 路由组件能不能传递props数据?</p></li><li><p>多次执行相同的 push 报错问题<br> <code>原因</code>: push是一个promise,promise需要传递成功和失败两个参数,我们的push中没有传递<br> 解决方法一:</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:‘<span class="title class_">Search</span>’,<span class="attr">params</span>:&#123;<span class="attr">keyword</span>:<span class="string">&quot;…&quot;</span>||<span class="literal">undefined</span>&#125;&#125;,<span class="function">()=&gt;</span>&#123;&#125;,<span class="function">()=&gt;</span>&#123;&#125;)</span><br><span class="line"><span class="comment">//后面两项分别代表执行成功和失败的回调函数,此方法只能解决这一次的问题</span></span><br></pre></td></tr></table></figure><pre><code>解决方法二:在router中的index重写该方法</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、先把VueRouter原型对象的push，保存一份</span></span><br><span class="line"><span class="keyword">let</span> originPush = <span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>;</span><br><span class="line"><span class="comment">//2、重写push|replace</span></span><br><span class="line"><span class="comment">//第一个参数：告诉原来的push，跳转的目标位置和传递了哪些参数</span></span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span> (<span class="params">location, resolve, reject</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (resolve &amp;&amp; reject) &#123;</span><br><span class="line">    originPush.<span class="title function_">call</span>(<span class="variable language_">this</span>, location, resolve, reject);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    originPush.<span class="title function_">call</span>(</span><br><span class="line">      <span class="variable language_">this</span>,</span><br><span class="line">      location,</span><br><span class="line">      <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">      <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;路由&quot;&gt;&lt;a href=&quot;#路由&quot; class=&quot;headerlink&quot; title=&quot;路由&quot;&gt;&lt;/a&gt;路由&lt;/h2&gt;&lt;pre&gt;&lt;code&gt; 1. 理解: 一个路由(route)就是一组映射关系(key-value),多个路由(routes)需要的路由器(rout</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue_刷新当前页面的几种方法</title>
    <link href="http://example.com/2022/05/06/vue%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2/"/>
    <id>http://example.com/2022/05/06/vue%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2/</id>
    <published>2022-05-06T13:40:10.259Z</published>
    <updated>2022-05-06T13:40:58.014Z</updated>
    
    <content type="html"><![CDATA[<p>第一个想到的方法是this.$router.push() , 但是会报错 , 不让自己页面跳转自己页面 , 就算解决了这个问题跳转了之后 , dom也不会渲染 , 页面的数据显示不出来 , 所以查询了一下方法来解决问题</p><h1 id="location-reload-不推荐-页面出现一瞬间的空白"><a href="#location-reload-不推荐-页面出现一瞬间的空白" class="headerlink" title="location.reload()  不推荐 : 页面出现一瞬间的空白"></a>location.reload()  不推荐 : 页面出现一瞬间的空白</h1><ol><li>这个方法相当于( ctrl + R )刷新当前页面 , 但是刷新过后<code>vuex里面的值也会重新刷新</code> , 当我们要实现多个组件根据 vuex 里面的值做相应的判断时 , 这个功能不能实现 , 于是我们结合<code>window.sessionStorage.getItem() 和 vuex </code>以实现vuex中的值在本次会话的时候不会被刷新</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//freeze状态只出现一次 , 解封之后知道浏览器关闭都不在出现</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeFreeze&#x27;</span>)</span><br><span class="line"><span class="comment">//  1. dom没有渲染 , 我们要重新渲染dom </span></span><br><span class="line">location.<span class="title function_">reload</span>()<span class="comment">//这种刷新方式太耗能了,亟待优化</span></span><br><span class="line"><span class="comment">//  2. 强制刷新之后freeze还会出现--&gt;把值保存在session中</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;freeze&#x27;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以下是vuex中的</span><br><span class="line"><span class="attr">freeze</span>: <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;freeze&#x27;</span>) || <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">dom页面根据vuex中的freeze来判断显不显示</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;all0&quot;</span> v-<span class="keyword">if</span>=<span class="string">&quot;this.$store.state.freeze===1&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h1 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide / inject"></a>provide / inject</h1><p>这对选项是一起使用的 , 允许父组件向子孙组件注入一个依赖 , 如果子孙组件想要获取祖先组件的资源 , 就可以使用 inject 中的方法<br>provide : 一个对象 , 提供给子孙资源<br>inject : 一个组件 , 子孙组件调用父组件的值</p><p>使用provide / inject 来实现 当前页面刷新 , 组件自身刷新 , 并且重新渲染dom</p><p>父组件中编写provide向子组件提供资源 , 利用 v-if ,来显示app在dom树上存在与否 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;isRouterAlive&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">reload</span>:<span class="variable language_">this</span>.<span class="property">reload</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isRouterAlive</span>:<span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">reload</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">isRouterAlive</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$nextTick(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">isRouterAlive</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件中inject使用父组件提供的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//注入刷新依赖provide/inject</span></span><br><span class="line">  <span class="attr">inject</span>:[<span class="string">&#x27;reload&#x27;</span>],</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="comment">//使用inject中的方法</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">reload</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h1><p>在下次dom刷新之后调用它的回调函数</p><p>上面的nextTick的作用是在app刷新之后 , 重新给data中的 <code>isRouterAlive 赋值true</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isRouterAlive</span> = <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一个想到的方法是this.$router.push() , 但是会报错 , 不让自己页面跳转自己页面 , 就算解决了这个问题跳转了之后 , dom也不会渲染 , 页面的数据显示不出来 , 所以查询了一下方法来解决问题&lt;/p&gt;
&lt;h1 id=&quot;location-reload</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Canvas</title>
    <link href="http://example.com/2022/05/06/canvas/"/>
    <id>http://example.com/2022/05/06/canvas/</id>
    <published>2022-05-06T13:39:18.735Z</published>
    <updated>2022-05-06T13:39:37.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="canvas可以绘制路径-矩形-圆形-字符-渐变-以及-添加图像"><a href="#canvas可以绘制路径-矩形-圆形-字符-渐变-以及-添加图像" class="headerlink" title="canvas可以绘制路径 , 矩形 , 圆形, 字符  , 渐变, 以及 添加图像"></a>canvas可以绘制路径 , 矩形 , 圆形, 字符  , 渐变, 以及 添加图像</h2><p>首先要创建一个canvas容器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">&quot;myCanvas&quot;</span> width=<span class="string">&quot;300&quot;</span> height=<span class="string">&quot;300&quot;</span> &gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure><p>获取容器 , 并创建context对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myCanvas&quot;</span>);</span><br><span class="line"><span class="comment">//创建context对象</span></span><br><span class="line"><span class="keyword">var</span> ctx=c.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>路径(直线)<pre><code>  - 方法:  ``moveTo(x,y)``         ``lineTo(x,y)``    x,y确定在画布里的起始位置和结束位置    - 使用  ``stroke()`` 方法来绘制</code></pre></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> c=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myCanvas&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx=c.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><ul><li><p>矩形</p><pre><code>  - 方法 : ``fillStyle=&quot;color&quot;``   ``fillRect(x,y,width,height)``  x,y 矩形的起点 , width , height 矩形的宽高 </code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">fillStyle</span>=<span class="string">&quot;blue&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">150</span>,<span class="number">150</span>,<span class="number">150</span>,<span class="number">150</span>);</span><br></pre></td></tr></table></figure></li><li><p>圆形</p><pre><code>  - 方法: ``arc(150,150,75,0,2*Math.PI)`` //x,y,r,srart,stop  `` stroke()``</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">150</span>,<span class="number">150</span>,<span class="number">75</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>) <span class="comment">//x,y,r,srart,stop</span></span><br><span class="line">ctx.<span class="title function_">stroke</span>()</span><br></pre></td></tr></table></figure></li><li><p>文本字符</p><pre><code>  - 方法: ``ctx.font = &quot;30px Arial&quot; ``字体效果      ``strokeText(&quot;一十四洲&quot;,150,150)``内容 , x,y起点</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">font</span> = <span class="string">&quot;30px Arial&quot;</span></span><br><span class="line">ctx.<span class="title function_">strokeText</span>(<span class="string">&quot;一十四洲&quot;</span>,<span class="number">150</span>,<span class="number">150</span>)<span class="comment">//内容 , x,y起点</span></span><br></pre></td></tr></table></figure></li><li><p>渐变</p><pre><code>  - 方法:                - createLinearGradient() // 线性渐变              - createRadialGradient() //径向渐变              - addColorStop() </code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var grd1 = ctx.createLinearGradient(0,0,200,0); //线性渐变</span></span><br><span class="line"><span class="keyword">var</span> grd=ctx.<span class="title function_">createRadialGradient</span>(<span class="number">75</span>,<span class="number">50</span>,<span class="number">5</span>,<span class="number">90</span>,<span class="number">60</span>,<span class="number">100</span>);<span class="comment">//径向渐变</span></span><br><span class="line">grd.<span class="title function_">addColorStop</span>(<span class="number">0</span>,<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">grd.<span class="title function_">addColorStop</span>(<span class="number">1</span>,<span class="string">&#x27;white&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/5e74cede1bf74686b426a5570ed67466.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;canvas可以绘制路径-矩形-圆形-字符-渐变-以及-添加图像&quot;&gt;&lt;a href=&quot;#canvas可以绘制路径-矩形-圆形-字符-渐变-以及-添加图像&quot; class=&quot;headerlink&quot; title=&quot;canvas可以绘制路径 , 矩形 , 圆形, 字符  </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>瀑布流_懒加载</title>
    <link href="http://example.com/2022/05/06/%E7%80%91%E5%B8%83%E6%B5%81_%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>http://example.com/2022/05/06/%E7%80%91%E5%B8%83%E6%B5%81_%E6%87%92%E5%8A%A0%E8%BD%BD/</id>
    <published>2022-05-06T13:34:20.940Z</published>
    <updated>2022-05-06T13:36:11.534Z</updated>
    
    <content type="html"><![CDATA[<h3 id="懒加载-可以在里面写防抖"><a href="#懒加载-可以在里面写防抖" class="headerlink" title="懒加载(可以在里面写防抖)"></a>懒加载(可以在里面写防抖)</h3><p><a href="https://blog.csdn.net/ruoyu923/article/details/82461634?spm=1001.2101.3001.6650.8&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8.pc_relevant_default&utm_relevant_index=12">这个大佬写的很详细</a><br>vue项目里实现懒加载要用到 <code>v-infinite-scroll</code> 插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i v-infinite-scroll -D</span><br><span class="line"><span class="keyword">import</span> lazyLoad <span class="keyword">from</span> <span class="string">&#x27;v-infinite-scroll&#x27;</span> </span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(lazyLoad)</span><br></pre></td></tr></table></figure><p>下面的<code>v-infinite-scroll</code>绑定的事件<code>load()</code>就会在滚动条距离页面底部<code>300px</code>的时候触发<br><code>:infinite-scroll-disabled=&quot;disabled&quot;</code>随着disabled的值的变化,决定是否禁止触发加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">      v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">&quot;type === &#x27;video&#x27;&quot;</span></span><br><span class="line">      <span class="keyword">class</span>=<span class="string">&quot;container&quot;</span></span><br><span class="line">      v-infinite-scroll=<span class="string">&quot;load&quot;</span></span><br><span class="line">      :infinite-scroll-disabled=<span class="string">&quot;disabled&quot;</span></span><br><span class="line">      :infinite-scroll-distance=<span class="string">&quot;300&quot;</span></span><br><span class="line">      :infinite-scroll-immediate=<span class="string">&quot;false&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in musicListData&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item_box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.data.coverUrl&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;play_count&quot;</span>&gt;</span>30万+<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;play_time&quot;</span>&gt;</span>4:32<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item_discribe&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&#123; item.data.description || item.data.title &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;author&quot;</span>&gt;</span>by:&#123;&#123; item.data.creator.nickname &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>下面经过自定义事件触发父组件里面的<code>bottomLoad</code>函数(这里特地起一样的名字)<br>懒加载被触发一次之后 , 设置<code>this.disabled = true</code>,防止重复触发懒加载事件 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">load</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;我被触发了&#x27;);</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;bottomLoad&quot;</span>);</span><br><span class="line">      <span class="comment">// 触发load后加载数据 期间不允许再次触发load事件</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>父组件中被触发的自定义事件处理函数 , 改变歌单的数据 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//懒加载</span></span><br><span class="line">    <span class="title function_">bottomLoad</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">hasMore</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getMusicInfo</span>(<span class="variable language_">this</span>.<span class="property">currentTag</span>.<span class="property">id</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>子组件中监听歌单的数据有没有被改变 , 新数据加载了之后重新开启懒加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="comment">//数据更新之后再次触发load事件</span></span><br><span class="line">    <span class="title function_">musicListData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isLoad</span>) &#123;<span class="comment">//父组件传过来的值 , 说明父组件中的函数已经进行完毕</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">musicListData</span>.<span class="property">length</span> != <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ol><li><code> v-infinite-scroll=&quot;load&quot;</code><br> 滚动触发的事件load</li><li><code> infinite-scroll-disabled</code><br> 是否禁止触发加载</li><li><code> infinite-scroll-distance</code><br> 距离底部多高开始加载数据</li><li><code>infinite-scroll-immediate-check</code><br> 指令在绑定后立即检查，是否内容高度不足以填充页面容器。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;懒加载-可以在里面写防抖&quot;&gt;&lt;a href=&quot;#懒加载-可以在里面写防抖&quot; class=&quot;headerlink&quot; title=&quot;懒加载(可以在里面写防抖)&quot;&gt;&lt;/a&gt;懒加载(可以在里面写防抖)&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.n</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>初识Echarts</title>
    <link href="http://example.com/2022/05/06/%E5%AE%89%E8%A3%85echarts/"/>
    <id>http://example.com/2022/05/06/%E5%AE%89%E8%A3%85echarts/</id>
    <published>2022-05-06T12:32:13.349Z</published>
    <updated>2022-05-06T13:57:37.470Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装echarts"><a href="#安装echarts" class="headerlink" title="安装echarts"></a>安装echarts</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts --save</span><br></pre></td></tr></table></figure><h3 id="在mian-js中引入-全局引入"><a href="#在mian-js中引入-全局引入" class="headerlink" title="在mian.js中引入(全局引入)"></a>在mian.js中引入(全局引入)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&quot;echarts&quot;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$echarts</span> = echarts</span><br></pre></td></tr></table></figure><h3 id="开始使用echarts"><a href="#开始使用echarts" class="headerlink" title="开始使用echarts"></a>开始使用echarts</h3><ol><li>定义有<code>宽度和高度</code>的父容器</li><li>初始化<code>echarts实例</code></li><li>指定配置项和数据</li><li>将配置项设置给echarts实例对象 绘制图表</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 定义有宽度和高度的父容器</span><br><span class="line">&lt;div id=<span class="string">&quot;main&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;main_container&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 初始化echarts实例</span><br><span class="line"><span class="keyword">var</span> mycharts = <span class="variable language_">this</span>.<span class="property">$echarts</span>.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;main&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 指定配置项和数据</span><br><span class="line"><span class="keyword">const</span> option=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 将配置项设置给echarts实例对象 绘制图表</span><br><span class="line">mycharts.<span class="title function_">setOption</span>(option)</span><br></pre></td></tr></table></figure><h3 id="基础配置-摘抄自黑马教程"><a href="#基础配置-摘抄自黑马教程" class="headerlink" title="基础配置(摘抄自黑马教程)"></a>基础配置(摘抄自黑马教程)</h3><ul><li><code>series</code><ul><li>系列列表 , 每个系列通过<code>type</code>决定自己的图标类型 , 可以指定图标数据 , 可以多个图标重叠</li></ul></li><li><code>xAxis</code><ul><li>boundaryGap: 坐标轴两边的留白策略true , 这时候刻度只是作为分割线 , 标签和数据点都会在两个刻度之间的带(band)中间</li></ul></li><li><code>yAxis</code> : 直角 grid 中的 y 轴</li><li><code> grid</code> : 直角坐标系内绘图网络</li><li><code>title</code> : 标题组件</li><li><code> tooltip</code> : 提示框组件</li><li><code> legend</code> : 图例组件</li><li><code>color</code> : 调色盘颜色列表<br>  数据堆叠 , 同个类目轴上系列配置相同的<code>stack</code>值后 , 后一个系列的值会在前一个系列的值上相加<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设置配置项 */</span></span><br><span class="line">    <span class="keyword">const</span> option = &#123;</span><br><span class="line">      <span class="comment">/* color设置我们的线条的颜色 , 注意后面是一个数组 */</span></span><br><span class="line">      <span class="attr">color</span>:[<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>],</span><br><span class="line">      <span class="comment">/* 标题 */</span></span><br><span class="line">      <span class="attr">title</span>: &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&quot;Temperature Change&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">/* 图表的提示框组件 */</span></span><br><span class="line">      <span class="attr">tooltip</span>: &#123;</span><br><span class="line">        <span class="comment">/* 触发方式 , 折线图是axis , 柱状图是item */</span></span><br><span class="line">        <span class="attr">trigger</span>: <span class="string">&quot;axis&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">legend</span>: &#123;</span><br><span class="line">        <span class="comment">/* series里面有name的话就不需要legend */</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">/* 网格配置 grid可以控制线性图 , 柱状图 , 图标大小 */</span></span><br><span class="line">      <span class="comment">// grid:&#123;</span></span><br><span class="line">      <span class="comment">//   /* 图标距离左边的距离 */</span></span><br><span class="line">      <span class="comment">//   left:&#x27;20%&#x27;,</span></span><br><span class="line">      <span class="comment">//   right:&#x27;20%&#x27;,</span></span><br><span class="line">      <span class="comment">//   top:&#x27;20%&#x27;,</span></span><br><span class="line">      <span class="comment">//   /* 是否显示刻度标签 */</span></span><br><span class="line">      <span class="comment">//   containLabel:true</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">      <span class="comment">/* 工具箱组件 , 可以另存为图片等功能 */</span></span><br><span class="line">      <span class="attr">toolbox</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">feature</span>: &#123;</span><br><span class="line">          <span class="attr">dataZoom</span>: &#123;</span><br><span class="line">            <span class="attr">yAxisIndex</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">dataView</span>: &#123; <span class="attr">readOnly</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">          <span class="attr">magicType</span>: &#123; <span class="attr">type</span>: [<span class="string">&quot;line&quot;</span>, <span class="string">&quot;bar&quot;</span>] &#125;,</span><br><span class="line">          <span class="attr">restore</span>: &#123;&#125;,</span><br><span class="line">          <span class="attr">saveAsImage</span>: &#123;&#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">/* 设置x轴的相关配置 */</span></span><br><span class="line">      <span class="attr">xAxis</span>: &#123;</span><br><span class="line">        <span class="comment">/* 类目轴 , 要搭配data使用 , 自定义 x轴 */</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">        <span class="comment">/* 是否让我们的线条和坐标轴有缝隙 */</span></span><br><span class="line">        <span class="attr">boundaryGap</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">/* 自定义坐标轴 */</span></span><br><span class="line">        <span class="attr">data</span>: [<span class="string">&quot;Mon&quot;</span>, <span class="string">&quot;Tue&quot;</span>, <span class="string">&quot;Wed&quot;</span>, <span class="string">&quot;Thu&quot;</span>, <span class="string">&quot;Fri&quot;</span>, <span class="string">&quot;Sat&quot;</span>, <span class="string">&quot;Sun&quot;</span>],</span><br><span class="line">        <span class="comment">/* 设置x轴标签文字样式 */</span></span><br><span class="line">        <span class="attr">axisLabel</span>:&#123;</span><br><span class="line">          <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/* x轴样式不显示 */</span></span><br><span class="line">        <span class="attr">axisLine</span>:&#123;</span><br><span class="line">          <span class="attr">show</span>:<span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">yAxis</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">        <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">          <span class="attr">formatter</span>: <span class="string">&quot;&#123;value&#125; °C&quot;</span>,</span><br><span class="line">          <span class="comment">/* 把刻度标签里面的文字颜色设置为白色 */</span></span><br><span class="line">          <span class="attr">color</span>:<span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/* y轴的分割线 */</span></span><br><span class="line">        <span class="comment">// splitLine:&#123;</span></span><br><span class="line">        <span class="comment">//   lineStyle:&#123;</span></span><br><span class="line">        <span class="comment">//     color:&#x27;blue&#x27;</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 不显示刻度 */</span></span><br><span class="line">        <span class="attr">axisTick</span>:&#123;</span><br><span class="line">          <span class="attr">show</span>:<span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/* 不显示y轴的线 */</span></span><br><span class="line">        <span class="attr">axisLine</span>:&#123;</span><br><span class="line">          <span class="attr">show</span>:<span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">/* 系列图表配置 , 它决定着显示哪种类型的图表 */</span></span><br><span class="line">      <span class="attr">series</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;Highest&quot;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">          <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">datavalue</span>,</span><br><span class="line">          <span class="attr">markPoint</span>: &#123;</span><br><span class="line">            <span class="attr">data</span>: [</span><br><span class="line">              &#123; <span class="attr">type</span>: <span class="string">&quot;max&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;Max&quot;</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">type</span>: <span class="string">&quot;min&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;Min&quot;</span> &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">markLine</span>: &#123;</span><br><span class="line">            <span class="attr">data</span>: [&#123; <span class="attr">type</span>: <span class="string">&quot;average&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;Avg&quot;</span> &#125;],</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;Lowest&quot;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">          <span class="attr">data</span>: [<span class="number">1</span>, -<span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>],</span><br><span class="line">          <span class="attr">markPoint</span>: &#123;</span><br><span class="line">            <span class="attr">data</span>: [&#123; <span class="attr">name</span>: <span class="string">&quot;周最低&quot;</span>, <span class="attr">value</span>: -<span class="number">2</span>, <span class="attr">xAxis</span>: <span class="number">1</span>, <span class="attr">yAxis</span>: -<span class="number">1.5</span> &#125;],</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">markLine</span>: &#123;</span><br><span class="line">            <span class="attr">data</span>: [</span><br><span class="line">              &#123; <span class="attr">type</span>: <span class="string">&quot;average&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;Avg&quot;</span> &#125;,</span><br><span class="line">              [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">symbol</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">                  <span class="attr">x</span>: <span class="string">&quot;90%&quot;</span>,</span><br><span class="line">                  <span class="attr">yAxis</span>: <span class="string">&quot;max&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">symbol</span>: <span class="string">&quot;circle&quot;</span>,</span><br><span class="line">                  <span class="attr">label</span>: &#123;</span><br><span class="line">                    <span class="attr">position</span>: <span class="string">&quot;start&quot;</span>,</span><br><span class="line">                    <span class="attr">formatter</span>: <span class="string">&quot;Max&quot;</span>,</span><br><span class="line">                  &#125;,</span><br><span class="line">                  <span class="attr">type</span>: <span class="string">&quot;max&quot;</span>,</span><br><span class="line">                  <span class="attr">name</span>: <span class="string">&quot;最高点&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">              ],</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h3 id="让echarts实现响应式"><a href="#让echarts实现响应式" class="headerlink" title="让echarts实现响应式"></a>让echarts实现响应式</h3>在mounted中利用<code>window.onresize</code>来监听页面是否发生变化 , 当页面发生变化的时候 , 就重绘图表 , 但是注意在 window.onresize 的<code>funciton中this指向不再是vm</code> , 所以就要在之前<code>let _this = this</code> , 并且为了在 mounted 中获得 echarts 实例对象 mycharts  , 就要在 data 中定义 mycharts  , 在实例化的时候直接<code>this.mycharts = this.$echarts.init()</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     <span class="attr">datavalue</span>:[<span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">9</span>],</span><br><span class="line">     <span class="attr">mycharts</span>:&#123;&#125;</span><br><span class="line">   &#125;;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="title class_">Echarts</span>()</span><br><span class="line">   <span class="comment">/* 图表响应式 */</span></span><br><span class="line">   <span class="keyword">let</span> _this = <span class="variable language_">this</span></span><br><span class="line">   <span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     _this.<span class="property">mycharts</span>.<span class="title function_">resize</span>()</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装echarts&quot;&gt;&lt;a href=&quot;#安装echarts&quot; class=&quot;headerlink&quot; title=&quot;安装echarts&quot;&gt;&lt;/a&gt;安装echarts&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>刷题心得记录</title>
    <link href="http://example.com/2022/05/06/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2022/05/06/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97%E8%AE%B0%E5%BD%95/</id>
    <published>2022-05-06T12:28:52.756Z</published>
    <updated>2022-05-06T12:29:34.629Z</updated>
    
    <content type="html"><![CDATA[<p>目前更新了:二分法,快排,  js创建链表,  动态规划, 异或运算,三数之和  等       </p><ol><li><p>==FindIndex== 找到数组中的<code>第一个</code>目标值并且返回<code>目标值的下标</code> , 没有找到就返回-1<br>判断后返回值,不用手动return</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> index = nums.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span>=&gt;</span>item===target)</span><br></pre></td></tr></table></figure></li><li><p>==find== 找到数组中<code>第一个</code>符合条件的<code>值</code>  , 没有找到就返回 <code>undefined</code> find对空数组不起作用</p></li><li><p><code>sort</code> 会改变原数组</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b) <span class="comment">//升序</span></span><br><span class="line">nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>b-a) <span class="comment">//降序</span></span><br></pre></td></tr></table></figure><h2 id="二分查找-二分详解"><a href="#二分查找-二分详解" class="headerlink" title="二分查找 二分详解"></a>二分查找 <a href="https://blog.csdn.net/qq_45978890/article/details/116094046?spm=1001.2101.3001.6650.10&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-10.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-10.pc_relevant_default&utm_relevant_index=13">二分详解</a></h2><p>二分查找 : 适用于升序数组 , 判断条件是<code>left &lt; right </code>,不符合条件就返回-1</p><ol><li>我解题的时候纠结数组分别是奇数和偶数的时候中间值mid怎么取 , 但是不必纠结这个问题 , 因为除以二的时候它们都是有可能出现的 , </li><li>重点是判断<code>边界问题</code> , 下面采用了<code>左闭右闭</code>的解法 , 所以判断循环的时候条件是 <code>left &lt;= right</code> , 因为<code>[left , right]</code> 是有意义的</li><li>当我计算mid的时候使用了<code>mid = ( left + right ) / 2</code> , 出来的结果错误的(可能是因为left+right超过了定义变量时的大小),然后我又改变了一种写法:mid = (right-left)/2+left ,计算出来的index居然有小数!!?? 尝试了一下,在js里面<code>5/2=2.5....</code></li><li>正确的写法:<code>const mid = Math.floor((right-left)/2)+left</code> //<code> 防止计算时溢出</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">89</span>,<span class="number">7</span>,<span class="number">21</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">63</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">const</span> target = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用二分查找来找到 target 在 nums 中对应值的下标</span></span><br><span class="line"><span class="comment">//查找的条件是查找范围不为空</span></span><br><span class="line">nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums,target</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> right = nums.<span class="property">length</span>-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="comment">//每次判断之前都重置 mid</span></span><br><span class="line">        <span class="comment">// const mid = (left+right)/2</span></span><br><span class="line">        <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((right-left)/<span class="number">2</span>)+left</span><br><span class="line">        <span class="keyword">const</span> num = nums[mid]</span><br><span class="line">        <span class="keyword">if</span>(num === target)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &gt; num)&#123;</span><br><span class="line">            left = mid+<span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right = mid-<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">search</span>(nums,target)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br></pre></td></tr></table></figure>这道异曲同工之妙,就是缩小空间</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。</span><br><span class="line">如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</span><br><span class="line">请必须使用时间复杂度为 <span class="title function_">O</span>(log n) 的算法。</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> searchInsert = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="comment">//法一</span></span><br><span class="line">    <span class="comment">/* let index = nums.findIndex(item=&gt;item==target)</span></span><br><span class="line"><span class="comment">    if(index != -1)&#123;</span></span><br><span class="line"><span class="comment">        return index</span></span><br><span class="line"><span class="comment">    &#125;else&#123;</span></span><br><span class="line"><span class="comment">        let index2 = nums.findIndex(item=&gt;item&gt;target)</span></span><br><span class="line"><span class="comment">        if(index2==-1)return nums.length</span></span><br><span class="line"><span class="comment">        else return index2</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//二分法</span></span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> right = nums.<span class="property">length</span>-<span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> flag = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((right-left)/<span class="number">2</span>)+left</span><br><span class="line">        <span class="keyword">let</span> num = nums[mid]</span><br><span class="line">        <span class="keyword">if</span>(target == num)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &gt; num)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span> </span><br><span class="line">           / /区间缩小到 left 和 right 相等的时候,从这里就出去了,</span><br><span class="line">           <span class="regexp">/ /</span>此时left 在 原来 left = right 那个值的左边一位 , </span><br><span class="line">           <span class="regexp">/ /</span>刚好就是找不到值要插入的index</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="快排-双边循环-递归"><a href="#快排-双边循环-递归" class="headerlink" title="快排(双边循环 , 递归)"></a>快排(双边循环 , 递归)</h2><p>每次都将最左边的值作为<code>基准值</code> , 然后从最左边的left 和 最右边的 right 开始查找 , 从right开始  , right找的是比基准值小的 , 找到之后left 就开始找  , 找的是比基准值大的 , 找完一轮后交换left 和right 的值, 最后left 和right 重合的时候 , <code>交换基准值和left 的值</code>  ,然后使用递归 , 分别排序基准值左边的 和 右边的 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = [<span class="number">5</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myquickSort</span>(<span class="params">num,left,right</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> flag = left</span><br><span class="line">    <span class="keyword">if</span>(left&gt;=right)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="comment">//找到符合的right</span></span><br><span class="line">        <span class="keyword">while</span>(right&gt;left&amp;&amp;num[right]&gt;=num[flag])</span><br><span class="line">        right--</span><br><span class="line">        <span class="comment">//找到符合的left</span></span><br><span class="line">        <span class="keyword">while</span>(right&gt;left&amp;&amp;num[left]&lt;=num[flag])</span><br><span class="line">        left++</span><br><span class="line">        <span class="comment">//交换两者的值</span></span><br><span class="line">        <span class="keyword">if</span>(left&lt;right)</span><br><span class="line">        [num[right],num[left]] = [num[left],num[right]] </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//交换基准值和rightleft重合的值</span></span><br><span class="line">    [num[left],num[flag]] = [num[flag],num[left]] </span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">jisuan</span> (num , left , right)&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;=right)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="title function_">myquickSort</span>(num,left,right)</span><br><span class="line">    <span class="title function_">jisuan</span>(num,left,flag-<span class="number">1</span>)</span><br><span class="line">    <span class="title function_">jisuan</span>(num,flag+<span class="number">1</span>,right)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">jisuan</span>(num,<span class="number">0</span>,num.<span class="property">length</span>-<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br></pre></td></tr></table></figure><h2 id="快排-单边循环-递归"><a href="#快排-单边循环-递归" class="headerlink" title="快排(单边循环 递归)"></a>快排(单边循环 递归)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = [<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//单边循环</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">quickSort</span> = (<span class="params">num, left, right</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = left</span><br><span class="line">    <span class="keyword">let</span> mark = left</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num[left]&lt;num[flag])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这个时候mark就要往右移动一位 , 因为找到了一个小于flag 的数</span></span><br><span class="line">            mark++</span><br><span class="line">            [num[left],num[mark]] = [num[mark],num[left]]</span><br><span class="line">        &#125;</span><br><span class="line">        left++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//交换基准数 和 mark 的值</span></span><br><span class="line">    [num[flag],num[mark]] = [num[mark],num[flag]]</span><br><span class="line">    <span class="comment">//最后要返回基准数</span></span><br><span class="line">    <span class="keyword">return</span> mark</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">jisuan</span> = (<span class="params">num, left, right</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//既然是递归 , 就要有结束条件</span></span><br><span class="line">    <span class="keyword">if</span>(left&gt;=right)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="title function_">quickSort</span>(num, left, right)</span><br><span class="line">    <span class="title function_">jisuan</span>(num, left, flag - <span class="number">1</span>)</span><br><span class="line">    <span class="title function_">jisuan</span>(num, flag + <span class="number">1</span>, right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">jisuan</span>(num, <span class="number">0</span>, num.<span class="property">length</span> - <span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br></pre></td></tr></table></figure><h2 id="快排-非递归"><a href="#快排-非递归" class="headerlink" title="快排 (非递归)"></a>快排 (非递归)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//当数据量很大的时候 , 递归快排会造成栈溢出 , 为了解决这个问题 , 我们使用js数组 来模拟栈 , </span></span><br><span class="line"><span class="comment">//将待排序的[left,right]保存到数组中 , 循环取出进行快排 </span></span><br><span class="line"><span class="comment">// let num = [4, 7, 3, 5, 6, 2, 8, 1]</span></span><br><span class="line"><span class="keyword">let</span> num = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>]</span><br><span class="line"><span class="comment">//非递归实现快排</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">quickSort</span> = (<span class="params">num, left, right</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = left</span><br><span class="line">    <span class="keyword">let</span> mark = left</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num[left] &lt; num[flag]) &#123;</span><br><span class="line">            <span class="comment">//这个时候mark就要往右移动一位 , 因为找到了一个小于flag 的数</span></span><br><span class="line">            mark++</span><br><span class="line">            [num[left], num[mark]] = [num[mark], num[left]]</span><br><span class="line">        &#125;</span><br><span class="line">        left++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//交换基准数 和 mark 的值</span></span><br><span class="line">    [num[flag], num[mark]] = [num[mark], num[flag]]</span><br><span class="line">    <span class="comment">//最后要返回基准数</span></span><br><span class="line">    <span class="keyword">return</span> mark</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用非递归的方式进行快排</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">jisuan</span> = (<span class="params">num,left,right</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> list = [[left,right]]</span><br><span class="line">    <span class="keyword">while</span>(list.<span class="property">length</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> now = list.<span class="title function_">pop</span>()</span><br><span class="line">        <span class="keyword">if</span>(now[<span class="number">0</span>]&gt;=now[<span class="number">1</span>])</span><br><span class="line">         <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">let</span> flag = <span class="title function_">quickSort</span>(num,now[<span class="number">0</span>],now[<span class="number">1</span>])</span><br><span class="line">        <span class="comment">//flag-1 和 flag+1 避免了类似[1,3,2,5,9,6,8,7]这样flag一直卡在0的情况</span></span><br><span class="line">        list.<span class="title function_">push</span>([now[<span class="number">0</span>],flag-<span class="number">1</span>])</span><br><span class="line">        list.<span class="title function_">push</span>([flag+<span class="number">1</span>,now[<span class="number">1</span>]])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">jisuan</span>(num,<span class="number">0</span>,num.<span class="property">length</span>-<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br></pre></td></tr></table></figure><h2 id="js-实现链表-并且判断链表是否循环"><a href="#js-实现链表-并且判断链表是否循环" class="headerlink" title="js 实现链表 , 并且判断链表是否循环"></a>js 实现链表 , 并且判断链表是否循环</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//用js来实现一个链表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = data</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedPropotype</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造节点</span></span><br><span class="line">    <span class="title function_">create</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(data)</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = node</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">            <span class="keyword">while</span> (current.<span class="property">next</span>) &#123;</span><br><span class="line">                current = current.<span class="property">next</span></span><br><span class="line">            &#125;</span><br><span class="line">            current.<span class="property">next</span> = node</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除节点</span></span><br><span class="line">    <span class="title function_">deletenode</span>(<span class="params">index</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">let</span> k = p</span><br><span class="line">        <span class="keyword">let</span> len = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            k = p</span><br><span class="line">            p = p.<span class="property">next</span></span><br><span class="line">            len++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; len) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除超出范围&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> q = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">let</span> l = q</span><br><span class="line">        <span class="comment">//删除头节点</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span></span><br><span class="line">            <span class="keyword">return</span> q.<span class="property">data</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除中间节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; len) &#123;</span><br><span class="line">            <span class="keyword">while</span> (index) &#123;</span><br><span class="line">                l = q</span><br><span class="line">                q = q.<span class="property">next</span></span><br><span class="line">                index--</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> deletenum = q.<span class="property">data</span></span><br><span class="line">            l.<span class="property">next</span> = q.<span class="property">next</span></span><br><span class="line">            <span class="keyword">return</span> deletenum</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除尾节点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            k.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找节点</span></span><br><span class="line">    <span class="title function_">searchnode</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">let</span> k = p</span><br><span class="line">        <span class="keyword">let</span> len = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            k = p</span><br><span class="line">            p = p.<span class="property">next</span></span><br><span class="line">            len++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; len) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查找超出范围&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">while</span>(index)&#123;</span><br><span class="line">            index--</span><br><span class="line">            p = p.<span class="property">next</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改节点</span></span><br><span class="line">    <span class="title function_">editnode</span>(<span class="params">index,data</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">let</span> k = p</span><br><span class="line">        <span class="keyword">let</span> len = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            k = p</span><br><span class="line">            p = p.<span class="property">next</span></span><br><span class="line">            len++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; len) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;修改超出范围&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">while</span>(index)&#123;</span><br><span class="line">            index--</span><br><span class="line">            p = p.<span class="property">next</span></span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="property">data</span> = data</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> linknode = <span class="keyword">new</span> <span class="title class_">LinkedPropotype</span>()</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">1</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">2</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">3</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">4</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">5</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">6</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面三部将链表改造为循环链表</span></span><br><span class="line"><span class="keyword">var</span> C = linknode.<span class="title function_">searchnode</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> G = linknode.<span class="title function_">searchnode</span>(<span class="number">6</span>)</span><br><span class="line">G.<span class="property">next</span> = C</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用快慢指针来判断有没有环</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">isCircle</span> = (<span class="params">link</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> p = link.<span class="property">head</span></span><br><span class="line">    <span class="keyword">let</span> q = link.<span class="property">head</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//快指针走完就没有必要再进行判断了</span></span><br><span class="line">    <span class="keyword">while</span>(q&amp;&amp;q.<span class="property">next</span>)&#123;</span><br><span class="line">        p = p.<span class="property">next</span></span><br><span class="line">        q = q.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">        <span class="keyword">if</span>(p === q)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;此链表循环&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;此链表不循环&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isCircle</span>(linknode)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="最小栈的实现"><a href="#最小栈的实现" class="headerlink" title="最小栈的实现"></a>最小栈的实现</h2><h3 id="设计一个栈-A-让出栈-入栈-输出栈内的最小值的时间复杂度都是O-1"><a href="#设计一个栈-A-让出栈-入栈-输出栈内的最小值的时间复杂度都是O-1" class="headerlink" title="设计一个栈 A, 让出栈 , 入栈 , 输出栈内的最小值的时间复杂度都是O(1)"></a>设计一个栈 A, 让出栈 , 入栈 , 输出栈内的最小值的时间复杂度都是O(1)</h3><h4 id="思路-再设计一个栈-B-存入A第一个元素-每次A入栈的时候-跟B栈顶元素作比较-如果入栈元素小于B栈顶元素-则B也入栈此元素-A出栈的时候-跟B栈顶元素做比较-如果相等-B出栈-这样-B栈顶永远都是A中的最小元素"><a href="#思路-再设计一个栈-B-存入A第一个元素-每次A入栈的时候-跟B栈顶元素作比较-如果入栈元素小于B栈顶元素-则B也入栈此元素-A出栈的时候-跟B栈顶元素做比较-如果相等-B出栈-这样-B栈顶永远都是A中的最小元素" class="headerlink" title="思路:  再设计一个栈 B 存入A第一个元素 , 每次A入栈的时候 , 跟B栈顶元素作比较 , 如果入栈元素小于B栈顶元素 , 则B也入栈此元素 , A出栈的时候 , 跟B栈顶元素做比较 , 如果相等 , B出栈,这样 ,B栈顶永远都是A中的最小元素"></a>思路:  再设计一个栈 B 存入A第一个元素 , 每次A入栈的时候 , 跟B栈顶元素作比较 , 如果入栈元素小于B栈顶元素 , 则B也入栈此元素 , A出栈的时候 , 跟B栈顶元素做比较 , 如果相等 , B出栈,这样 ,B栈顶永远都是A中的最小元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设计一个栈 , 让出栈 , 入栈 , 输出栈内的最小值的时间复杂度都是O(1)</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> len = arr.<span class="property">length</span> </span><br><span class="line"><span class="keyword">let</span> len1 = arr.<span class="property">length</span> </span><br><span class="line"><span class="keyword">var</span> min</span><br><span class="line"><span class="keyword">let</span> A = []</span><br><span class="line"><span class="keyword">let</span> B = []</span><br><span class="line"><span class="comment">//让元素都入栈 , 栈A和栈B都造好了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(len)&#123;</span><br><span class="line">    <span class="keyword">if</span>(len == len1)</span><br><span class="line">    &#123;</span><br><span class="line">        min = arr[<span class="number">0</span>]</span><br><span class="line">        B.<span class="title function_">push</span>(min)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> num = arr.<span class="title function_">shift</span>()</span><br><span class="line">    A.<span class="title function_">push</span>(num)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每一次进栈的时候都和min作比较 , 小的放入栈B</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(num&lt;B[B.<span class="property">length</span>-<span class="number">1</span>])&#123;</span><br><span class="line">        B.<span class="title function_">push</span>(num)</span><br><span class="line">    &#125;</span><br><span class="line">    len--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈 , 出栈的与 B 最小的相等 B也出栈</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">deleteA</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> num = A.<span class="title function_">pop</span>()</span><br><span class="line">    <span class="keyword">if</span>(num==B[B.<span class="property">length</span>-<span class="number">1</span>])</span><br><span class="line">    B.<span class="title function_">pop</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈 , 入栈的与 B 最小的相等 B也入栈</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">pushA</span> = (<span class="params">data</span>)=&gt;&#123;</span><br><span class="line">    A.<span class="title function_">push</span>(data)</span><br><span class="line">    <span class="keyword">if</span>(data&lt;B[B.<span class="property">length</span>-<span class="number">1</span>])</span><br><span class="line">    B.<span class="title function_">push</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出栈A中最小的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">pushmin</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> B[B.<span class="property">length</span>-<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pushmin</span>());<span class="comment">//输出A中最小的</span></span><br><span class="line"><span class="title function_">pushA</span>(<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pushmin</span>());<span class="comment">//输出A中最小的</span></span><br><span class="line"><span class="title function_">deleteA</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pushmin</span>());<span class="comment">//输出A中最小的</span></span><br></pre></td></tr></table></figure><h2 id="js实现动态规划-优化时间-优化空间"><a href="#js实现动态规划-优化时间-优化空间" class="headerlink" title="js实现动态规划 , 优化时间 , 优化空间"></a>js实现动态规划 , 优化时间 , 优化空间</h2><p><code>详情见小灰的算法之旅 , 以下是我个人的见解</code><br>==题目==:<br>很久很久以前，有一位国王拥有5座金矿，每座金矿的黄金储量不同，<br>需要参与挖掘的工人人数也不同。例如有的金矿储量是500kg黄金，需 要5个工人来挖掘；有的金矿储量是200kg黄金，需要3个工人来挖 掘…… 如果参与挖矿的工人的总数是10。每座金矿要么全挖，要么不挖，不能 派出一半人挖取一半的金矿。要求用程序求出，要想得到尽可能多的黄金，应该选择挖取哪几座金矿？<br><img src="https://img-blog.csdnimg.cn/2a2fc6bff4e64bb18757836c2797a5fc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="一开始的思路"><a href="#一开始的思路" class="headerlink" title="一开始的思路:"></a>一开始的思路:</h3><p>首先我们想到的是 : 求出每个金矿的性价比 , 从高到低依次挖出金矿<br>挖矿的性价比 : 350/3 &gt; 500/5 &gt;  200/3=300/4=400/5<br> 那么我们<code>十个人</code> </p><ul><li>先用<code> 3 个人挖 350</code> 的金矿 , </li><li>再用 <code>5 个人去挖 500 </code>的金矿 , </li><li>最后剩下<code> 2 个人</code>不能再挖矿  </li><li>此时我们的黄金数量是 <code>850 </code></li></ul><h4 id="这是否就是十个人能挖的最大黄金数量了呢-答案不是"><a href="#这是否就是十个人能挖的最大黄金数量了呢-答案不是" class="headerlink" title="这是否就是十个人能挖的最大黄金数量了呢 ? 答案不是"></a>这是否就是十个人能挖的最大黄金数量了呢 ? 答案不是</h4><p>因为我们 用 5个人 去挖 500 的金矿 , 再用5个人去挖400的金矿 , 此时十个人刚好用完 , 并且黄金的数量是<code>900</code></p><h4 id="那么我们怎么才能获得黄金的最大数量呢-这里就要引入动态规划来实现"><a href="#那么我们怎么才能获得黄金的最大数量呢-这里就要引入动态规划来实现" class="headerlink" title="那么我们怎么才能获得黄金的最大数量呢 ? 这里就要引入动态规划来实现"></a>那么我们怎么才能获得黄金的最大数量呢 ? 这里就要引入动态规划来实现</h4><p>动态规划就是把简单的问题转换成规模较小的子问题,再从简单的子问题自底向上一步一步递推,最终得到问题的最优解 , 这样说你可能还是云里雾里<br>其实我们算出做出每一个举动过后的结果 , 再和其它举动的结果做出比较 , 就可以计算出最好的结果 , 举个列子 : </p><p>p:[5,5,3,4,3],    //金矿开采需要的工人数量<br>g:[500,400,350,300,200]//金矿储量</p><p> ==第一个500金矿我们可以挖也可以不挖==</p><ul><li><code>挖 </code>: 黄金数量+500 ,  工人数量 - 5 </li><li><pre><code>    接下来我们就用剩下的工人去挖下一个金矿 , 此时我们已经获得了500黄金</code></pre></li><li><code>不挖</code> : 黄金数量 + 0 , 工人数量 - 0</li><li><pre><code>    接下来我们就直接用不变的工人数量去挖下一个金矿</code></pre></li></ul><p>==到第二个400金矿的时候==</p><ul><li><code>挖</code> : 黄金数量+400 ,  工人数量 - 5</li><li><pre><code>     此时已经没有工人 ,  要加上第一次挖的500金矿 , 最终的黄金数量是900</code></pre></li><li><code>不挖</code> : 黄金数量 + 0 , 工人数量 - 0 </li><li><pre><code>    到现在为止我们的工人数量和黄金数量都没有变化</code></pre></li></ul><p>==一直这样遍历下去 , 直到工人数量为  零  或者 可以挖的黄金数量为  零   , 返回我们挖出的黄金数量==<br><img src="https://img-blog.csdnimg.cn/102fc30f6a1b4602b77b01da7cc7a41c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h4 id="由题可知-我们创建几个变量"><a href="#由题可知-我们创建几个变量" class="headerlink" title="由题可知 , 我们创建几个变量 :"></a>由题可知 , 我们创建几个变量 :</h4><p> <code>w</code>:工人的数量 ,<code>n</code>:金矿的数量 ,<br> <code>gold</code>:金矿和人数之间的关系(为了之后的思路比较清晰 , 我把这两个装到一个对象里面)</p><p>==例如== : gold.g[0] 和 gold.p[0] 之间的关系就是 当金矿储量为 500 时需要 5 个人挖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">w = <span class="number">10</span> <span class="comment">//工人的数量</span></span><br><span class="line">n = <span class="number">5</span>  <span class="comment">//金矿的数量 </span></span><br><span class="line"><span class="keyword">let</span> gold = &#123;</span><br><span class="line">    <span class="attr">p</span>:[<span class="number">5</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>],<span class="comment">//金矿开采需要的工人数量</span></span><br><span class="line">    <span class="attr">g</span>:[<span class="number">500</span>,<span class="number">400</span>,<span class="number">350</span>,<span class="number">300</span>,<span class="number">200</span>]<span class="comment">//金矿储量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一-js实现动态规划"><a href="#一-js实现动态规划" class="headerlink" title="一 . js实现动态规划"></a>一 . js实现动态规划</h3><p>我们还要实现状态转移方程 : </p><ul><li>金矿数量或者工人数量为<code>零</code>时 : <code>F(n,w) = 0</code></li><li>工人的数量<code>不足以</code>挖当前的金矿时 , 去挖下一个金矿 : <code>F(n-1 , w)</code></li><li>当前工人数量<code>足以</code>挖当前的金矿时 : (有两种选择)<pre><code>  - 挖: ``F(w-gold.p[n-1],n-1,gold)+gold.g[n-1]``  - 不挖:`` F(w,n-1,gold)``</code></pre></li><li>返回第三种情况的最大值  <code>Math.max(F(w,n-1,gold),F(w-gold.p[n-1],n-1,gold)+gold.g[n-1])</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> w = <span class="number">10</span><span class="comment">//工人数量</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">5</span> <span class="comment">//可选金矿数量</span></span><br><span class="line"><span class="keyword">let</span> gold = &#123;</span><br><span class="line">    <span class="attr">p</span>:[<span class="number">5</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>],<span class="comment">//金矿开采需要的工人数量</span></span><br><span class="line">    <span class="attr">g</span>:[<span class="number">500</span>,<span class="number">400</span>,<span class="number">350</span>,<span class="number">300</span>,<span class="number">200</span>]<span class="comment">//金矿储量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">F</span> = (<span class="params">w,n,gold</span>)=&gt;&#123;</span><br><span class="line">    <span class="comment">//金矿没了或者是人没了都返回 0 </span></span><br><span class="line">    <span class="keyword">if</span>(w==<span class="number">0</span>||n==<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前人数不够挖当前的金矿 , 就去看看下一个金矿 , 人数不变</span></span><br><span class="line">    <span class="keyword">if</span>(w&lt;gold.<span class="property">p</span>[n-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">F</span>(w,n-<span class="number">1</span>,gold)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回挖矿或者不挖矿的最优解</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title function_">F</span>(w,n-<span class="number">1</span>,gold),<span class="title function_">F</span>(w-gold.<span class="property">p</span>[n-<span class="number">1</span>],n-<span class="number">1</span>,gold)+gold.<span class="property">g</span>[n-<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">F</span>(w,n,gold));</span><br></pre></td></tr></table></figure><p>就这样我们计算出了每一次挖和不挖获得的黄金数量 , 得到了最大的黄金数量 , 但是这样的时间复杂度非常高O(2^n)</p><h4 id="二-优化时间的动态规划算法-自底向上求解"><a href="#二-优化时间的动态规划算法-自底向上求解" class="headerlink" title="二 . 优化时间的动态规划算法 ( 自底向上求解 )"></a>二 . 优化时间的动态规划算法 ( 自底向上求解 )</h4><p>  算出第一个金矿的所有</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> w = <span class="number">10</span><span class="comment">//工人数量</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">5</span> <span class="comment">//可选金矿数量</span></span><br><span class="line"><span class="keyword">let</span> gold = &#123;</span><br><span class="line">    <span class="attr">p</span>:[<span class="number">5</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>],<span class="comment">//金矿开采需要的工人数量</span></span><br><span class="line">    <span class="attr">g</span>:[<span class="number">500</span>,<span class="number">400</span>,<span class="number">350</span>,<span class="number">300</span>,<span class="number">200</span>]<span class="comment">//金矿储量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写一个二维数组</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>(gold.<span class="property">g</span>.<span class="property">length</span>).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function"><span class="params">x</span>=&gt;</span><span class="title class_">Array</span>(w).<span class="title function_">fill</span>(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getBestGoldMiningV2</span> = (<span class="params">arr</span>)=&gt;&#123;</span><br><span class="line">    <span class="comment">//数组每一格都根据条件进行状态转移方程</span></span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//把第一行的状态方程补满</span></span><br><span class="line">        <span class="keyword">if</span>(index==<span class="number">0</span>)&#123;</span><br><span class="line">            item.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item2,index2</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(gold.<span class="property">p</span>[index]&lt;=index2+<span class="number">1</span>)&#123;</span><br><span class="line">                    arr[index][index2] = gold.<span class="property">g</span>[index]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        item.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item2,index2</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//人数不够就去看看上一个</span></span><br><span class="line">            <span class="keyword">if</span>(gold.<span class="property">p</span>[index]&gt;index2+<span class="number">1</span>)&#123;</span><br><span class="line">                arr[index][index2] = arr[index-<span class="number">1</span>][index2]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//返回挖和不挖之间的最大值(每一行的值都可以状态转移到上一行去)</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">let</span> j = index2-gold.<span class="property">p</span>[index]==-<span class="number">1</span>?<span class="number">0</span>:index2-gold.<span class="property">p</span>[index]</span><br><span class="line">            arr[index][index2] = </span><br><span class="line">            <span class="title class_">Math</span>.<span class="title function_">max</span>(arr[index-<span class="number">1</span>][index2],arr[index-<span class="number">1</span>][j]+gold.<span class="property">g</span>[index])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回最后一格</span></span><br><span class="line">    <span class="keyword">return</span> arr[gold.<span class="property">g</span>.<span class="property">length</span>-<span class="number">1</span>][w-<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getBestGoldMiningV2</span>(arr));</span><br></pre></td></tr></table></figure><p>时间没问题了, 让我们来看看空间</p><h4 id="三-优化空间的算法"><a href="#三-优化空间的算法" class="headerlink" title="三 . 优化空间的算法"></a>三 . 优化空间的算法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上面代码的时间已经是最优的了 , 但是空间仍有优化的空间</span></span><br><span class="line"><span class="comment">//因为我们在填写其中一行的空格的时候 , 都是根据上一行的空格来获取最大收益的 </span></span><br><span class="line"><span class="comment">//所以我们只需要一行数组就可以了 , 但是在计算的时候要从右往左计算 ,</span></span><br><span class="line"><span class="comment">//避免这一行的值把上一行的值覆盖</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="title class_">Array</span>(w).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line"><span class="comment">//初始化第一行的数据</span></span><br><span class="line">arr2.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(gold.<span class="property">p</span>[<span class="number">0</span>]&lt;=index+<span class="number">1</span>)</span><br><span class="line">    arr2[index] = gold.<span class="property">g</span>[<span class="number">0</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getBestGoldMiningV3</span> = (<span class="params">arr2</span>)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">    gold.<span class="property">g</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> person = gold.<span class="property">p</span>[index]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index!=<span class="number">0</span>)</span><br><span class="line">        <span class="comment">//从右边开始循环arr2</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = w-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">let</span> j = i-gold.<span class="property">p</span>[index]==-<span class="number">1</span>?<span class="number">0</span>:i-gold.<span class="property">p</span>[index]</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&gt;=person)&#123;</span><br><span class="line">                arr2[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(arr2[i],arr2[j]+gold.<span class="property">g</span>[index])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr2[w-<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getBestGoldMiningV3</span>(arr2));</span><br></pre></td></tr></table></figure><h2 id="又是一道动态规划的问题"><a href="#又是一道动态规划的问题" class="headerlink" title="又是一道动态规划的问题"></a>又是一道动态规划的问题</h2><p><img src="https://img-blog.csdnimg.cn/fd97efa401b54b0f8ce6f5ceccbb6553.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>一开始直接使用的是动态规划 , 导致栈满</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在这里计算</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">path</span> = (<span class="params">m,n,i,j</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="comment">//向右或者向下走完了只能有一种走法了</span></span><br><span class="line">    <span class="keyword">if</span>(i==m||j==n)<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="comment">//当两个都没有走完</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">path</span>(m,n,i+<span class="number">1</span>,j)+<span class="title function_">path</span>(m,n,i,j+<span class="number">1</span>)+count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uniquePaths = <span class="keyword">function</span>(<span class="params">m, n</span>) &#123;</span><br><span class="line">    <span class="comment">//在这里使用path</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">path</span>(m,n,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用记忆化搜索结合动态规划的思想</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用数组结合动态规划的思想 , 解决递归栈满的情况</span></span><br><span class="line"><span class="keyword">var</span> uniquePaths = <span class="keyword">function</span>(<span class="params">m, n</span>) &#123;</span><br><span class="line">    <span class="comment">//创建一个数组</span></span><br><span class="line">    <span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(m).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">()=&gt;</span>item = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>))</span><br><span class="line">    <span class="comment">//初始化数组 , 走到最底部或者最右边都只剩下一种走法</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span> ;i&lt;m;i++)&#123;</span><br><span class="line">        arr[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j =<span class="number">0</span> ;j&lt;n;j++)&#123;</span><br><span class="line">        arr[<span class="number">0</span>][j] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span> ;j&lt;n;j++)&#123;</span><br><span class="line">            arr[i][j] = arr[i-<span class="number">1</span>][j] + arr[i][j-<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr[m-<span class="number">1</span>][n-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="找出arr数组中-出现次数-为奇数次的数-有两种奇数的数"><a href="#找出arr数组中-出现次数-为奇数次的数-有两种奇数的数" class="headerlink" title="找出arr数组中  出现次数  为奇数次的数 , 有两种奇数的数"></a>找出arr数组中  <code>出现次数</code>  为奇数次的数 , 有两种奇数的数</h2><h2 id="let-arr-4-1-2-2-3-1-4-5"><a href="#let-arr-4-1-2-2-3-1-4-5" class="headerlink" title="let arr = [4,1,2,2,3,1,4,5]"></a>let arr = [4,1,2,2,3,1,4,5]</h2><p>//如果只有一个出现次数是奇数的数的话 , 我们只需要对整个数组进行异或运算 , 算出来的结果就是奇数<br>//如果有两个出现次数是奇数的数的话 , 我们就需要先对整个数组进行异或运算 ,<br>//根据运算结果把元素组分成两个部分 , 然后再依次进行异或运算</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment">//进行异或运算的函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">findLostNum</span> = (<span class="params">arr</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> result = arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b).<span class="title function_">reduce</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a^b</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//把数组分成两个部分再进行异或运算</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">apartArr</span> = (<span class="params">arr</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">findLostNum</span>(arr)==<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;测试案例不符合题意&#x27;</span></span><br><span class="line">    <span class="comment">//先对整个数组进行异或运算</span></span><br><span class="line">    <span class="keyword">let</span> xor = <span class="title function_">findLostNum</span>(arr).<span class="title function_">toString</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> flag = xor.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">indexOf</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">//让mark 指向数组的第一个数</span></span><br><span class="line">    <span class="keyword">let</span> mark = <span class="number">0</span></span><br><span class="line">    <span class="comment">//根据xor的结果把arr分开</span></span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> flag2 = item.<span class="title function_">toString</span>(<span class="number">2</span>).<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">charAt</span>(flag) || <span class="number">0</span></span><br><span class="line">        <span class="comment">//找到符合条件的值就让mark++</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1</span>==flag2)&#123;</span><br><span class="line">            <span class="comment">//交换mark 和 flag2 当前指向的值</span></span><br><span class="line">            [arr[mark],arr[index]]=[arr[index],arr[mark]]</span><br><span class="line">            mark++</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//现在进行分组寻找</span></span><br><span class="line">    <span class="keyword">let</span> left_result = <span class="title function_">findLostNum</span>(arr.<span class="title function_">splice</span>(<span class="number">0</span>,mark))</span><br><span class="line">    <span class="keyword">let</span> right_result = <span class="title function_">findLostNum</span>(arr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;left_result&#125;</span> , <span class="subst">$&#123;right_result&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">apartArr</span>(arr));</span><br></pre></td></tr></table></figure><h2 id="我发现用位运算可以更快并且更加准确的找到用来区分的数字-并且在区分数组的时候就进行异或运算"><a href="#我发现用位运算可以更快并且更加准确的找到用来区分的数字-并且在区分数组的时候就进行异或运算" class="headerlink" title="我发现用位运算可以更快并且更加准确的找到用来区分的数字 , 并且在区分数组的时候就进行异或运算"></a>我发现用位运算可以更快并且更加准确的找到用来区分的数字 , 并且在区分数组的时候就进行异或运算</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">333</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">23333</span>]</span><br><span class="line"><span class="comment">//进行异或运算的函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">findLostNum</span> = (<span class="params">arr</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> result = arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b).<span class="title function_">reduce</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a^b</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//把数组分成两个部分再进行异或运算</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">apartArr</span> = (<span class="params">arr</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">findLostNum</span>(arr)==<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;测试案例不符合题意&#x27;</span></span><br><span class="line">    <span class="comment">//先对整个数组进行异或运算</span></span><br><span class="line">    <span class="keyword">let</span> xor = <span class="title function_">findLostNum</span>(arr).<span class="title function_">toString</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接下来用位运算来找到不同的部分</span></span><br><span class="line">    <span class="keyword">let</span> separator = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">0</span>==(xor&amp;separator))&#123;</span><br><span class="line">        separator&lt;&lt;=<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//现在separator找到了第一个二进制中相同位置不同的数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//让mark 指向数组的第一个数</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">//根据xor的结果把arr分开</span></span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//找到符合条件的值就让mark++</span></span><br><span class="line">        <span class="keyword">if</span>((item&amp;separator)==<span class="number">0</span>)&#123;</span><br><span class="line">            result[<span class="number">0</span>]^=item</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result[<span class="number">1</span>]^=item</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">apartArr</span>(arr));</span><br></pre></td></tr></table></figure><p>三数之和 , 经典的题目了 , 定下一个数 , 转换成二数之和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//核心思想就是将三数之和转换为两数之和 , 将a+b+c=0  转换为 b+c = -a 然后利用左右指针找到符合条件的b 和 c </span></span><br><span class="line"><span class="comment">//在这到题里面还要注意重复的结果要跳过</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">quickSort</span> = (<span class="params">arr,i,j</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;=j)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">let</span> left = i</span><br><span class="line">    <span class="keyword">let</span> mark = left </span><br><span class="line">    <span class="keyword">while</span>(left&lt;=j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[left]&lt;arr[i])&#123;</span><br><span class="line">            mark++</span><br><span class="line">            [arr[left],arr[mark]]=[arr[mark],arr[left]]</span><br><span class="line">        &#125;</span><br><span class="line">        left++</span><br><span class="line">    &#125;</span><br><span class="line">    [arr[i],arr[mark]]=[arr[mark],arr[i]]</span><br><span class="line"></span><br><span class="line">    <span class="title function_">quickSort</span>(arr,i,mark-<span class="number">1</span>)</span><br><span class="line">    <span class="title function_">quickSort</span>(arr,mark+<span class="number">1</span>,j)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> threeSum = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.<span class="property">length</span>&lt;<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">    <span class="comment">//对数组进行排序(使用快排)</span></span><br><span class="line">    <span class="title function_">quickSort</span>(nums,<span class="number">0</span>,nums.<span class="property">length</span>-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> left = i+<span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> right = nums.<span class="property">length</span>-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//去重</span></span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//left &lt; right就一直循环</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">let</span> sum = nums[i]+nums[left]+nums[right]</span><br><span class="line">            <span class="comment">//找到了等于零的情况 , 一起移动</span></span><br><span class="line">            <span class="keyword">if</span>(sum===<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">            arr.<span class="title function_">push</span>([nums[i],nums[left],nums[right]])</span><br><span class="line"></span><br><span class="line">            <span class="comment">//在移动左右指针的时候先对左右指针进行判断 ,相同的就跳过</span></span><br><span class="line">            <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[left]==nums[left+<span class="number">1</span>])</span><br><span class="line">            left++</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[right]==nums[right+<span class="number">1</span>])</span><br><span class="line">            right--</span><br><span class="line"></span><br><span class="line">            left++</span><br><span class="line">            right--</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                left++</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            right--</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> num = [-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">threeSum</span>(num));</span><br></pre></td></tr></table></figure><p>最接近的三数之和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> threeSumClosest = <span class="keyword">function</span> (<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="comment">//如果数组只有三个数 , 直接退出</span></span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="property">length</span> == <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>]</span><br><span class="line">    <span class="comment">//第一层循环定下一个数</span></span><br><span class="line">    <span class="keyword">let</span> result</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">    <span class="comment">//这个是最开始的和与target的差</span></span><br><span class="line">    <span class="keyword">let</span> dis = <span class="title class_">Math</span>.<span class="title function_">abs</span>(nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[nums.<span class="property">length</span> - <span class="number">1</span>] - target)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> left = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> right = nums.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用双指针来找</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> sum = nums[i] + nums[left] + nums[right]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">                right--</span><br><span class="line">                <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(target - sum) &lt;= dis) &#123;</span><br><span class="line">                    result = sum</span><br><span class="line">                    dis = <span class="title class_">Math</span>.<span class="title function_">abs</span>(target - sum)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                left++</span><br><span class="line">                <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(target - sum) &lt;= dis) &#123;</span><br><span class="line">                    result = sum</span><br><span class="line">                    dis = <span class="title class_">Math</span>.<span class="title function_">abs</span>(target - sum)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                result = target</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">threeSumClosest</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], <span class="number">0</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目前更新了:二分法,快排,  js创建链表,  动态规划, 异或运算,三数之和  等       &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;==FindIndex== 找到数组中的&lt;code&gt;第一个&lt;/code&gt;目标值并且返回&lt;code&gt;目标值的下标&lt;/code&gt; , 没有找到就返</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js 实现链表</title>
    <link href="http://example.com/2022/05/06/js%20%E5%AE%9E%E7%8E%B0%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2022/05/06/js%20%E5%AE%9E%E7%8E%B0%E9%93%BE%E8%A1%A8/</id>
    <published>2022-05-06T12:25:17.334Z</published>
    <updated>2022-05-06T12:27:34.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js-实现链表-并判断链表是否循环-循环的长度-循环开始的点"><a href="#js-实现链表-并判断链表是否循环-循环的长度-循环开始的点" class="headerlink" title="js 实现链表 , 并判断链表是否循环 ,循环的长度,循环开始的点"></a>js 实现链表 , 并判断链表是否循环 ,循环的长度,循环开始的点</h1><h2 id="一-js实现链表"><a href="#一-js实现链表" class="headerlink" title="一 . js实现链表"></a>一 . js实现链表</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用js来实现一个链表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = data</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedPropotype</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造节点</span></span><br><span class="line">    <span class="title function_">create</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(data)</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = node</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">            <span class="keyword">while</span> (current.<span class="property">next</span>) &#123;</span><br><span class="line">                current = current.<span class="property">next</span></span><br><span class="line">            &#125;</span><br><span class="line">            current.<span class="property">next</span> = node</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除节点</span></span><br><span class="line">    <span class="title function_">deletenode</span>(<span class="params">index</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">let</span> k = p</span><br><span class="line">        <span class="keyword">let</span> len = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            k = p</span><br><span class="line">            p = p.<span class="property">next</span></span><br><span class="line">            len++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; len) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除超出范围&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> q = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">let</span> l = q</span><br><span class="line">        <span class="comment">//删除头节点</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span></span><br><span class="line">            <span class="keyword">return</span> q.<span class="property">data</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除中间节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; len) &#123;</span><br><span class="line">            <span class="keyword">while</span> (index) &#123;</span><br><span class="line">                l = q</span><br><span class="line">                q = q.<span class="property">next</span></span><br><span class="line">                index--</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> deletenum = q.<span class="property">data</span></span><br><span class="line">            l.<span class="property">next</span> = q.<span class="property">next</span></span><br><span class="line">            <span class="keyword">return</span> deletenum</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除尾节点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            k.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找节点</span></span><br><span class="line">    <span class="title function_">searchnode</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">let</span> k = p</span><br><span class="line">        <span class="keyword">let</span> len = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            k = p</span><br><span class="line">            p = p.<span class="property">next</span></span><br><span class="line">            len++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; len) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查找超出范围&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">while</span>(index)&#123;</span><br><span class="line">            index--</span><br><span class="line">            p = p.<span class="property">next</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改节点</span></span><br><span class="line">    <span class="title function_">editnode</span>(<span class="params">index,data</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">let</span> k = p</span><br><span class="line">        <span class="keyword">let</span> len = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            k = p</span><br><span class="line">            p = p.<span class="property">next</span></span><br><span class="line">            len++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; len) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;修改超出范围&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">while</span>(index)&#123;</span><br><span class="line">            index--</span><br><span class="line">            p = p.<span class="property">next</span></span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="property">data</span> = data</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> linknode = <span class="keyword">new</span> <span class="title class_">LinkedPropotype</span>()</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">1</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">2</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">3</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">4</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">5</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">6</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">7</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">8</span>)</span><br><span class="line"><span class="comment">//linknode.deletenode(2)</span></span><br><span class="line"><span class="comment">//linknode.editnode(4,888)</span></span><br><span class="line"><span class="comment">//linknode.searchnode(5)</span></span><br></pre></td></tr></table></figure><h2 id="二-判断一个链表是否循环"><a href="#二-判断一个链表是否循环" class="headerlink" title="二 . 判断一个链表是否循环"></a>二 . 判断一个链表是否循环</h2><p> 使用<code> 快慢指针</code> , 快指针每次都比慢指针多走一步 , 如果在快指针==没有走到null并且与慢指针相遇了== , 那么该链表就是循环链表<br>首先我们以上面的代码为基础构造一个循环链表 , 加上这三行代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> C = linknode.<span class="title function_">searchnode</span>(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">var</span> G = linknode.<span class="title function_">searchnode</span>(<span class="number">7</span>)</span><br><span class="line">G.<span class="property">next</span> = C</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/450b3511a6c14e168fba34290e042381.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Li66Zyc5YGc,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>判断链表是否循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用  快慢指针  来判断有没有环</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">isCircle</span> = (<span class="params">link</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> p = link.<span class="property">head</span></span><br><span class="line">    <span class="keyword">let</span> q = link.<span class="property">head</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//快指针走完就没有必要再进行判断了</span></span><br><span class="line">    <span class="keyword">while</span>(q&amp;&amp;q.<span class="property">next</span>)&#123;</span><br><span class="line">        p = p.<span class="property">next</span></span><br><span class="line">        q = q.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">        <span class="keyword">if</span>(p === q)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;此链表循环&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;此链表不循环&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-计算链表循环部分的长度"><a href="#三-计算链表循环部分的长度" class="headerlink" title="三 . 计算链表循环部分的长度"></a>三 . 计算链表循环部分的长度</h2><p>快慢指针第一次相遇 , 继续走, 当快慢指针第二次相遇的时候<br> <code>循环的长度  = ( 快慢指针速度差 ) * 前进次数 </code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//变式一 : 求环的长度</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">lengthOfLink</span> = (<span class="params">link</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> p = link.<span class="property">head</span></span><br><span class="line">    <span class="keyword">let</span> q = link.<span class="property">head</span></span><br><span class="line">    <span class="keyword">let</span> flag= <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(q&amp;&amp;q.<span class="property">next</span>)&#123;</span><br><span class="line">        p = p.<span class="property">next</span></span><br><span class="line">        q = q.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">        count++</span><br><span class="line">        <span class="keyword">if</span>(p===q)&#123;</span><br><span class="line">            flag++</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">1</span>)count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="number">2</span>-<span class="number">1</span>)*count</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四-计算入环点"><a href="#四-计算入环点" class="headerlink" title="四 . 计算入环点"></a>四 . 计算入环点</h2><p> 当快慢指针第一次相遇的时候 , <code>将其中一个指针置为head , 将两个指针都变为慢指针</code> , 当两个指针第二次相遇的时候 , 前进的次数就是入环点距离head的距离</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变式二 : 求环的切入点</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">pointLink</span> = (<span class="params">link</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> p = link.<span class="property">head</span></span><br><span class="line">    <span class="keyword">let</span> q = link.<span class="property">head</span></span><br><span class="line">    <span class="keyword">let</span> flag=<span class="number">0</span> </span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(q&amp;&amp;q.<span class="property">next</span>)&#123;</span><br><span class="line">        p = p.<span class="property">next</span></span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">        q = q.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            q = q.<span class="property">next</span></span><br><span class="line">            count++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p===q&amp;&amp;flag==<span class="number">0</span>)&#123;</span><br><span class="line">            q = link.<span class="property">head</span></span><br><span class="line">            flag=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p===q&amp;&amp;flag==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//用js来实现一个链表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = data</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedPropotype</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造节点</span></span><br><span class="line">    <span class="title function_">create</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(data)</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = node</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">            <span class="keyword">while</span> (current.<span class="property">next</span>) &#123;</span><br><span class="line">                current = current.<span class="property">next</span></span><br><span class="line">            &#125;</span><br><span class="line">            current.<span class="property">next</span> = node</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除节点</span></span><br><span class="line">    <span class="title function_">deletenode</span>(<span class="params">index</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">let</span> k = p</span><br><span class="line">        <span class="keyword">let</span> len = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            k = p</span><br><span class="line">            p = p.<span class="property">next</span></span><br><span class="line">            len++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; len) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除超出范围&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> q = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">let</span> l = q</span><br><span class="line">        <span class="comment">//删除头节点</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span></span><br><span class="line">            <span class="keyword">return</span> q.<span class="property">data</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除中间节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; len) &#123;</span><br><span class="line">            <span class="keyword">while</span> (index) &#123;</span><br><span class="line">                l = q</span><br><span class="line">                q = q.<span class="property">next</span></span><br><span class="line">                index--</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> deletenum = q.<span class="property">data</span></span><br><span class="line">            l.<span class="property">next</span> = q.<span class="property">next</span></span><br><span class="line">            <span class="keyword">return</span> deletenum</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除尾节点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            k.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找节点</span></span><br><span class="line">    <span class="title function_">searchnode</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">let</span> k = p</span><br><span class="line">        <span class="keyword">let</span> len = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            k = p</span><br><span class="line">            p = p.<span class="property">next</span></span><br><span class="line">            len++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; len) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查找超出范围&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">while</span>(index)&#123;</span><br><span class="line">            index--</span><br><span class="line">            p = p.<span class="property">next</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改节点</span></span><br><span class="line">    <span class="title function_">editnode</span>(<span class="params">index,data</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">let</span> k = p</span><br><span class="line">        <span class="keyword">let</span> len = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            k = p</span><br><span class="line">            p = p.<span class="property">next</span></span><br><span class="line">            len++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; len) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;修改超出范围&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">while</span>(index)&#123;</span><br><span class="line">            index--</span><br><span class="line">            p = p.<span class="property">next</span></span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="property">data</span> = data</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> linknode = <span class="keyword">new</span> <span class="title class_">LinkedPropotype</span>()</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">1</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">2</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">3</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">4</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">5</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">6</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">7</span>)</span><br><span class="line">linknode.<span class="title function_">create</span>(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> C = linknode.<span class="title function_">searchnode</span>(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">var</span> G = linknode.<span class="title function_">searchnode</span>(<span class="number">7</span>)</span><br><span class="line">G.<span class="property">next</span> = C</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用  快慢指针  来判断有没有环</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">isCircle</span> = (<span class="params">link</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> p = link.<span class="property">head</span></span><br><span class="line">    <span class="keyword">let</span> q = link.<span class="property">head</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//快指针走完就没有必要再进行判断了</span></span><br><span class="line">    <span class="keyword">while</span>(q&amp;&amp;q.<span class="property">next</span>)&#123;</span><br><span class="line">        p = p.<span class="property">next</span></span><br><span class="line">        q = q.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">        <span class="keyword">if</span>(p === q)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;此链表循环&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;此链表不循环&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//变式一 : 求环的长度</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">lengthOfLink</span> = (<span class="params">link</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> p = link.<span class="property">head</span></span><br><span class="line">    <span class="keyword">let</span> q = link.<span class="property">head</span></span><br><span class="line">    <span class="keyword">let</span> flag= <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(q&amp;&amp;q.<span class="property">next</span>)&#123;</span><br><span class="line">        p = p.<span class="property">next</span></span><br><span class="line">        q = q.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">        count++</span><br><span class="line">        <span class="keyword">if</span>(p===q)&#123;</span><br><span class="line">            flag++</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">1</span>)count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="number">2</span>-<span class="number">1</span>)*count</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//变式二 : 求环的切入点</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">pointLink</span> = (<span class="params">link</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> p = link.<span class="property">head</span></span><br><span class="line">    <span class="keyword">let</span> q = link.<span class="property">head</span></span><br><span class="line">    <span class="keyword">let</span> flag=<span class="number">0</span> </span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(q&amp;&amp;q.<span class="property">next</span>)&#123;</span><br><span class="line">        p = p.<span class="property">next</span></span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">        q = q.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            q = q.<span class="property">next</span></span><br><span class="line">            count++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p===q&amp;&amp;flag==<span class="number">0</span>)&#123;</span><br><span class="line">            q = link.<span class="property">head</span></span><br><span class="line">            flag=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p===q&amp;&amp;flag==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">isCircle</span>(linknode)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;环的长度是&#x27;</span>,<span class="title function_">lengthOfLink</span>(linknode));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;环的切入点是&#x27;</span>,<span class="title function_">pointLink</span>(linknode));</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;js-实现链表-并判断链表是否循环-循环的长度-循环开始的点&quot;&gt;&lt;a href=&quot;#js-实现链表-并判断链表是否循环-循环的长度-循环开始的点&quot; class=&quot;headerlink&quot; title=&quot;js 实现链表 , 并判断链表是否循环 ,循环的长度,循环开始的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>排序算法总结</title>
    <link href="http://example.com/2022/05/06/sort/"/>
    <id>http://example.com/2022/05/06/sort/</id>
    <published>2022-05-06T12:21:04.708Z</published>
    <updated>2022-05-06T12:24:17.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="零-冒泡排序-js-时间复杂度-O-N2"><a href="#零-冒泡排序-js-时间复杂度-O-N2" class="headerlink" title="零 . 冒泡排序 ( js ) 时间复杂度: O(N2)"></a>零 . 冒泡排序 ( js ) 时间复杂度: O(N2)</h2><p>循环n次 , 每次把最大的冒泡到最后面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = [<span class="number">2</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">bubbleSort</span> = (<span class="params">arr</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = arr.<span class="property">length</span>-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                [arr[j],arr[j+<span class="number">1</span>]] = [arr[j+<span class="number">1</span>],arr[j]]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bubbleSort</span>(num)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br></pre></td></tr></table></figure><h2 id="一-堆排序-js"><a href="#一-堆排序-js" class="headerlink" title="一 . 堆排序(js)"></a>一 . 堆排序(js)</h2><p> 先把数组调整为大根堆 , 再把最顶部的元素与最后一个元素交换 , 交换之后再次进行堆调整 , 直到调整到最小值在顶部 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = [<span class="number">1</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//调整最大堆 arr数组 , i 是每次调整的父节点  , len 是目前堆的大小</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">downAdjust</span> = (<span class="params">arr, i, len</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//用左孩子来判断终止条件,在里面判断有没有右孩子 如果用右孩子判断的话,不确定结束的时候还有没有左孩子</span></span><br><span class="line">    <span class="keyword">let</span> leftchild = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (leftchild &lt; len) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断右孩子</span></span><br><span class="line">        <span class="keyword">if</span> (leftchild+<span class="number">1</span> &lt; len &amp;&amp; arr[leftchild + <span class="number">1</span>] &gt; arr[leftchild])</span><br><span class="line">            leftchild++</span><br><span class="line">        <span class="comment">//父节点大直接跳出</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt;= arr[leftchild])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="comment">//交换节点</span></span><br><span class="line">        [arr[i], arr[leftchild]] = [arr[leftchild], arr[i]]</span><br><span class="line">        <span class="comment">//下标</span></span><br><span class="line">        i = leftchild</span><br><span class="line">        leftchild = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创造堆 , 进行sort</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">heapSort</span> = (<span class="params">arr</span>)=&gt;&#123;</span><br><span class="line">    <span class="comment">//把这个堆构建成最大堆. i代表的是父节点 , 显然从length-1开始是没有子节点的 </span></span><br><span class="line">    <span class="comment">//从有子节点的父节点开始构造堆 , 也就是i = (arr.length-1-1)/2  &gt;&gt;是除以二的意思</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = (arr.<span class="property">length</span>-<span class="number">2</span>)&gt;&gt;<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="title function_">downAdjust</span>(arr,i,arr.<span class="property">length</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr ,<span class="string">&#x27;最大堆&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环删除替换arr中最大元素到尾部</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i= arr.<span class="property">length</span>-<span class="number">1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        [arr[<span class="number">0</span>],arr[i]] = [arr[i],arr[<span class="number">0</span>]]</span><br><span class="line">        <span class="comment">//替换之后调整堆</span></span><br><span class="line">        <span class="title function_">downAdjust</span>(arr,<span class="number">0</span>,i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num , <span class="string">&#x27;无序数组&#x27;</span>);</span><br><span class="line"><span class="title function_">heapSort</span>(num)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num , <span class="string">&#x27;排序好的数组&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二-快排-js-时间复杂度-O-nlogn"><a href="#二-快排-js-时间复杂度-O-nlogn" class="headerlink" title="二 . 快排 ( js ) 时间复杂度:O(nlogn)"></a>二 . 快排 ( js ) 时间复杂度:O(nlogn)</h2><p>每次选定一个基值 , 比基值小的放在左边 , 比基值大的放右边 , 用递归来实现 , 也可以使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当数据量很大的时候 , 递归快排会造成栈溢出 , 为了解决这个问题 , 我们使用js数组 来模拟栈 , </span></span><br><span class="line"><span class="comment">//将待排序的[left,right]保存到数组中 , 循环取出进行快排 </span></span><br><span class="line"><span class="comment">// let num = [4, 7, 3, 5, 6, 2, 8, 1]</span></span><br><span class="line"><span class="keyword">let</span> num = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>]</span><br><span class="line"><span class="comment">//非递归实现快排</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">quickSort</span> = (<span class="params">num, left, right</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = left</span><br><span class="line">    <span class="keyword">let</span> mark = left</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num[left] &lt; num[flag]) &#123;</span><br><span class="line">            <span class="comment">//这个时候mark就要往右移动一位 , 因为找到了一个小于flag 的数</span></span><br><span class="line">            mark++</span><br><span class="line">            [num[left], num[mark]] = [num[mark], num[left]]</span><br><span class="line">        &#125;</span><br><span class="line">        left++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//交换基准数 和 mark 的值</span></span><br><span class="line">    [num[flag], num[mark]] = [num[mark], num[flag]]</span><br><span class="line">    <span class="comment">//最后要返回基准数</span></span><br><span class="line">    <span class="keyword">return</span> mark</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用非递归的方式进行快排</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">jisuan</span> = (<span class="params">num,left,right</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> list = [[left,right]]</span><br><span class="line">    <span class="keyword">while</span>(list.<span class="property">length</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> now = list.<span class="title function_">pop</span>()</span><br><span class="line">        <span class="keyword">if</span>(now[<span class="number">0</span>]&gt;=now[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">continue</span>;<span class="comment">//结束这次循环去到下一个list.pop</span></span><br><span class="line">        <span class="keyword">let</span> flag = <span class="title function_">quickSort</span>(num,now[<span class="number">0</span>],now[<span class="number">1</span>])</span><br><span class="line">        <span class="comment">//flag-1 和 flag+1 避免了类似[1,3,2,5,9,6,8,7]这样flag一直卡在0的情况</span></span><br><span class="line">        list.<span class="title function_">push</span>([now[<span class="number">0</span>],flag-<span class="number">1</span>])</span><br><span class="line">        list.<span class="title function_">push</span>([flag+<span class="number">1</span>,now[<span class="number">1</span>]])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">jisuan</span>(num,<span class="number">0</span>,num.<span class="property">length</span>-<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br></pre></td></tr></table></figure><h2 id="三-归并排序-O-nlogn"><a href="#三-归并排序-O-nlogn" class="headerlink" title="三 . 归并排序 O(nlogn)"></a>三 . 归并排序 O(nlogn)</h2><p>分开排序再合并起来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">merger</span> = (<span class="params">leftArr,rightArr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> left_len = leftArr.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> right_len = rightArr.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;left_len &amp;&amp; j&lt;right_len)&#123;</span><br><span class="line">        leftArr[i]&lt;rightArr[j] ? arr.<span class="title function_">push</span>(leftArr[i++]) : arr.<span class="title function_">push</span>(rightArr[j++])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;left_len)&#123;</span><br><span class="line">        arr.<span class="title function_">push</span>(leftArr[i++])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;right_len)&#123;</span><br><span class="line">        arr.<span class="title function_">push</span>(rightArr[j++])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mergeSort</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> length = arr.<span class="property">length</span></span><br><span class="line">    <span class="keyword">if</span> (length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>(length/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> leftArr = <span class="title function_">mergeSort</span>(arr.<span class="title function_">slice</span>(<span class="number">0</span>,mid))</span><br><span class="line">    <span class="keyword">let</span> rightArr =<span class="title function_">mergeSort</span>(arr.<span class="title function_">slice</span>(mid))</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">merger</span>(leftArr ,rightArr );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">2</span>,]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mergeSort</span>(num));</span><br></pre></td></tr></table></figure><h2 id="四-插入排序-java-O-n2"><a href="#四-插入排序-java-O-n2" class="headerlink" title="四 . 插入排序 ( java ) O(n2)"></a>四 . 插入排序 ( java ) O(n2)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> class01;</span><br><span class="line"><span class="comment">//插入排序: 保证第一层循环i前面的元素全部都是有序的排序 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sort_charu</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">charusort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(arr.length&lt;<span class="number">2</span>||arr==<span class="literal">null</span>)<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-<span class="number">1</span>;j&gt;=<span class="number">0</span>&amp;&amp;arr[j]&gt;arr[j+<span class="number">1</span>];j--) &#123;</span><br><span class="line">swap(arr, j+<span class="number">1</span>, j);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接输出arr是输出arr的首地址</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i : arr) &#123;</span><br><span class="line">System.err.print(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> i,<span class="type">int</span> j)</span> &#123;</span><br><span class="line">arr[i] = arr[i]^arr[j];</span><br><span class="line">arr[j] = arr[i]^arr[j];</span><br><span class="line">arr[i] = arr[i]^arr[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//int[] arr = new int[]&#123;0,5,1,3,5,4,7,6,2&#125;;</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>&#125;;</span><br><span class="line">charusort(arr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五-选择排序-O-n2"><a href="#五-选择排序-O-n2" class="headerlink" title="五 . 选择排序  O(n2)"></a>五 . 选择排序  O(n2)</h2><p>每次都选择最小的或者最大的放在开头或者放在结尾</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每次遍历都找到最小的元素 , 放到数组的最开始</span></span><br><span class="line"><span class="keyword">let</span> num = [<span class="number">2</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">SelectSort</span> = (<span class="params">arr</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;arr.<span class="property">length</span>-<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> min = i</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=i+<span class="number">1</span>;j&lt;arr.<span class="property">length</span>-<span class="number">1</span>;j++)&#123;</span><br><span class="line">            min = arr[j]&lt;arr[min]?<span class="attr">j</span>:min</span><br><span class="line">        &#125;</span><br><span class="line">        [arr[i],arr[min]] = [arr[min],arr[i]]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SelectSort</span>(num)</span><br></pre></td></tr></table></figure><h2 id="六-桶排序-js"><a href="#六-桶排序-js" class="headerlink" title="六 . 桶排序 ( js )"></a>六 . 桶排序 ( js )</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//桶排序 , 桶的数量就是要排序数组的长度  ,  桶区间就是(max-min)/桶数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = [<span class="number">0.5</span>, <span class="number">0.84</span>, <span class="number">2.18</span>, <span class="number">3.25</span>, <span class="number">4.5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">sort</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> max = num[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> min = num[<span class="number">0</span>]</span><br><span class="line">    num.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        max = item &gt; max ? item : max</span><br><span class="line">        min = item &lt; min ? item : min</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化桶</span></span><br><span class="line">    <span class="keyword">let</span> n = num.<span class="property">length</span></span><br><span class="line">    <span class="comment">//桶区间就是(max-min)/桶数量</span></span><br><span class="line">    <span class="keyword">let</span> d = (max - min) / (n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        arr[i] = []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历原数组 , 将每个元素放入桶中</span></span><br><span class="line">    num.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//item要在每个桶里面都看一看</span></span><br><span class="line">        <span class="comment">//index代表桶</span></span><br><span class="line"></span><br><span class="line">        arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item1, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> left = min + (index) * d</span><br><span class="line">            <span class="keyword">let</span> right = min + (index + <span class="number">1</span>) * d</span><br><span class="line">            <span class="keyword">if</span> (item &gt;= left &amp;&amp; item &lt; right)</span><br><span class="line">                arr[index].<span class="title function_">push</span>(item)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> arr2 = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">//桶已经放好了 , 接下来就是对每个桶进行排序</span></span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">        item.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b)</span><br><span class="line">        arr2.<span class="title function_">push</span>(...item)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr2</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sort</span>(num));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;零-冒泡排序-js-时间复杂度-O-N2&quot;&gt;&lt;a href=&quot;#零-冒泡排序-js-时间复杂度-O-N2&quot; class=&quot;headerlink&quot; title=&quot;零 . 冒泡排序 ( js ) 时间复杂度: O(N2)&quot;&gt;&lt;/a&gt;零 . 冒泡排序 ( js ) 时间</summary>
      
    
    
    
    
  </entry>
  
</feed>
